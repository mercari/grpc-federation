// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
// versions:
//
//	protoc-gen-grpc-federation: dev
//
// source: swapi.proto
package swapipb

import (
	"context"
	"io"
	"log/slog"
	"reflect"
	"runtime/debug"

	grpcfed "github.com/mercari/grpc-federation/grpc/federation"
	grpcfedcel "github.com/mercari/grpc-federation/grpc/federation/cel"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"

	filmpb "github.com/mercari/grpc-federation/demo/swapi/film"
	personpb "github.com/mercari/grpc-federation/demo/swapi/person"
	planetpb "github.com/mercari/grpc-federation/demo/swapi/planet"
	speciespb "github.com/mercari/grpc-federation/demo/swapi/species"
	starshippb "github.com/mercari/grpc-federation/demo/swapi/starship"
	vehiclepb "github.com/mercari/grpc-federation/demo/swapi/vehicle"
	date "google.golang.org/genproto/googleapis/type/date"
)

var (
	_ = reflect.Invalid // to avoid "imported and not used error"
)

// Swapi_FilmArgument is argument for "swapi.Film" message.
type Swapi_FilmArgument struct {
}

// Swapi_FilmsArgument is argument for "swapi.Films" message.
type Swapi_FilmsArgument struct {
	Ids []int64
	Res *filmpb.ListFilmsReply
}

// Swapi_GetFilmReplyArgument is argument for "swapi.GetFilmReply" message.
type Swapi_GetFilmReplyArgument struct {
	Characters *People
	F          *filmpb.Film
	Id         int64
	Planets    *Planets
	Res        *filmpb.GetFilmReply
	Species    *SpeciesList
	Starships  *Starships
	V          *Vehicles
}

// Swapi_GetPersonReplyArgument is argument for "swapi.GetPersonReply" message.
type Swapi_GetPersonReplyArgument struct {
	F         *Films
	Id        int64
	P         *personpb.Person
	Res       *personpb.GetPersonReply
	Species   *SpeciesList
	Starships *Starships
	V         *Vehicles
}

// Swapi_GetPlanetReplyArgument is argument for "swapi.GetPlanetReply" message.
type Swapi_GetPlanetReplyArgument struct {
	F         *Films
	Id        int64
	P         *planetpb.Planet
	Res       *planetpb.GetPlanetReply
	Residents *People
}

// Swapi_GetSpeciesReplyArgument is argument for "swapi.GetSpeciesReply" message.
type Swapi_GetSpeciesReplyArgument struct {
	F   *Films
	Id  int64
	P   *People
	Res *speciespb.GetSpeciesReply
	S   *speciespb.Species
}

// Swapi_GetStarshipReplyArgument is argument for "swapi.GetStarshipReply" message.
type Swapi_GetStarshipReplyArgument struct {
	F   *Films
	Id  int64
	P   *People
	Res *starshippb.GetStarshipReply
	S   *starshippb.Starship
}

// Swapi_GetVehicleReplyArgument is argument for "swapi.GetVehicleReply" message.
type Swapi_GetVehicleReplyArgument struct {
	F   *Films
	Id  int64
	P   *People
	Res *vehiclepb.GetVehicleReply
	V   *vehiclepb.Vehicle
}

// Swapi_ListFilmsReplyArgument is argument for "swapi.ListFilmsReply" message.
type Swapi_ListFilmsReplyArgument struct {
	F   *Films
	Ids []int64
}

// Swapi_ListPeopleReplyArgument is argument for "swapi.ListPeopleReply" message.
type Swapi_ListPeopleReplyArgument struct {
	Ids []int64
	P   *People
}

// Swapi_ListPlanetsReplyArgument is argument for "swapi.ListPlanetsReply" message.
type Swapi_ListPlanetsReplyArgument struct {
	Ids []int64
	P   *Planets
}

// Swapi_ListSpeciesReplyArgument is argument for "swapi.ListSpeciesReply" message.
type Swapi_ListSpeciesReplyArgument struct {
	Ids []int64
	S   *SpeciesList
}

// Swapi_ListStarshipsReplyArgument is argument for "swapi.ListStarshipsReply" message.
type Swapi_ListStarshipsReplyArgument struct {
	Ids []int64
	S   *Starships
}

// Swapi_ListVehiclesReplyArgument is argument for "swapi.ListVehiclesReply" message.
type Swapi_ListVehiclesReplyArgument struct {
	Ids []int64
	V   *Vehicles
}

// Swapi_PeopleArgument is argument for "swapi.People" message.
type Swapi_PeopleArgument struct {
	Ids []int64
	Res *personpb.ListPeopleReply
}

// Swapi_PersonArgument is argument for "swapi.Person" message.
type Swapi_PersonArgument struct {
}

// Swapi_PlanetArgument is argument for "swapi.Planet" message.
type Swapi_PlanetArgument struct {
}

// Swapi_PlanetsArgument is argument for "swapi.Planets" message.
type Swapi_PlanetsArgument struct {
	Ids []int64
	Res *planetpb.ListPlanetsReply
}

// Swapi_SpeciesArgument is argument for "swapi.Species" message.
type Swapi_SpeciesArgument struct {
}

// Swapi_SpeciesListArgument is argument for "swapi.SpeciesList" message.
type Swapi_SpeciesListArgument struct {
	Ids []int64
	Res *speciespb.ListSpeciesReply
}

// Swapi_StarshipArgument is argument for "swapi.Starship" message.
type Swapi_StarshipArgument struct {
}

// Swapi_StarshipsArgument is argument for "swapi.Starships" message.
type Swapi_StarshipsArgument struct {
	Ids []int64
	Res *starshippb.ListStarshipsReply
}

// Swapi_VehicleArgument is argument for "swapi.Vehicle" message.
type Swapi_VehicleArgument struct {
}

// Swapi_VehiclesArgument is argument for "swapi.Vehicles" message.
type Swapi_VehiclesArgument struct {
	Ids []int64
	Res *vehiclepb.ListVehiclesReply
}

// SWAPIConfig configuration required to initialize the service that use GRPC Federation.
type SWAPIConfig struct {
	// Client provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
	// If this interface is not provided, an error is returned during initialization.
	Client SWAPIClientFactory // required
	// ErrorHandler Federation Service often needs to convert errors received from downstream services.
	// If an error occurs during method execution in the Federation Service, this error handler is called and the returned error is treated as a final error.
	ErrorHandler grpcfed.ErrorHandler
	// Logger sets the logger used to output Debug/Info/Error information.
	Logger *slog.Logger
}

// SWAPIClientFactory provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
type SWAPIClientFactory interface {
	// Swapi_Film_FilmServiceClient create a gRPC Client to be used to call methods in swapi.film.FilmService.
	Swapi_Film_FilmServiceClient(SWAPIClientConfig) (filmpb.FilmServiceClient, error)
	// Swapi_Person_PersonServiceClient create a gRPC Client to be used to call methods in swapi.person.PersonService.
	Swapi_Person_PersonServiceClient(SWAPIClientConfig) (personpb.PersonServiceClient, error)
	// Swapi_Planet_PlanetServiceClient create a gRPC Client to be used to call methods in swapi.planet.PlanetService.
	Swapi_Planet_PlanetServiceClient(SWAPIClientConfig) (planetpb.PlanetServiceClient, error)
	// Swapi_Species_SpeciesServiceClient create a gRPC Client to be used to call methods in swapi.species.SpeciesService.
	Swapi_Species_SpeciesServiceClient(SWAPIClientConfig) (speciespb.SpeciesServiceClient, error)
	// Swapi_Starship_StarshipServiceClient create a gRPC Client to be used to call methods in swapi.starship.StarshipService.
	Swapi_Starship_StarshipServiceClient(SWAPIClientConfig) (starshippb.StarshipServiceClient, error)
	// Swapi_Vehicle_VehicleServiceClient create a gRPC Client to be used to call methods in swapi.vehicle.VehicleService.
	Swapi_Vehicle_VehicleServiceClient(SWAPIClientConfig) (vehiclepb.VehicleServiceClient, error)
}

// SWAPIClientConfig helper to create gRPC client.
// Hints for creating a gRPC Client.
type SWAPIClientConfig struct {
	// Service FQDN ( `<package-name>.<service-name>` ) of the service on Protocol Buffers.
	Service string
}

// SWAPIDependentClientSet has a gRPC client for all services on which the federation service depends.
// This is provided as an argument when implementing the custom resolver.
type SWAPIDependentClientSet struct {
	Swapi_Film_FilmServiceClient         filmpb.FilmServiceClient
	Swapi_Person_PersonServiceClient     personpb.PersonServiceClient
	Swapi_Planet_PlanetServiceClient     planetpb.PlanetServiceClient
	Swapi_Species_SpeciesServiceClient   speciespb.SpeciesServiceClient
	Swapi_Starship_StarshipServiceClient starshippb.StarshipServiceClient
	Swapi_Vehicle_VehicleServiceClient   vehiclepb.VehicleServiceClient
}

// SWAPIResolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
type SWAPIResolver interface {
}

// SWAPICELPluginWasmConfig type alias for grpcfedcel.WasmConfig.
type SWAPICELPluginWasmConfig = grpcfedcel.WasmConfig

// SWAPICELPluginConfig hints for loading a WebAssembly based plugin.
type SWAPICELPluginConfig struct {
}

// SWAPIUnimplementedResolver a structure implemented to satisfy the Resolver interface.
// An Unimplemented error is always returned.
// This is intended for use when there are many Resolver interfaces that do not need to be implemented,
// by embedding them in a resolver structure that you have created.
type SWAPIUnimplementedResolver struct{}

const (
	SWAPI_DependentMethod_Swapi_Film_FilmService_GetFilm               = "/swapi.film.FilmService/GetFilm"
	SWAPI_DependentMethod_Swapi_Film_FilmService_ListFilms             = "/swapi.film.FilmService/ListFilms"
	SWAPI_DependentMethod_Swapi_Person_PersonService_GetPerson         = "/swapi.person.PersonService/GetPerson"
	SWAPI_DependentMethod_Swapi_Person_PersonService_ListPeople        = "/swapi.person.PersonService/ListPeople"
	SWAPI_DependentMethod_Swapi_Planet_PlanetService_GetPlanet         = "/swapi.planet.PlanetService/GetPlanet"
	SWAPI_DependentMethod_Swapi_Planet_PlanetService_ListPlanets       = "/swapi.planet.PlanetService/ListPlanets"
	SWAPI_DependentMethod_Swapi_Species_SpeciesService_GetSpecies      = "/swapi.species.SpeciesService/GetSpecies"
	SWAPI_DependentMethod_Swapi_Species_SpeciesService_ListSpecies     = "/swapi.species.SpeciesService/ListSpecies"
	SWAPI_DependentMethod_Swapi_Starship_StarshipService_GetStarship   = "/swapi.starship.StarshipService/GetStarship"
	SWAPI_DependentMethod_Swapi_Starship_StarshipService_ListStarships = "/swapi.starship.StarshipService/ListStarships"
	SWAPI_DependentMethod_Swapi_Vehicle_VehicleService_GetVehicle      = "/swapi.vehicle.VehicleService/GetVehicle"
	SWAPI_DependentMethod_Swapi_Vehicle_VehicleService_ListVehicles    = "/swapi.vehicle.VehicleService/ListVehicles"
)

// SWAPI represents Federation Service.
type SWAPI struct {
	*UnimplementedSWAPIServer
	cfg           SWAPIConfig
	logger        *slog.Logger
	errorHandler  grpcfed.ErrorHandler
	celCacheMap   *grpcfed.CELCacheMap
	tracer        trace.Tracer
	celTypeHelper *grpcfed.CELTypeHelper
	envOpts       []grpcfed.CELEnvOption
	celPlugins    []*grpcfedcel.CELPlugin
	client        *SWAPIDependentClientSet
}

// NewSWAPI creates SWAPI instance by SWAPIConfig.
func NewSWAPI(cfg SWAPIConfig) (*SWAPI, error) {
	if cfg.Client == nil {
		return nil, grpcfed.ErrClientConfig
	}
	Swapi_Film_FilmServiceClient, err := cfg.Client.Swapi_Film_FilmServiceClient(SWAPIClientConfig{
		Service: "swapi.film.FilmService",
	})
	if err != nil {
		return nil, err
	}
	Swapi_Person_PersonServiceClient, err := cfg.Client.Swapi_Person_PersonServiceClient(SWAPIClientConfig{
		Service: "swapi.person.PersonService",
	})
	if err != nil {
		return nil, err
	}
	Swapi_Planet_PlanetServiceClient, err := cfg.Client.Swapi_Planet_PlanetServiceClient(SWAPIClientConfig{
		Service: "swapi.planet.PlanetService",
	})
	if err != nil {
		return nil, err
	}
	Swapi_Species_SpeciesServiceClient, err := cfg.Client.Swapi_Species_SpeciesServiceClient(SWAPIClientConfig{
		Service: "swapi.species.SpeciesService",
	})
	if err != nil {
		return nil, err
	}
	Swapi_Starship_StarshipServiceClient, err := cfg.Client.Swapi_Starship_StarshipServiceClient(SWAPIClientConfig{
		Service: "swapi.starship.StarshipService",
	})
	if err != nil {
		return nil, err
	}
	Swapi_Vehicle_VehicleServiceClient, err := cfg.Client.Swapi_Vehicle_VehicleServiceClient(SWAPIClientConfig{
		Service: "swapi.vehicle.VehicleService",
	})
	if err != nil {
		return nil, err
	}
	logger := cfg.Logger
	if logger == nil {
		logger = slog.New(slog.NewJSONHandler(io.Discard, nil))
	}
	errorHandler := cfg.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(ctx context.Context, methodName string, err error) error { return err }
	}
	celTypeHelperFieldMap := grpcfed.CELTypeHelperFieldMap{
		"grpc.federation.private.FilmsArgument": {
			"ids": grpcfed.NewCELFieldType(grpcfed.NewCELListType(grpcfed.CELIntType), "Ids"),
		},
		"grpc.federation.private.GetFilmReplyArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELIntType, "Id"),
		},
		"grpc.federation.private.GetPersonReplyArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELIntType, "Id"),
		},
		"grpc.federation.private.GetPlanetReplyArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELIntType, "Id"),
		},
		"grpc.federation.private.GetSpeciesReplyArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELIntType, "Id"),
		},
		"grpc.federation.private.GetStarshipReplyArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELIntType, "Id"),
		},
		"grpc.federation.private.GetVehicleReplyArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELIntType, "Id"),
		},
		"grpc.federation.private.ListFilmsReplyArgument": {
			"ids": grpcfed.NewCELFieldType(grpcfed.NewCELListType(grpcfed.CELIntType), "Ids"),
		},
		"grpc.federation.private.ListPeopleReplyArgument": {
			"ids": grpcfed.NewCELFieldType(grpcfed.NewCELListType(grpcfed.CELIntType), "Ids"),
		},
		"grpc.federation.private.ListPlanetsReplyArgument": {
			"ids": grpcfed.NewCELFieldType(grpcfed.NewCELListType(grpcfed.CELIntType), "Ids"),
		},
		"grpc.federation.private.ListSpeciesReplyArgument": {
			"ids": grpcfed.NewCELFieldType(grpcfed.NewCELListType(grpcfed.CELIntType), "Ids"),
		},
		"grpc.federation.private.ListStarshipsReplyArgument": {
			"ids": grpcfed.NewCELFieldType(grpcfed.NewCELListType(grpcfed.CELIntType), "Ids"),
		},
		"grpc.federation.private.ListVehiclesReplyArgument": {
			"ids": grpcfed.NewCELFieldType(grpcfed.NewCELListType(grpcfed.CELIntType), "Ids"),
		},
		"grpc.federation.private.PeopleArgument": {
			"ids": grpcfed.NewCELFieldType(grpcfed.NewCELListType(grpcfed.CELIntType), "Ids"),
		},
		"grpc.federation.private.PlanetsArgument": {
			"ids": grpcfed.NewCELFieldType(grpcfed.NewCELListType(grpcfed.CELIntType), "Ids"),
		},
		"grpc.federation.private.SpeciesListArgument": {
			"ids": grpcfed.NewCELFieldType(grpcfed.NewCELListType(grpcfed.CELIntType), "Ids"),
		},
		"grpc.federation.private.StarshipsArgument": {
			"ids": grpcfed.NewCELFieldType(grpcfed.NewCELListType(grpcfed.CELIntType), "Ids"),
		},
		"grpc.federation.private.VehiclesArgument": {
			"ids": grpcfed.NewCELFieldType(grpcfed.NewCELListType(grpcfed.CELIntType), "Ids"),
		},
	}
	celTypeHelper := grpcfed.NewCELTypeHelper(celTypeHelperFieldMap)
	var envOpts []grpcfed.CELEnvOption
	envOpts = append(envOpts, grpcfed.NewDefaultEnvOptions(celTypeHelper)...)
	return &SWAPI{
		cfg:           cfg,
		logger:        logger,
		errorHandler:  errorHandler,
		envOpts:       envOpts,
		celTypeHelper: celTypeHelper,
		celCacheMap:   grpcfed.NewCELCacheMap(),
		tracer:        otel.Tracer("swapi.SWAPI"),
		client: &SWAPIDependentClientSet{
			Swapi_Film_FilmServiceClient:         Swapi_Film_FilmServiceClient,
			Swapi_Person_PersonServiceClient:     Swapi_Person_PersonServiceClient,
			Swapi_Planet_PlanetServiceClient:     Swapi_Planet_PlanetServiceClient,
			Swapi_Species_SpeciesServiceClient:   Swapi_Species_SpeciesServiceClient,
			Swapi_Starship_StarshipServiceClient: Swapi_Starship_StarshipServiceClient,
			Swapi_Vehicle_VehicleServiceClient:   Swapi_Vehicle_VehicleServiceClient,
		},
	}, nil
}

// GetPerson implements "swapi.SWAPI/GetPerson" method.
func (s *SWAPI) GetPerson(ctx context.Context, req *GetPersonRequest) (res *GetPersonReply, e error) {
	ctx, span := s.tracer.Start(ctx, "swapi.SWAPI/GetPerson")
	defer span.End()

	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, debug.Stack())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Swapi_GetPersonReply(ctx, &Swapi_GetPersonReplyArgument{
		Id: req.GetId(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// ListPeople implements "swapi.SWAPI/ListPeople" method.
func (s *SWAPI) ListPeople(ctx context.Context, req *ListPeopleRequest) (res *ListPeopleReply, e error) {
	ctx, span := s.tracer.Start(ctx, "swapi.SWAPI/ListPeople")
	defer span.End()

	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, debug.Stack())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Swapi_ListPeopleReply(ctx, &Swapi_ListPeopleReplyArgument{
		Ids: req.GetIds(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// GetFilm implements "swapi.SWAPI/GetFilm" method.
func (s *SWAPI) GetFilm(ctx context.Context, req *GetFilmRequest) (res *GetFilmReply, e error) {
	ctx, span := s.tracer.Start(ctx, "swapi.SWAPI/GetFilm")
	defer span.End()

	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, debug.Stack())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Swapi_GetFilmReply(ctx, &Swapi_GetFilmReplyArgument{
		Id: req.GetId(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// ListFilms implements "swapi.SWAPI/ListFilms" method.
func (s *SWAPI) ListFilms(ctx context.Context, req *ListFilmsRequest) (res *ListFilmsReply, e error) {
	ctx, span := s.tracer.Start(ctx, "swapi.SWAPI/ListFilms")
	defer span.End()

	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, debug.Stack())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Swapi_ListFilmsReply(ctx, &Swapi_ListFilmsReplyArgument{
		Ids: req.GetIds(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// GetStarship implements "swapi.SWAPI/GetStarship" method.
func (s *SWAPI) GetStarship(ctx context.Context, req *GetStarshipRequest) (res *GetStarshipReply, e error) {
	ctx, span := s.tracer.Start(ctx, "swapi.SWAPI/GetStarship")
	defer span.End()

	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, debug.Stack())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Swapi_GetStarshipReply(ctx, &Swapi_GetStarshipReplyArgument{
		Id: req.GetId(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// ListStarships implements "swapi.SWAPI/ListStarships" method.
func (s *SWAPI) ListStarships(ctx context.Context, req *ListStarshipsRequest) (res *ListStarshipsReply, e error) {
	ctx, span := s.tracer.Start(ctx, "swapi.SWAPI/ListStarships")
	defer span.End()

	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, debug.Stack())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Swapi_ListStarshipsReply(ctx, &Swapi_ListStarshipsReplyArgument{
		Ids: req.GetIds(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// GetSpecies implements "swapi.SWAPI/GetSpecies" method.
func (s *SWAPI) GetSpecies(ctx context.Context, req *GetSpeciesRequest) (res *GetSpeciesReply, e error) {
	ctx, span := s.tracer.Start(ctx, "swapi.SWAPI/GetSpecies")
	defer span.End()

	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, debug.Stack())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Swapi_GetSpeciesReply(ctx, &Swapi_GetSpeciesReplyArgument{
		Id: req.GetId(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// ListSpecies implements "swapi.SWAPI/ListSpecies" method.
func (s *SWAPI) ListSpecies(ctx context.Context, req *ListSpeciesRequest) (res *ListSpeciesReply, e error) {
	ctx, span := s.tracer.Start(ctx, "swapi.SWAPI/ListSpecies")
	defer span.End()

	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, debug.Stack())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Swapi_ListSpeciesReply(ctx, &Swapi_ListSpeciesReplyArgument{
		Ids: req.GetIds(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// GetVehicle implements "swapi.SWAPI/GetVehicle" method.
func (s *SWAPI) GetVehicle(ctx context.Context, req *GetVehicleRequest) (res *GetVehicleReply, e error) {
	ctx, span := s.tracer.Start(ctx, "swapi.SWAPI/GetVehicle")
	defer span.End()

	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, debug.Stack())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Swapi_GetVehicleReply(ctx, &Swapi_GetVehicleReplyArgument{
		Id: req.GetId(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// ListVehicles implements "swapi.SWAPI/ListVehicles" method.
func (s *SWAPI) ListVehicles(ctx context.Context, req *ListVehiclesRequest) (res *ListVehiclesReply, e error) {
	ctx, span := s.tracer.Start(ctx, "swapi.SWAPI/ListVehicles")
	defer span.End()

	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, debug.Stack())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Swapi_ListVehiclesReply(ctx, &Swapi_ListVehiclesReplyArgument{
		Ids: req.GetIds(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// GetPlanet implements "swapi.SWAPI/GetPlanet" method.
func (s *SWAPI) GetPlanet(ctx context.Context, req *GetPlanetRequest) (res *GetPlanetReply, e error) {
	ctx, span := s.tracer.Start(ctx, "swapi.SWAPI/GetPlanet")
	defer span.End()

	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, debug.Stack())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Swapi_GetPlanetReply(ctx, &Swapi_GetPlanetReplyArgument{
		Id: req.GetId(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// ListPlanets implements "swapi.SWAPI/ListPlanets" method.
func (s *SWAPI) ListPlanets(ctx context.Context, req *ListPlanetsRequest) (res *ListPlanetsReply, e error) {
	ctx, span := s.tracer.Start(ctx, "swapi.SWAPI/ListPlanets")
	defer span.End()

	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, debug.Stack())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Swapi_ListPlanetsReply(ctx, &Swapi_ListPlanetsReplyArgument{
		Ids: req.GetIds(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// resolve_Swapi_Films resolve "swapi.Films" message.
func (s *SWAPI) resolve_Swapi_Films(ctx context.Context, req *Swapi_FilmsArgument) (*Films, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.Films")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.Films", slog.Any("message_args", s.logvalue_Swapi_FilmsArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			res *filmpb.ListFilmsReply
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.FilmsArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "res"
	     call {
	       method: "swapi.film.FilmService/ListFilms"
	       request { field: "ids", by: "$.ids" }
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*filmpb.ListFilmsReply, *localValueType]{
		Name: `res`,
		Type: grpcfed.CELObjectType("swapi.film.ListFilmsReply"),
		Setter: func(value *localValueType, v *filmpb.ListFilmsReply) error {
			value.vars.res = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &filmpb.ListFilmsRequest{}
			// { field: "ids", by: "$.ids" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
				Value:             value,
				Expr:              `$.ids`,
				UseContextLibrary: false,
				CacheIndex:        1,
				Setter: func(v []int64) error {
					args.Ids = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.film.FilmService/ListFilms", slog.Any("swapi.film.ListFilmsRequest", s.logvalue_Swapi_Film_ListFilmsRequest(args)))
			return s.client.Swapi_Film_FilmServiceClient.ListFilms(ctx, args)
		},
	}); err != nil {
		if err := s.errorHandler(ctx, SWAPI_DependentMethod_Swapi_Film_FilmService_ListFilms, err); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Res = value.vars.res

	// create a message value to be returned.
	ret := &Films{}

	// field binding section.
	// (grpc.federation.field).by = "res.films"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*filmpb.Film]{
		Value:             value,
		Expr:              `res.films`,
		UseContextLibrary: false,
		CacheIndex:        2,
		Setter: func(v []*filmpb.Film) error {
			filmsValue, err := s.cast_repeated_Swapi_Film_Film__to__repeated_Swapi_Film(v)
			if err != nil {
				return err
			}
			ret.Films = filmsValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.Films", slog.Any("swapi.Films", s.logvalue_Swapi_Films(ret)))
	return ret, nil
}

// resolve_Swapi_GetFilmReply resolve "swapi.GetFilmReply" message.
func (s *SWAPI) resolve_Swapi_GetFilmReply(ctx context.Context, req *Swapi_GetFilmReplyArgument) (*GetFilmReply, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.GetFilmReply")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.GetFilmReply", slog.Any("message_args", s.logvalue_Swapi_GetFilmReplyArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			characters *People
			f          *filmpb.Film
			planets    *Planets
			res        *filmpb.GetFilmReply
			species    *SpeciesList
			starships  *Starships
			v          *Vehicles
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.GetFilmReplyArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()
	// A tree view of message dependencies is shown below.
	/*
	   res ─┐
	        f ─┐
	           characters ─┐
	   res ─┐              │
	        f ─┐           │
	              planets ─┤
	   res ─┐              │
	        f ─┐           │
	              species ─┤
	   res ─┐              │
	        f ─┐           │
	            starships ─┤
	   res ─┐              │
	        f ─┐           │
	                    v ─┤
	*/
	eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "res"
		     call {
		       method: "swapi.film.FilmService/GetFilm"
		       request { field: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*filmpb.GetFilmReply, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("swapi.film.GetFilmReply"),
			Setter: func(value *localValueType, v *filmpb.GetFilmReply) error {
				value.vars.res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &filmpb.GetFilmRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        3,
					Setter: func(v int64) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.film.FilmService/GetFilm", slog.Any("swapi.film.GetFilmRequest", s.logvalue_Swapi_Film_GetFilmRequest(args)))
				return s.client.Swapi_Film_FilmServiceClient.GetFilm(ctx, args)
			},
		}); err != nil {
			if err := s.errorHandler(ctx1, SWAPI_DependentMethod_Swapi_Film_FilmService_GetFilm, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx1, err)
				return nil, err
			}
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "f"
		     by: "res.film"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*filmpb.Film, *localValueType]{
			Name: `f`,
			Type: grpcfed.CELObjectType("swapi.film.Film"),
			Setter: func(value *localValueType, v *filmpb.Film) error {
				value.vars.f = v
				return nil
			},
			By:                  `res.film`,
			ByUseContextLibrary: false,
			ByCacheIndex:        4,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "characters"
		     message {
		       name: "People"
		       args { name: "ids", by: "f.character_ids" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*People, *localValueType]{
			Name: `characters`,
			Type: grpcfed.CELObjectType("swapi.People"),
			Setter: func(value *localValueType, v *People) error {
				value.vars.characters = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Swapi_PeopleArgument{}
				// { name: "ids", by: "f.character_ids" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
					Value:             value,
					Expr:              `f.character_ids`,
					UseContextLibrary: false,
					CacheIndex:        5,
					Setter: func(v []int64) error {
						args.Ids = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Swapi_People(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "res"
		     call {
		       method: "swapi.film.FilmService/GetFilm"
		       request { field: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*filmpb.GetFilmReply, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("swapi.film.GetFilmReply"),
			Setter: func(value *localValueType, v *filmpb.GetFilmReply) error {
				value.vars.res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &filmpb.GetFilmRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        6,
					Setter: func(v int64) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.film.FilmService/GetFilm", slog.Any("swapi.film.GetFilmRequest", s.logvalue_Swapi_Film_GetFilmRequest(args)))
				return s.client.Swapi_Film_FilmServiceClient.GetFilm(ctx, args)
			},
		}); err != nil {
			if err := s.errorHandler(ctx1, SWAPI_DependentMethod_Swapi_Film_FilmService_GetFilm, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx1, err)
				return nil, err
			}
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "f"
		     by: "res.film"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*filmpb.Film, *localValueType]{
			Name: `f`,
			Type: grpcfed.CELObjectType("swapi.film.Film"),
			Setter: func(value *localValueType, v *filmpb.Film) error {
				value.vars.f = v
				return nil
			},
			By:                  `res.film`,
			ByUseContextLibrary: false,
			ByCacheIndex:        7,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "planets"
		     message {
		       name: "Planets"
		       args { name: "ids", by: "f.planet_ids" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*Planets, *localValueType]{
			Name: `planets`,
			Type: grpcfed.CELObjectType("swapi.Planets"),
			Setter: func(value *localValueType, v *Planets) error {
				value.vars.planets = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Swapi_PlanetsArgument{}
				// { name: "ids", by: "f.planet_ids" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
					Value:             value,
					Expr:              `f.planet_ids`,
					UseContextLibrary: false,
					CacheIndex:        8,
					Setter: func(v []int64) error {
						args.Ids = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Swapi_Planets(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "res"
		     call {
		       method: "swapi.film.FilmService/GetFilm"
		       request { field: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*filmpb.GetFilmReply, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("swapi.film.GetFilmReply"),
			Setter: func(value *localValueType, v *filmpb.GetFilmReply) error {
				value.vars.res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &filmpb.GetFilmRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        9,
					Setter: func(v int64) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.film.FilmService/GetFilm", slog.Any("swapi.film.GetFilmRequest", s.logvalue_Swapi_Film_GetFilmRequest(args)))
				return s.client.Swapi_Film_FilmServiceClient.GetFilm(ctx, args)
			},
		}); err != nil {
			if err := s.errorHandler(ctx1, SWAPI_DependentMethod_Swapi_Film_FilmService_GetFilm, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx1, err)
				return nil, err
			}
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "f"
		     by: "res.film"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*filmpb.Film, *localValueType]{
			Name: `f`,
			Type: grpcfed.CELObjectType("swapi.film.Film"),
			Setter: func(value *localValueType, v *filmpb.Film) error {
				value.vars.f = v
				return nil
			},
			By:                  `res.film`,
			ByUseContextLibrary: false,
			ByCacheIndex:        10,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "species"
		     message {
		       name: "SpeciesList"
		       args { name: "ids", by: "f.species_ids" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*SpeciesList, *localValueType]{
			Name: `species`,
			Type: grpcfed.CELObjectType("swapi.SpeciesList"),
			Setter: func(value *localValueType, v *SpeciesList) error {
				value.vars.species = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Swapi_SpeciesListArgument{}
				// { name: "ids", by: "f.species_ids" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
					Value:             value,
					Expr:              `f.species_ids`,
					UseContextLibrary: false,
					CacheIndex:        11,
					Setter: func(v []int64) error {
						args.Ids = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Swapi_SpeciesList(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "res"
		     call {
		       method: "swapi.film.FilmService/GetFilm"
		       request { field: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*filmpb.GetFilmReply, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("swapi.film.GetFilmReply"),
			Setter: func(value *localValueType, v *filmpb.GetFilmReply) error {
				value.vars.res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &filmpb.GetFilmRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        12,
					Setter: func(v int64) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.film.FilmService/GetFilm", slog.Any("swapi.film.GetFilmRequest", s.logvalue_Swapi_Film_GetFilmRequest(args)))
				return s.client.Swapi_Film_FilmServiceClient.GetFilm(ctx, args)
			},
		}); err != nil {
			if err := s.errorHandler(ctx1, SWAPI_DependentMethod_Swapi_Film_FilmService_GetFilm, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx1, err)
				return nil, err
			}
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "f"
		     by: "res.film"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*filmpb.Film, *localValueType]{
			Name: `f`,
			Type: grpcfed.CELObjectType("swapi.film.Film"),
			Setter: func(value *localValueType, v *filmpb.Film) error {
				value.vars.f = v
				return nil
			},
			By:                  `res.film`,
			ByUseContextLibrary: false,
			ByCacheIndex:        13,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "starships"
		     message {
		       name: "Starships"
		       args { name: "ids", by: "f.starship_ids" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*Starships, *localValueType]{
			Name: `starships`,
			Type: grpcfed.CELObjectType("swapi.Starships"),
			Setter: func(value *localValueType, v *Starships) error {
				value.vars.starships = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Swapi_StarshipsArgument{}
				// { name: "ids", by: "f.starship_ids" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
					Value:             value,
					Expr:              `f.starship_ids`,
					UseContextLibrary: false,
					CacheIndex:        14,
					Setter: func(v []int64) error {
						args.Ids = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Swapi_Starships(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "res"
		     call {
		       method: "swapi.film.FilmService/GetFilm"
		       request { field: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*filmpb.GetFilmReply, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("swapi.film.GetFilmReply"),
			Setter: func(value *localValueType, v *filmpb.GetFilmReply) error {
				value.vars.res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &filmpb.GetFilmRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        15,
					Setter: func(v int64) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.film.FilmService/GetFilm", slog.Any("swapi.film.GetFilmRequest", s.logvalue_Swapi_Film_GetFilmRequest(args)))
				return s.client.Swapi_Film_FilmServiceClient.GetFilm(ctx, args)
			},
		}); err != nil {
			if err := s.errorHandler(ctx1, SWAPI_DependentMethod_Swapi_Film_FilmService_GetFilm, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx1, err)
				return nil, err
			}
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "f"
		     by: "res.film"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*filmpb.Film, *localValueType]{
			Name: `f`,
			Type: grpcfed.CELObjectType("swapi.film.Film"),
			Setter: func(value *localValueType, v *filmpb.Film) error {
				value.vars.f = v
				return nil
			},
			By:                  `res.film`,
			ByUseContextLibrary: false,
			ByCacheIndex:        16,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "v"
		     message {
		       name: "Vehicles"
		       args { name: "ids", by: "f.vehicle_ids" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*Vehicles, *localValueType]{
			Name: `v`,
			Type: grpcfed.CELObjectType("swapi.Vehicles"),
			Setter: func(value *localValueType, v *Vehicles) error {
				value.vars.v = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Swapi_VehiclesArgument{}
				// { name: "ids", by: "f.vehicle_ids" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
					Value:             value,
					Expr:              `f.vehicle_ids`,
					UseContextLibrary: false,
					CacheIndex:        17,
					Setter: func(v []int64) error {
						args.Ids = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Swapi_Vehicles(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	if err := eg.Wait(); err != nil {
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Characters = value.vars.characters
	req.F = value.vars.f
	req.Planets = value.vars.planets
	req.Res = value.vars.res
	req.Species = value.vars.species
	req.Starships = value.vars.starships
	req.V = value.vars.v

	// create a message value to be returned.
	ret := &GetFilmReply{}

	// field binding section.
	// (grpc.federation.field).by = "f"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*filmpb.Film]{
		Value:             value,
		Expr:              `f`,
		UseContextLibrary: false,
		CacheIndex:        18,
		Setter: func(v *filmpb.Film) error {
			filmValue, err := s.cast_Swapi_Film_Film__to__Swapi_Film(v)
			if err != nil {
				return err
			}
			ret.Film = filmValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "species.species"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Species]{
		Value:             value,
		Expr:              `species.species`,
		UseContextLibrary: false,
		CacheIndex:        19,
		Setter: func(v []*Species) error {
			ret.Species = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "starships.starships"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Starship]{
		Value:             value,
		Expr:              `starships.starships`,
		UseContextLibrary: false,
		CacheIndex:        20,
		Setter: func(v []*Starship) error {
			ret.Starships = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "v.vehicles"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Vehicle]{
		Value:             value,
		Expr:              `v.vehicles`,
		UseContextLibrary: false,
		CacheIndex:        21,
		Setter: func(v []*Vehicle) error {
			ret.Vehicles = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "characters.people"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Person]{
		Value:             value,
		Expr:              `characters.people`,
		UseContextLibrary: false,
		CacheIndex:        22,
		Setter: func(v []*Person) error {
			ret.Characters = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "planets.planets"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Planet]{
		Value:             value,
		Expr:              `planets.planets`,
		UseContextLibrary: false,
		CacheIndex:        23,
		Setter: func(v []*Planet) error {
			ret.Planets = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.GetFilmReply", slog.Any("swapi.GetFilmReply", s.logvalue_Swapi_GetFilmReply(ret)))
	return ret, nil
}

// resolve_Swapi_GetPersonReply resolve "swapi.GetPersonReply" message.
func (s *SWAPI) resolve_Swapi_GetPersonReply(ctx context.Context, req *Swapi_GetPersonReplyArgument) (*GetPersonReply, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.GetPersonReply")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.GetPersonReply", slog.Any("message_args", s.logvalue_Swapi_GetPersonReplyArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			f         *Films
			p         *personpb.Person
			res       *personpb.GetPersonReply
			species   *SpeciesList
			starships *Starships
			v         *Vehicles
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.GetPersonReplyArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()
	// A tree view of message dependencies is shown below.
	/*
	   res ─┐
	        p ─┐
	                   f ─┐
	   res ─┐             │
	        p ─┐          │
	             species ─┤
	   res ─┐             │
	        p ─┐          │
	           starships ─┤
	   res ─┐             │
	        p ─┐          │
	                   v ─┤
	*/
	eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "res"
		     call {
		       method: "swapi.person.PersonService/GetPerson"
		       request { field: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*personpb.GetPersonReply, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("swapi.person.GetPersonReply"),
			Setter: func(value *localValueType, v *personpb.GetPersonReply) error {
				value.vars.res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &personpb.GetPersonRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        24,
					Setter: func(v int64) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.person.PersonService/GetPerson", slog.Any("swapi.person.GetPersonRequest", s.logvalue_Swapi_Person_GetPersonRequest(args)))
				return s.client.Swapi_Person_PersonServiceClient.GetPerson(ctx, args)
			},
		}); err != nil {
			if err := s.errorHandler(ctx1, SWAPI_DependentMethod_Swapi_Person_PersonService_GetPerson, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx1, err)
				return nil, err
			}
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "p"
		     by: "res.person"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*personpb.Person, *localValueType]{
			Name: `p`,
			Type: grpcfed.CELObjectType("swapi.person.Person"),
			Setter: func(value *localValueType, v *personpb.Person) error {
				value.vars.p = v
				return nil
			},
			By:                  `res.person`,
			ByUseContextLibrary: false,
			ByCacheIndex:        25,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "f"
		     message {
		       name: "Films"
		       args { name: "ids", by: "p.film_ids" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*Films, *localValueType]{
			Name: `f`,
			Type: grpcfed.CELObjectType("swapi.Films"),
			Setter: func(value *localValueType, v *Films) error {
				value.vars.f = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Swapi_FilmsArgument{}
				// { name: "ids", by: "p.film_ids" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
					Value:             value,
					Expr:              `p.film_ids`,
					UseContextLibrary: false,
					CacheIndex:        26,
					Setter: func(v []int64) error {
						args.Ids = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Swapi_Films(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "res"
		     call {
		       method: "swapi.person.PersonService/GetPerson"
		       request { field: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*personpb.GetPersonReply, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("swapi.person.GetPersonReply"),
			Setter: func(value *localValueType, v *personpb.GetPersonReply) error {
				value.vars.res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &personpb.GetPersonRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        27,
					Setter: func(v int64) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.person.PersonService/GetPerson", slog.Any("swapi.person.GetPersonRequest", s.logvalue_Swapi_Person_GetPersonRequest(args)))
				return s.client.Swapi_Person_PersonServiceClient.GetPerson(ctx, args)
			},
		}); err != nil {
			if err := s.errorHandler(ctx1, SWAPI_DependentMethod_Swapi_Person_PersonService_GetPerson, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx1, err)
				return nil, err
			}
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "p"
		     by: "res.person"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*personpb.Person, *localValueType]{
			Name: `p`,
			Type: grpcfed.CELObjectType("swapi.person.Person"),
			Setter: func(value *localValueType, v *personpb.Person) error {
				value.vars.p = v
				return nil
			},
			By:                  `res.person`,
			ByUseContextLibrary: false,
			ByCacheIndex:        28,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "species"
		     message {
		       name: "SpeciesList"
		       args { name: "ids", by: "p.species_ids" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*SpeciesList, *localValueType]{
			Name: `species`,
			Type: grpcfed.CELObjectType("swapi.SpeciesList"),
			Setter: func(value *localValueType, v *SpeciesList) error {
				value.vars.species = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Swapi_SpeciesListArgument{}
				// { name: "ids", by: "p.species_ids" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
					Value:             value,
					Expr:              `p.species_ids`,
					UseContextLibrary: false,
					CacheIndex:        29,
					Setter: func(v []int64) error {
						args.Ids = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Swapi_SpeciesList(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "res"
		     call {
		       method: "swapi.person.PersonService/GetPerson"
		       request { field: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*personpb.GetPersonReply, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("swapi.person.GetPersonReply"),
			Setter: func(value *localValueType, v *personpb.GetPersonReply) error {
				value.vars.res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &personpb.GetPersonRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        30,
					Setter: func(v int64) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.person.PersonService/GetPerson", slog.Any("swapi.person.GetPersonRequest", s.logvalue_Swapi_Person_GetPersonRequest(args)))
				return s.client.Swapi_Person_PersonServiceClient.GetPerson(ctx, args)
			},
		}); err != nil {
			if err := s.errorHandler(ctx1, SWAPI_DependentMethod_Swapi_Person_PersonService_GetPerson, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx1, err)
				return nil, err
			}
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "p"
		     by: "res.person"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*personpb.Person, *localValueType]{
			Name: `p`,
			Type: grpcfed.CELObjectType("swapi.person.Person"),
			Setter: func(value *localValueType, v *personpb.Person) error {
				value.vars.p = v
				return nil
			},
			By:                  `res.person`,
			ByUseContextLibrary: false,
			ByCacheIndex:        31,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "starships"
		     message {
		       name: "Starships"
		       args { name: "ids", by: "p.starship_ids" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*Starships, *localValueType]{
			Name: `starships`,
			Type: grpcfed.CELObjectType("swapi.Starships"),
			Setter: func(value *localValueType, v *Starships) error {
				value.vars.starships = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Swapi_StarshipsArgument{}
				// { name: "ids", by: "p.starship_ids" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
					Value:             value,
					Expr:              `p.starship_ids`,
					UseContextLibrary: false,
					CacheIndex:        32,
					Setter: func(v []int64) error {
						args.Ids = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Swapi_Starships(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "res"
		     call {
		       method: "swapi.person.PersonService/GetPerson"
		       request { field: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*personpb.GetPersonReply, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("swapi.person.GetPersonReply"),
			Setter: func(value *localValueType, v *personpb.GetPersonReply) error {
				value.vars.res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &personpb.GetPersonRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        33,
					Setter: func(v int64) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.person.PersonService/GetPerson", slog.Any("swapi.person.GetPersonRequest", s.logvalue_Swapi_Person_GetPersonRequest(args)))
				return s.client.Swapi_Person_PersonServiceClient.GetPerson(ctx, args)
			},
		}); err != nil {
			if err := s.errorHandler(ctx1, SWAPI_DependentMethod_Swapi_Person_PersonService_GetPerson, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx1, err)
				return nil, err
			}
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "p"
		     by: "res.person"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*personpb.Person, *localValueType]{
			Name: `p`,
			Type: grpcfed.CELObjectType("swapi.person.Person"),
			Setter: func(value *localValueType, v *personpb.Person) error {
				value.vars.p = v
				return nil
			},
			By:                  `res.person`,
			ByUseContextLibrary: false,
			ByCacheIndex:        34,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "v"
		     message {
		       name: "Vehicles"
		       args { name: "ids", by: "p.vehicle_ids" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*Vehicles, *localValueType]{
			Name: `v`,
			Type: grpcfed.CELObjectType("swapi.Vehicles"),
			Setter: func(value *localValueType, v *Vehicles) error {
				value.vars.v = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Swapi_VehiclesArgument{}
				// { name: "ids", by: "p.vehicle_ids" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
					Value:             value,
					Expr:              `p.vehicle_ids`,
					UseContextLibrary: false,
					CacheIndex:        35,
					Setter: func(v []int64) error {
						args.Ids = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Swapi_Vehicles(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	if err := eg.Wait(); err != nil {
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.F = value.vars.f
	req.P = value.vars.p
	req.Res = value.vars.res
	req.Species = value.vars.species
	req.Starships = value.vars.starships
	req.V = value.vars.v

	// create a message value to be returned.
	ret := &GetPersonReply{}

	// field binding section.
	// (grpc.federation.field).by = "p"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*personpb.Person]{
		Value:             value,
		Expr:              `p`,
		UseContextLibrary: false,
		CacheIndex:        36,
		Setter: func(v *personpb.Person) error {
			personValue, err := s.cast_Swapi_Person_Person__to__Swapi_Person(v)
			if err != nil {
				return err
			}
			ret.Person = personValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "f.films"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Film]{
		Value:             value,
		Expr:              `f.films`,
		UseContextLibrary: false,
		CacheIndex:        37,
		Setter: func(v []*Film) error {
			ret.Films = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "species.species"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Species]{
		Value:             value,
		Expr:              `species.species`,
		UseContextLibrary: false,
		CacheIndex:        38,
		Setter: func(v []*Species) error {
			ret.Species = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "starships.starships"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Starship]{
		Value:             value,
		Expr:              `starships.starships`,
		UseContextLibrary: false,
		CacheIndex:        39,
		Setter: func(v []*Starship) error {
			ret.Starships = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "v.vehicles"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Vehicle]{
		Value:             value,
		Expr:              `v.vehicles`,
		UseContextLibrary: false,
		CacheIndex:        40,
		Setter: func(v []*Vehicle) error {
			ret.Vehicles = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.GetPersonReply", slog.Any("swapi.GetPersonReply", s.logvalue_Swapi_GetPersonReply(ret)))
	return ret, nil
}

// resolve_Swapi_GetPlanetReply resolve "swapi.GetPlanetReply" message.
func (s *SWAPI) resolve_Swapi_GetPlanetReply(ctx context.Context, req *Swapi_GetPlanetReplyArgument) (*GetPlanetReply, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.GetPlanetReply")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.GetPlanetReply", slog.Any("message_args", s.logvalue_Swapi_GetPlanetReplyArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			f         *Films
			p         *planetpb.Planet
			res       *planetpb.GetPlanetReply
			residents *People
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.GetPlanetReplyArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()
	// A tree view of message dependencies is shown below.
	/*
	   res ─┐
	        p ─┐
	                   f ─┐
	   res ─┐             │
	        p ─┐          │
	           residents ─┤
	*/
	eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "res"
		     call {
		       method: "swapi.planet.PlanetService/GetPlanet"
		       request { field: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*planetpb.GetPlanetReply, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("swapi.planet.GetPlanetReply"),
			Setter: func(value *localValueType, v *planetpb.GetPlanetReply) error {
				value.vars.res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &planetpb.GetPlanetRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        41,
					Setter: func(v int64) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.planet.PlanetService/GetPlanet", slog.Any("swapi.planet.GetPlanetRequest", s.logvalue_Swapi_Planet_GetPlanetRequest(args)))
				return s.client.Swapi_Planet_PlanetServiceClient.GetPlanet(ctx, args)
			},
		}); err != nil {
			if err := s.errorHandler(ctx1, SWAPI_DependentMethod_Swapi_Planet_PlanetService_GetPlanet, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx1, err)
				return nil, err
			}
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "p"
		     by: "res.planet"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*planetpb.Planet, *localValueType]{
			Name: `p`,
			Type: grpcfed.CELObjectType("swapi.planet.Planet"),
			Setter: func(value *localValueType, v *planetpb.Planet) error {
				value.vars.p = v
				return nil
			},
			By:                  `res.planet`,
			ByUseContextLibrary: false,
			ByCacheIndex:        42,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "f"
		     message {
		       name: "Films"
		       args { name: "ids", by: "p.film_ids" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*Films, *localValueType]{
			Name: `f`,
			Type: grpcfed.CELObjectType("swapi.Films"),
			Setter: func(value *localValueType, v *Films) error {
				value.vars.f = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Swapi_FilmsArgument{}
				// { name: "ids", by: "p.film_ids" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
					Value:             value,
					Expr:              `p.film_ids`,
					UseContextLibrary: false,
					CacheIndex:        43,
					Setter: func(v []int64) error {
						args.Ids = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Swapi_Films(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "res"
		     call {
		       method: "swapi.planet.PlanetService/GetPlanet"
		       request { field: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*planetpb.GetPlanetReply, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("swapi.planet.GetPlanetReply"),
			Setter: func(value *localValueType, v *planetpb.GetPlanetReply) error {
				value.vars.res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &planetpb.GetPlanetRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        44,
					Setter: func(v int64) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.planet.PlanetService/GetPlanet", slog.Any("swapi.planet.GetPlanetRequest", s.logvalue_Swapi_Planet_GetPlanetRequest(args)))
				return s.client.Swapi_Planet_PlanetServiceClient.GetPlanet(ctx, args)
			},
		}); err != nil {
			if err := s.errorHandler(ctx1, SWAPI_DependentMethod_Swapi_Planet_PlanetService_GetPlanet, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx1, err)
				return nil, err
			}
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "p"
		     by: "res.planet"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*planetpb.Planet, *localValueType]{
			Name: `p`,
			Type: grpcfed.CELObjectType("swapi.planet.Planet"),
			Setter: func(value *localValueType, v *planetpb.Planet) error {
				value.vars.p = v
				return nil
			},
			By:                  `res.planet`,
			ByUseContextLibrary: false,
			ByCacheIndex:        45,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "residents"
		     message {
		       name: "People"
		       args { name: "ids", by: "p.resident_ids" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*People, *localValueType]{
			Name: `residents`,
			Type: grpcfed.CELObjectType("swapi.People"),
			Setter: func(value *localValueType, v *People) error {
				value.vars.residents = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Swapi_PeopleArgument{}
				// { name: "ids", by: "p.resident_ids" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
					Value:             value,
					Expr:              `p.resident_ids`,
					UseContextLibrary: false,
					CacheIndex:        46,
					Setter: func(v []int64) error {
						args.Ids = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Swapi_People(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	if err := eg.Wait(); err != nil {
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.F = value.vars.f
	req.P = value.vars.p
	req.Res = value.vars.res
	req.Residents = value.vars.residents

	// create a message value to be returned.
	ret := &GetPlanetReply{}

	// field binding section.
	// (grpc.federation.field).by = "p"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*planetpb.Planet]{
		Value:             value,
		Expr:              `p`,
		UseContextLibrary: false,
		CacheIndex:        47,
		Setter: func(v *planetpb.Planet) error {
			planetValue, err := s.cast_Swapi_Planet_Planet__to__Swapi_Planet(v)
			if err != nil {
				return err
			}
			ret.Planet = planetValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "residents.people"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Person]{
		Value:             value,
		Expr:              `residents.people`,
		UseContextLibrary: false,
		CacheIndex:        48,
		Setter: func(v []*Person) error {
			ret.Residents = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "f.films"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Film]{
		Value:             value,
		Expr:              `f.films`,
		UseContextLibrary: false,
		CacheIndex:        49,
		Setter: func(v []*Film) error {
			ret.Films = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.GetPlanetReply", slog.Any("swapi.GetPlanetReply", s.logvalue_Swapi_GetPlanetReply(ret)))
	return ret, nil
}

// resolve_Swapi_GetSpeciesReply resolve "swapi.GetSpeciesReply" message.
func (s *SWAPI) resolve_Swapi_GetSpeciesReply(ctx context.Context, req *Swapi_GetSpeciesReplyArgument) (*GetSpeciesReply, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.GetSpeciesReply")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.GetSpeciesReply", slog.Any("message_args", s.logvalue_Swapi_GetSpeciesReplyArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			f   *Films
			p   *People
			res *speciespb.GetSpeciesReply
			s   *speciespb.Species
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.GetSpeciesReplyArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()
	// A tree view of message dependencies is shown below.
	/*
	   res ─┐
	        s ─┐
	           f ─┐
	   res ─┐     │
	        s ─┐  │
	           p ─┤
	*/
	eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "res"
		     call {
		       method: "swapi.species.SpeciesService/GetSpecies"
		       request { field: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*speciespb.GetSpeciesReply, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("swapi.species.GetSpeciesReply"),
			Setter: func(value *localValueType, v *speciespb.GetSpeciesReply) error {
				value.vars.res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &speciespb.GetSpeciesRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        50,
					Setter: func(v int64) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.species.SpeciesService/GetSpecies", slog.Any("swapi.species.GetSpeciesRequest", s.logvalue_Swapi_Species_GetSpeciesRequest(args)))
				return s.client.Swapi_Species_SpeciesServiceClient.GetSpecies(ctx, args)
			},
		}); err != nil {
			if err := s.errorHandler(ctx1, SWAPI_DependentMethod_Swapi_Species_SpeciesService_GetSpecies, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx1, err)
				return nil, err
			}
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "s"
		     by: "res.species"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*speciespb.Species, *localValueType]{
			Name: `s`,
			Type: grpcfed.CELObjectType("swapi.species.Species"),
			Setter: func(value *localValueType, v *speciespb.Species) error {
				value.vars.s = v
				return nil
			},
			By:                  `res.species`,
			ByUseContextLibrary: false,
			ByCacheIndex:        51,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "f"
		     message {
		       name: "Films"
		       args { name: "ids", by: "s.film_ids" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*Films, *localValueType]{
			Name: `f`,
			Type: grpcfed.CELObjectType("swapi.Films"),
			Setter: func(value *localValueType, v *Films) error {
				value.vars.f = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Swapi_FilmsArgument{}
				// { name: "ids", by: "s.film_ids" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
					Value:             value,
					Expr:              `s.film_ids`,
					UseContextLibrary: false,
					CacheIndex:        52,
					Setter: func(v []int64) error {
						args.Ids = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Swapi_Films(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "res"
		     call {
		       method: "swapi.species.SpeciesService/GetSpecies"
		       request { field: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*speciespb.GetSpeciesReply, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("swapi.species.GetSpeciesReply"),
			Setter: func(value *localValueType, v *speciespb.GetSpeciesReply) error {
				value.vars.res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &speciespb.GetSpeciesRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        53,
					Setter: func(v int64) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.species.SpeciesService/GetSpecies", slog.Any("swapi.species.GetSpeciesRequest", s.logvalue_Swapi_Species_GetSpeciesRequest(args)))
				return s.client.Swapi_Species_SpeciesServiceClient.GetSpecies(ctx, args)
			},
		}); err != nil {
			if err := s.errorHandler(ctx1, SWAPI_DependentMethod_Swapi_Species_SpeciesService_GetSpecies, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx1, err)
				return nil, err
			}
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "s"
		     by: "res.species"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*speciespb.Species, *localValueType]{
			Name: `s`,
			Type: grpcfed.CELObjectType("swapi.species.Species"),
			Setter: func(value *localValueType, v *speciespb.Species) error {
				value.vars.s = v
				return nil
			},
			By:                  `res.species`,
			ByUseContextLibrary: false,
			ByCacheIndex:        54,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "p"
		     message {
		       name: "People"
		       args { name: "ids", by: "s.person_ids" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*People, *localValueType]{
			Name: `p`,
			Type: grpcfed.CELObjectType("swapi.People"),
			Setter: func(value *localValueType, v *People) error {
				value.vars.p = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Swapi_PeopleArgument{}
				// { name: "ids", by: "s.person_ids" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
					Value:             value,
					Expr:              `s.person_ids`,
					UseContextLibrary: false,
					CacheIndex:        55,
					Setter: func(v []int64) error {
						args.Ids = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Swapi_People(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	if err := eg.Wait(); err != nil {
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.F = value.vars.f
	req.P = value.vars.p
	req.Res = value.vars.res
	req.S = value.vars.s

	// create a message value to be returned.
	ret := &GetSpeciesReply{}

	// field binding section.
	// (grpc.federation.field).by = "s"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*speciespb.Species]{
		Value:             value,
		Expr:              `s`,
		UseContextLibrary: false,
		CacheIndex:        56,
		Setter: func(v *speciespb.Species) error {
			speciesValue, err := s.cast_Swapi_Species_Species__to__Swapi_Species(v)
			if err != nil {
				return err
			}
			ret.Species = speciesValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "p.people"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Person]{
		Value:             value,
		Expr:              `p.people`,
		UseContextLibrary: false,
		CacheIndex:        57,
		Setter: func(v []*Person) error {
			ret.People = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "f.films"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Film]{
		Value:             value,
		Expr:              `f.films`,
		UseContextLibrary: false,
		CacheIndex:        58,
		Setter: func(v []*Film) error {
			ret.Films = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.GetSpeciesReply", slog.Any("swapi.GetSpeciesReply", s.logvalue_Swapi_GetSpeciesReply(ret)))
	return ret, nil
}

// resolve_Swapi_GetStarshipReply resolve "swapi.GetStarshipReply" message.
func (s *SWAPI) resolve_Swapi_GetStarshipReply(ctx context.Context, req *Swapi_GetStarshipReplyArgument) (*GetStarshipReply, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.GetStarshipReply")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.GetStarshipReply", slog.Any("message_args", s.logvalue_Swapi_GetStarshipReplyArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			f   *Films
			p   *People
			res *starshippb.GetStarshipReply
			s   *starshippb.Starship
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.GetStarshipReplyArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()
	// A tree view of message dependencies is shown below.
	/*
	   res ─┐
	        s ─┐
	           f ─┐
	   res ─┐     │
	        s ─┐  │
	           p ─┤
	*/
	eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "res"
		     call {
		       method: "swapi.starship.StarshipService/GetStarship"
		       request { field: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*starshippb.GetStarshipReply, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("swapi.starship.GetStarshipReply"),
			Setter: func(value *localValueType, v *starshippb.GetStarshipReply) error {
				value.vars.res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &starshippb.GetStarshipRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        59,
					Setter: func(v int64) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.starship.StarshipService/GetStarship", slog.Any("swapi.starship.GetStarshipRequest", s.logvalue_Swapi_Starship_GetStarshipRequest(args)))
				return s.client.Swapi_Starship_StarshipServiceClient.GetStarship(ctx, args)
			},
		}); err != nil {
			if err := s.errorHandler(ctx1, SWAPI_DependentMethod_Swapi_Starship_StarshipService_GetStarship, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx1, err)
				return nil, err
			}
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "s"
		     by: "res.starship"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*starshippb.Starship, *localValueType]{
			Name: `s`,
			Type: grpcfed.CELObjectType("swapi.starship.Starship"),
			Setter: func(value *localValueType, v *starshippb.Starship) error {
				value.vars.s = v
				return nil
			},
			By:                  `res.starship`,
			ByUseContextLibrary: false,
			ByCacheIndex:        60,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "f"
		     message {
		       name: "Films"
		       args { name: "ids", by: "s.film_ids" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*Films, *localValueType]{
			Name: `f`,
			Type: grpcfed.CELObjectType("swapi.Films"),
			Setter: func(value *localValueType, v *Films) error {
				value.vars.f = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Swapi_FilmsArgument{}
				// { name: "ids", by: "s.film_ids" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
					Value:             value,
					Expr:              `s.film_ids`,
					UseContextLibrary: false,
					CacheIndex:        61,
					Setter: func(v []int64) error {
						args.Ids = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Swapi_Films(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "res"
		     call {
		       method: "swapi.starship.StarshipService/GetStarship"
		       request { field: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*starshippb.GetStarshipReply, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("swapi.starship.GetStarshipReply"),
			Setter: func(value *localValueType, v *starshippb.GetStarshipReply) error {
				value.vars.res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &starshippb.GetStarshipRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        62,
					Setter: func(v int64) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.starship.StarshipService/GetStarship", slog.Any("swapi.starship.GetStarshipRequest", s.logvalue_Swapi_Starship_GetStarshipRequest(args)))
				return s.client.Swapi_Starship_StarshipServiceClient.GetStarship(ctx, args)
			},
		}); err != nil {
			if err := s.errorHandler(ctx1, SWAPI_DependentMethod_Swapi_Starship_StarshipService_GetStarship, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx1, err)
				return nil, err
			}
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "s"
		     by: "res.starship"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*starshippb.Starship, *localValueType]{
			Name: `s`,
			Type: grpcfed.CELObjectType("swapi.starship.Starship"),
			Setter: func(value *localValueType, v *starshippb.Starship) error {
				value.vars.s = v
				return nil
			},
			By:                  `res.starship`,
			ByUseContextLibrary: false,
			ByCacheIndex:        63,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "p"
		     message {
		       name: "People"
		       args { name: "ids", by: "s.pilot_ids" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*People, *localValueType]{
			Name: `p`,
			Type: grpcfed.CELObjectType("swapi.People"),
			Setter: func(value *localValueType, v *People) error {
				value.vars.p = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Swapi_PeopleArgument{}
				// { name: "ids", by: "s.pilot_ids" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
					Value:             value,
					Expr:              `s.pilot_ids`,
					UseContextLibrary: false,
					CacheIndex:        64,
					Setter: func(v []int64) error {
						args.Ids = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Swapi_People(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	if err := eg.Wait(); err != nil {
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.F = value.vars.f
	req.P = value.vars.p
	req.Res = value.vars.res
	req.S = value.vars.s

	// create a message value to be returned.
	ret := &GetStarshipReply{}

	// field binding section.
	// (grpc.federation.field).by = "s"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*starshippb.Starship]{
		Value:             value,
		Expr:              `s`,
		UseContextLibrary: false,
		CacheIndex:        65,
		Setter: func(v *starshippb.Starship) error {
			starshipValue, err := s.cast_Swapi_Starship_Starship__to__Swapi_Starship(v)
			if err != nil {
				return err
			}
			ret.Starship = starshipValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "f.films"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Film]{
		Value:             value,
		Expr:              `f.films`,
		UseContextLibrary: false,
		CacheIndex:        66,
		Setter: func(v []*Film) error {
			ret.Films = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "p.people"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Person]{
		Value:             value,
		Expr:              `p.people`,
		UseContextLibrary: false,
		CacheIndex:        67,
		Setter: func(v []*Person) error {
			ret.Pilots = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.GetStarshipReply", slog.Any("swapi.GetStarshipReply", s.logvalue_Swapi_GetStarshipReply(ret)))
	return ret, nil
}

// resolve_Swapi_GetVehicleReply resolve "swapi.GetVehicleReply" message.
func (s *SWAPI) resolve_Swapi_GetVehicleReply(ctx context.Context, req *Swapi_GetVehicleReplyArgument) (*GetVehicleReply, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.GetVehicleReply")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.GetVehicleReply", slog.Any("message_args", s.logvalue_Swapi_GetVehicleReplyArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			f   *Films
			p   *People
			res *vehiclepb.GetVehicleReply
			v   *vehiclepb.Vehicle
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.GetVehicleReplyArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()
	// A tree view of message dependencies is shown below.
	/*
	   res ─┐
	        v ─┐
	           f ─┐
	   res ─┐     │
	        v ─┐  │
	           p ─┤
	*/
	eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "res"
		     call {
		       method: "swapi.vehicle.VehicleService/GetVehicle"
		       request { field: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*vehiclepb.GetVehicleReply, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("swapi.vehicle.GetVehicleReply"),
			Setter: func(value *localValueType, v *vehiclepb.GetVehicleReply) error {
				value.vars.res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &vehiclepb.GetVehicleRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        68,
					Setter: func(v int64) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.vehicle.VehicleService/GetVehicle", slog.Any("swapi.vehicle.GetVehicleRequest", s.logvalue_Swapi_Vehicle_GetVehicleRequest(args)))
				return s.client.Swapi_Vehicle_VehicleServiceClient.GetVehicle(ctx, args)
			},
		}); err != nil {
			if err := s.errorHandler(ctx1, SWAPI_DependentMethod_Swapi_Vehicle_VehicleService_GetVehicle, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx1, err)
				return nil, err
			}
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "v"
		     by: "res.vehicle"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*vehiclepb.Vehicle, *localValueType]{
			Name: `v`,
			Type: grpcfed.CELObjectType("swapi.vehicle.Vehicle"),
			Setter: func(value *localValueType, v *vehiclepb.Vehicle) error {
				value.vars.v = v
				return nil
			},
			By:                  `res.vehicle`,
			ByUseContextLibrary: false,
			ByCacheIndex:        69,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "f"
		     message {
		       name: "Films"
		       args { name: "ids", by: "v.film_ids" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*Films, *localValueType]{
			Name: `f`,
			Type: grpcfed.CELObjectType("swapi.Films"),
			Setter: func(value *localValueType, v *Films) error {
				value.vars.f = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Swapi_FilmsArgument{}
				// { name: "ids", by: "v.film_ids" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
					Value:             value,
					Expr:              `v.film_ids`,
					UseContextLibrary: false,
					CacheIndex:        70,
					Setter: func(v []int64) error {
						args.Ids = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Swapi_Films(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "res"
		     call {
		       method: "swapi.vehicle.VehicleService/GetVehicle"
		       request { field: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*vehiclepb.GetVehicleReply, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("swapi.vehicle.GetVehicleReply"),
			Setter: func(value *localValueType, v *vehiclepb.GetVehicleReply) error {
				value.vars.res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &vehiclepb.GetVehicleRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        71,
					Setter: func(v int64) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.vehicle.VehicleService/GetVehicle", slog.Any("swapi.vehicle.GetVehicleRequest", s.logvalue_Swapi_Vehicle_GetVehicleRequest(args)))
				return s.client.Swapi_Vehicle_VehicleServiceClient.GetVehicle(ctx, args)
			},
		}); err != nil {
			if err := s.errorHandler(ctx1, SWAPI_DependentMethod_Swapi_Vehicle_VehicleService_GetVehicle, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx1, err)
				return nil, err
			}
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "v"
		     by: "res.vehicle"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*vehiclepb.Vehicle, *localValueType]{
			Name: `v`,
			Type: grpcfed.CELObjectType("swapi.vehicle.Vehicle"),
			Setter: func(value *localValueType, v *vehiclepb.Vehicle) error {
				value.vars.v = v
				return nil
			},
			By:                  `res.vehicle`,
			ByUseContextLibrary: false,
			ByCacheIndex:        72,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "p"
		     message {
		       name: "People"
		       args { name: "ids", by: "v.pilot_ids" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*People, *localValueType]{
			Name: `p`,
			Type: grpcfed.CELObjectType("swapi.People"),
			Setter: func(value *localValueType, v *People) error {
				value.vars.p = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Swapi_PeopleArgument{}
				// { name: "ids", by: "v.pilot_ids" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
					Value:             value,
					Expr:              `v.pilot_ids`,
					UseContextLibrary: false,
					CacheIndex:        73,
					Setter: func(v []int64) error {
						args.Ids = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Swapi_People(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	if err := eg.Wait(); err != nil {
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.F = value.vars.f
	req.P = value.vars.p
	req.Res = value.vars.res
	req.V = value.vars.v

	// create a message value to be returned.
	ret := &GetVehicleReply{}

	// field binding section.
	// (grpc.federation.field).by = "v"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*vehiclepb.Vehicle]{
		Value:             value,
		Expr:              `v`,
		UseContextLibrary: false,
		CacheIndex:        74,
		Setter: func(v *vehiclepb.Vehicle) error {
			vehicleValue, err := s.cast_Swapi_Vehicle_Vehicle__to__Swapi_Vehicle(v)
			if err != nil {
				return err
			}
			ret.Vehicle = vehicleValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "f.films"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Film]{
		Value:             value,
		Expr:              `f.films`,
		UseContextLibrary: false,
		CacheIndex:        75,
		Setter: func(v []*Film) error {
			ret.Films = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "p.people"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Person]{
		Value:             value,
		Expr:              `p.people`,
		UseContextLibrary: false,
		CacheIndex:        76,
		Setter: func(v []*Person) error {
			ret.Pilots = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.GetVehicleReply", slog.Any("swapi.GetVehicleReply", s.logvalue_Swapi_GetVehicleReply(ret)))
	return ret, nil
}

// resolve_Swapi_ListFilmsReply resolve "swapi.ListFilmsReply" message.
func (s *SWAPI) resolve_Swapi_ListFilmsReply(ctx context.Context, req *Swapi_ListFilmsReplyArgument) (*ListFilmsReply, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.ListFilmsReply")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.ListFilmsReply", slog.Any("message_args", s.logvalue_Swapi_ListFilmsReplyArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			f *Films
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.ListFilmsReplyArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "f"
	     message {
	       name: "Films"
	       args { name: "ids", by: "$.ids" }
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*Films, *localValueType]{
		Name: `f`,
		Type: grpcfed.CELObjectType("swapi.Films"),
		Setter: func(value *localValueType, v *Films) error {
			value.vars.f = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &Swapi_FilmsArgument{}
			// { name: "ids", by: "$.ids" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
				Value:             value,
				Expr:              `$.ids`,
				UseContextLibrary: false,
				CacheIndex:        77,
				Setter: func(v []int64) error {
					args.Ids = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			return s.resolve_Swapi_Films(ctx, args)
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.F = value.vars.f

	// create a message value to be returned.
	ret := &ListFilmsReply{}

	// field binding section.
	// (grpc.federation.field).by = "f.films"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Film]{
		Value:             value,
		Expr:              `f.films`,
		UseContextLibrary: false,
		CacheIndex:        78,
		Setter: func(v []*Film) error {
			ret.Films = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.ListFilmsReply", slog.Any("swapi.ListFilmsReply", s.logvalue_Swapi_ListFilmsReply(ret)))
	return ret, nil
}

// resolve_Swapi_ListPeopleReply resolve "swapi.ListPeopleReply" message.
func (s *SWAPI) resolve_Swapi_ListPeopleReply(ctx context.Context, req *Swapi_ListPeopleReplyArgument) (*ListPeopleReply, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.ListPeopleReply")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.ListPeopleReply", slog.Any("message_args", s.logvalue_Swapi_ListPeopleReplyArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			p *People
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.ListPeopleReplyArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "p"
	     message {
	       name: "People"
	       args { name: "ids", by: "$.ids" }
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*People, *localValueType]{
		Name: `p`,
		Type: grpcfed.CELObjectType("swapi.People"),
		Setter: func(value *localValueType, v *People) error {
			value.vars.p = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &Swapi_PeopleArgument{}
			// { name: "ids", by: "$.ids" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
				Value:             value,
				Expr:              `$.ids`,
				UseContextLibrary: false,
				CacheIndex:        79,
				Setter: func(v []int64) error {
					args.Ids = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			return s.resolve_Swapi_People(ctx, args)
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.P = value.vars.p

	// create a message value to be returned.
	ret := &ListPeopleReply{}

	// field binding section.
	// (grpc.federation.field).by = "p.people"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Person]{
		Value:             value,
		Expr:              `p.people`,
		UseContextLibrary: false,
		CacheIndex:        80,
		Setter: func(v []*Person) error {
			ret.People = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.ListPeopleReply", slog.Any("swapi.ListPeopleReply", s.logvalue_Swapi_ListPeopleReply(ret)))
	return ret, nil
}

// resolve_Swapi_ListPlanetsReply resolve "swapi.ListPlanetsReply" message.
func (s *SWAPI) resolve_Swapi_ListPlanetsReply(ctx context.Context, req *Swapi_ListPlanetsReplyArgument) (*ListPlanetsReply, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.ListPlanetsReply")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.ListPlanetsReply", slog.Any("message_args", s.logvalue_Swapi_ListPlanetsReplyArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			p *Planets
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.ListPlanetsReplyArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "p"
	     message {
	       name: "Planets"
	       args { name: "ids", by: "$.ids" }
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*Planets, *localValueType]{
		Name: `p`,
		Type: grpcfed.CELObjectType("swapi.Planets"),
		Setter: func(value *localValueType, v *Planets) error {
			value.vars.p = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &Swapi_PlanetsArgument{}
			// { name: "ids", by: "$.ids" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
				Value:             value,
				Expr:              `$.ids`,
				UseContextLibrary: false,
				CacheIndex:        81,
				Setter: func(v []int64) error {
					args.Ids = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			return s.resolve_Swapi_Planets(ctx, args)
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.P = value.vars.p

	// create a message value to be returned.
	ret := &ListPlanetsReply{}

	// field binding section.
	// (grpc.federation.field).by = "p.planets"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Planet]{
		Value:             value,
		Expr:              `p.planets`,
		UseContextLibrary: false,
		CacheIndex:        82,
		Setter: func(v []*Planet) error {
			ret.Planets = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.ListPlanetsReply", slog.Any("swapi.ListPlanetsReply", s.logvalue_Swapi_ListPlanetsReply(ret)))
	return ret, nil
}

// resolve_Swapi_ListSpeciesReply resolve "swapi.ListSpeciesReply" message.
func (s *SWAPI) resolve_Swapi_ListSpeciesReply(ctx context.Context, req *Swapi_ListSpeciesReplyArgument) (*ListSpeciesReply, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.ListSpeciesReply")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.ListSpeciesReply", slog.Any("message_args", s.logvalue_Swapi_ListSpeciesReplyArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			s *SpeciesList
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.ListSpeciesReplyArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "s"
	     message {
	       name: "SpeciesList"
	       args { name: "ids", by: "$.ids" }
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*SpeciesList, *localValueType]{
		Name: `s`,
		Type: grpcfed.CELObjectType("swapi.SpeciesList"),
		Setter: func(value *localValueType, v *SpeciesList) error {
			value.vars.s = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &Swapi_SpeciesListArgument{}
			// { name: "ids", by: "$.ids" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
				Value:             value,
				Expr:              `$.ids`,
				UseContextLibrary: false,
				CacheIndex:        83,
				Setter: func(v []int64) error {
					args.Ids = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			return s.resolve_Swapi_SpeciesList(ctx, args)
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.S = value.vars.s

	// create a message value to be returned.
	ret := &ListSpeciesReply{}

	// field binding section.
	// (grpc.federation.field).by = "s.species"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Species]{
		Value:             value,
		Expr:              `s.species`,
		UseContextLibrary: false,
		CacheIndex:        84,
		Setter: func(v []*Species) error {
			ret.Species = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.ListSpeciesReply", slog.Any("swapi.ListSpeciesReply", s.logvalue_Swapi_ListSpeciesReply(ret)))
	return ret, nil
}

// resolve_Swapi_ListStarshipsReply resolve "swapi.ListStarshipsReply" message.
func (s *SWAPI) resolve_Swapi_ListStarshipsReply(ctx context.Context, req *Swapi_ListStarshipsReplyArgument) (*ListStarshipsReply, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.ListStarshipsReply")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.ListStarshipsReply", slog.Any("message_args", s.logvalue_Swapi_ListStarshipsReplyArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			s *Starships
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.ListStarshipsReplyArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "s"
	     message {
	       name: "Starships"
	       args { name: "ids", by: "$.ids" }
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*Starships, *localValueType]{
		Name: `s`,
		Type: grpcfed.CELObjectType("swapi.Starships"),
		Setter: func(value *localValueType, v *Starships) error {
			value.vars.s = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &Swapi_StarshipsArgument{}
			// { name: "ids", by: "$.ids" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
				Value:             value,
				Expr:              `$.ids`,
				UseContextLibrary: false,
				CacheIndex:        85,
				Setter: func(v []int64) error {
					args.Ids = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			return s.resolve_Swapi_Starships(ctx, args)
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.S = value.vars.s

	// create a message value to be returned.
	ret := &ListStarshipsReply{}

	// field binding section.
	// (grpc.federation.field).by = "s.starships"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Starship]{
		Value:             value,
		Expr:              `s.starships`,
		UseContextLibrary: false,
		CacheIndex:        86,
		Setter: func(v []*Starship) error {
			ret.Starships = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.ListStarshipsReply", slog.Any("swapi.ListStarshipsReply", s.logvalue_Swapi_ListStarshipsReply(ret)))
	return ret, nil
}

// resolve_Swapi_ListVehiclesReply resolve "swapi.ListVehiclesReply" message.
func (s *SWAPI) resolve_Swapi_ListVehiclesReply(ctx context.Context, req *Swapi_ListVehiclesReplyArgument) (*ListVehiclesReply, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.ListVehiclesReply")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.ListVehiclesReply", slog.Any("message_args", s.logvalue_Swapi_ListVehiclesReplyArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			v *Vehicles
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.ListVehiclesReplyArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "v"
	     message {
	       name: "Vehicles"
	       args { name: "ids", by: "$.ids" }
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*Vehicles, *localValueType]{
		Name: `v`,
		Type: grpcfed.CELObjectType("swapi.Vehicles"),
		Setter: func(value *localValueType, v *Vehicles) error {
			value.vars.v = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &Swapi_VehiclesArgument{}
			// { name: "ids", by: "$.ids" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
				Value:             value,
				Expr:              `$.ids`,
				UseContextLibrary: false,
				CacheIndex:        87,
				Setter: func(v []int64) error {
					args.Ids = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			return s.resolve_Swapi_Vehicles(ctx, args)
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.V = value.vars.v

	// create a message value to be returned.
	ret := &ListVehiclesReply{}

	// field binding section.
	// (grpc.federation.field).by = "v.vehicles"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*Vehicle]{
		Value:             value,
		Expr:              `v.vehicles`,
		UseContextLibrary: false,
		CacheIndex:        88,
		Setter: func(v []*Vehicle) error {
			ret.Vehicles = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.ListVehiclesReply", slog.Any("swapi.ListVehiclesReply", s.logvalue_Swapi_ListVehiclesReply(ret)))
	return ret, nil
}

// resolve_Swapi_People resolve "swapi.People" message.
func (s *SWAPI) resolve_Swapi_People(ctx context.Context, req *Swapi_PeopleArgument) (*People, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.People")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.People", slog.Any("message_args", s.logvalue_Swapi_PeopleArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			res *personpb.ListPeopleReply
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.PeopleArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "res"
	     call {
	       method: "swapi.person.PersonService/ListPeople"
	       request { field: "ids", by: "$.ids" }
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*personpb.ListPeopleReply, *localValueType]{
		Name: `res`,
		Type: grpcfed.CELObjectType("swapi.person.ListPeopleReply"),
		Setter: func(value *localValueType, v *personpb.ListPeopleReply) error {
			value.vars.res = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &personpb.ListPeopleRequest{}
			// { field: "ids", by: "$.ids" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
				Value:             value,
				Expr:              `$.ids`,
				UseContextLibrary: false,
				CacheIndex:        89,
				Setter: func(v []int64) error {
					args.Ids = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.person.PersonService/ListPeople", slog.Any("swapi.person.ListPeopleRequest", s.logvalue_Swapi_Person_ListPeopleRequest(args)))
			return s.client.Swapi_Person_PersonServiceClient.ListPeople(ctx, args)
		},
	}); err != nil {
		if err := s.errorHandler(ctx, SWAPI_DependentMethod_Swapi_Person_PersonService_ListPeople, err); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Res = value.vars.res

	// create a message value to be returned.
	ret := &People{}

	// field binding section.
	// (grpc.federation.field).by = "res.people"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*personpb.Person]{
		Value:             value,
		Expr:              `res.people`,
		UseContextLibrary: false,
		CacheIndex:        90,
		Setter: func(v []*personpb.Person) error {
			peopleValue, err := s.cast_repeated_Swapi_Person_Person__to__repeated_Swapi_Person(v)
			if err != nil {
				return err
			}
			ret.People = peopleValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.People", slog.Any("swapi.People", s.logvalue_Swapi_People(ret)))
	return ret, nil
}

// resolve_Swapi_Planets resolve "swapi.Planets" message.
func (s *SWAPI) resolve_Swapi_Planets(ctx context.Context, req *Swapi_PlanetsArgument) (*Planets, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.Planets")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.Planets", slog.Any("message_args", s.logvalue_Swapi_PlanetsArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			res *planetpb.ListPlanetsReply
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.PlanetsArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "res"
	     call {
	       method: "swapi.planet.PlanetService/ListPlanets"
	       request { field: "ids", by: "$.ids" }
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*planetpb.ListPlanetsReply, *localValueType]{
		Name: `res`,
		Type: grpcfed.CELObjectType("swapi.planet.ListPlanetsReply"),
		Setter: func(value *localValueType, v *planetpb.ListPlanetsReply) error {
			value.vars.res = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &planetpb.ListPlanetsRequest{}
			// { field: "ids", by: "$.ids" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
				Value:             value,
				Expr:              `$.ids`,
				UseContextLibrary: false,
				CacheIndex:        91,
				Setter: func(v []int64) error {
					args.Ids = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.planet.PlanetService/ListPlanets", slog.Any("swapi.planet.ListPlanetsRequest", s.logvalue_Swapi_Planet_ListPlanetsRequest(args)))
			return s.client.Swapi_Planet_PlanetServiceClient.ListPlanets(ctx, args)
		},
	}); err != nil {
		if err := s.errorHandler(ctx, SWAPI_DependentMethod_Swapi_Planet_PlanetService_ListPlanets, err); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Res = value.vars.res

	// create a message value to be returned.
	ret := &Planets{}

	// field binding section.
	// (grpc.federation.field).by = "res.planets"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*planetpb.Planet]{
		Value:             value,
		Expr:              `res.planets`,
		UseContextLibrary: false,
		CacheIndex:        92,
		Setter: func(v []*planetpb.Planet) error {
			planetsValue, err := s.cast_repeated_Swapi_Planet_Planet__to__repeated_Swapi_Planet(v)
			if err != nil {
				return err
			}
			ret.Planets = planetsValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.Planets", slog.Any("swapi.Planets", s.logvalue_Swapi_Planets(ret)))
	return ret, nil
}

// resolve_Swapi_SpeciesList resolve "swapi.SpeciesList" message.
func (s *SWAPI) resolve_Swapi_SpeciesList(ctx context.Context, req *Swapi_SpeciesListArgument) (*SpeciesList, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.SpeciesList")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.SpeciesList", slog.Any("message_args", s.logvalue_Swapi_SpeciesListArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			res *speciespb.ListSpeciesReply
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.SpeciesListArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "res"
	     call {
	       method: "swapi.species.SpeciesService/ListSpecies"
	       request { field: "ids", by: "$.ids" }
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*speciespb.ListSpeciesReply, *localValueType]{
		Name: `res`,
		Type: grpcfed.CELObjectType("swapi.species.ListSpeciesReply"),
		Setter: func(value *localValueType, v *speciespb.ListSpeciesReply) error {
			value.vars.res = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &speciespb.ListSpeciesRequest{}
			// { field: "ids", by: "$.ids" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
				Value:             value,
				Expr:              `$.ids`,
				UseContextLibrary: false,
				CacheIndex:        93,
				Setter: func(v []int64) error {
					args.Ids = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.species.SpeciesService/ListSpecies", slog.Any("swapi.species.ListSpeciesRequest", s.logvalue_Swapi_Species_ListSpeciesRequest(args)))
			return s.client.Swapi_Species_SpeciesServiceClient.ListSpecies(ctx, args)
		},
	}); err != nil {
		if err := s.errorHandler(ctx, SWAPI_DependentMethod_Swapi_Species_SpeciesService_ListSpecies, err); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Res = value.vars.res

	// create a message value to be returned.
	ret := &SpeciesList{}

	// field binding section.
	// (grpc.federation.field).by = "res.species"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*speciespb.Species]{
		Value:             value,
		Expr:              `res.species`,
		UseContextLibrary: false,
		CacheIndex:        94,
		Setter: func(v []*speciespb.Species) error {
			speciesValue, err := s.cast_repeated_Swapi_Species_Species__to__repeated_Swapi_Species(v)
			if err != nil {
				return err
			}
			ret.Species = speciesValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.SpeciesList", slog.Any("swapi.SpeciesList", s.logvalue_Swapi_SpeciesList(ret)))
	return ret, nil
}

// resolve_Swapi_Starships resolve "swapi.Starships" message.
func (s *SWAPI) resolve_Swapi_Starships(ctx context.Context, req *Swapi_StarshipsArgument) (*Starships, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.Starships")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.Starships", slog.Any("message_args", s.logvalue_Swapi_StarshipsArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			res *starshippb.ListStarshipsReply
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.StarshipsArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "res"
	     call {
	       method: "swapi.starship.StarshipService/ListStarships"
	       request { field: "ids", by: "$.ids" }
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*starshippb.ListStarshipsReply, *localValueType]{
		Name: `res`,
		Type: grpcfed.CELObjectType("swapi.starship.ListStarshipsReply"),
		Setter: func(value *localValueType, v *starshippb.ListStarshipsReply) error {
			value.vars.res = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &starshippb.ListStarshipsRequest{}
			// { field: "ids", by: "$.ids" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
				Value:             value,
				Expr:              `$.ids`,
				UseContextLibrary: false,
				CacheIndex:        95,
				Setter: func(v []int64) error {
					args.Ids = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.starship.StarshipService/ListStarships", slog.Any("swapi.starship.ListStarshipsRequest", s.logvalue_Swapi_Starship_ListStarshipsRequest(args)))
			return s.client.Swapi_Starship_StarshipServiceClient.ListStarships(ctx, args)
		},
	}); err != nil {
		if err := s.errorHandler(ctx, SWAPI_DependentMethod_Swapi_Starship_StarshipService_ListStarships, err); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Res = value.vars.res

	// create a message value to be returned.
	ret := &Starships{}

	// field binding section.
	// (grpc.federation.field).by = "res.starships"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*starshippb.Starship]{
		Value:             value,
		Expr:              `res.starships`,
		UseContextLibrary: false,
		CacheIndex:        96,
		Setter: func(v []*starshippb.Starship) error {
			starshipsValue, err := s.cast_repeated_Swapi_Starship_Starship__to__repeated_Swapi_Starship(v)
			if err != nil {
				return err
			}
			ret.Starships = starshipsValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.Starships", slog.Any("swapi.Starships", s.logvalue_Swapi_Starships(ret)))
	return ret, nil
}

// resolve_Swapi_Vehicles resolve "swapi.Vehicles" message.
func (s *SWAPI) resolve_Swapi_Vehicles(ctx context.Context, req *Swapi_VehiclesArgument) (*Vehicles, error) {
	ctx, span := s.tracer.Start(ctx, "swapi.Vehicles")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve swapi.Vehicles", slog.Any("message_args", s.logvalue_Swapi_VehiclesArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			res *vehiclepb.ListVehiclesReply
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.VehiclesArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "res"
	     call {
	       method: "swapi.vehicle.VehicleService/ListVehicles"
	       request { field: "ids", by: "$.ids" }
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*vehiclepb.ListVehiclesReply, *localValueType]{
		Name: `res`,
		Type: grpcfed.CELObjectType("swapi.vehicle.ListVehiclesReply"),
		Setter: func(value *localValueType, v *vehiclepb.ListVehiclesReply) error {
			value.vars.res = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &vehiclepb.ListVehiclesRequest{}
			// { field: "ids", by: "$.ids" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
				Value:             value,
				Expr:              `$.ids`,
				UseContextLibrary: false,
				CacheIndex:        97,
				Setter: func(v []int64) error {
					args.Ids = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			grpcfed.Logger(ctx).DebugContext(ctx, "call swapi.vehicle.VehicleService/ListVehicles", slog.Any("swapi.vehicle.ListVehiclesRequest", s.logvalue_Swapi_Vehicle_ListVehiclesRequest(args)))
			return s.client.Swapi_Vehicle_VehicleServiceClient.ListVehicles(ctx, args)
		},
	}); err != nil {
		if err := s.errorHandler(ctx, SWAPI_DependentMethod_Swapi_Vehicle_VehicleService_ListVehicles, err); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Res = value.vars.res

	// create a message value to be returned.
	ret := &Vehicles{}

	// field binding section.
	// (grpc.federation.field).by = "res.vehicles"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*vehiclepb.Vehicle]{
		Value:             value,
		Expr:              `res.vehicles`,
		UseContextLibrary: false,
		CacheIndex:        98,
		Setter: func(v []*vehiclepb.Vehicle) error {
			vehiclesValue, err := s.cast_repeated_Swapi_Vehicle_Vehicle__to__repeated_Swapi_Vehicle(v)
			if err != nil {
				return err
			}
			ret.Vehicles = vehiclesValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved swapi.Vehicles", slog.Any("swapi.Vehicles", s.logvalue_Swapi_Vehicles(ret)))
	return ret, nil
}

// cast_Swapi_Film_Film__to__Swapi_Film cast from "swapi.film.Film" to "swapi.Film".
func (s *SWAPI) cast_Swapi_Film_Film__to__Swapi_Film(from *filmpb.Film) (*Film, error) {
	if from == nil {
		return nil, nil
	}

	idValue := from.GetId()
	titleValue := from.GetTitle()
	episodeIdValue := from.GetEpisodeId()
	openingCrawlValue := from.GetOpeningCrawl()
	directorValue := from.GetDirector()
	producerValue := from.GetProducer()
	releaseDateValue := from.GetReleaseDate()
	urlValue := from.GetUrl()
	createdValue := from.GetCreated()
	editedValue := from.GetEdited()
	speciesIdsValue := from.GetSpeciesIds()
	starshipIdsValue := from.GetStarshipIds()
	vehicleIdsValue := from.GetVehicleIds()
	characterIdsValue := from.GetCharacterIds()
	planetIdsValue := from.GetPlanetIds()

	return &Film{
		Id:           idValue,
		Title:        titleValue,
		EpisodeId:    episodeIdValue,
		OpeningCrawl: openingCrawlValue,
		Director:     directorValue,
		Producer:     producerValue,
		ReleaseDate:  releaseDateValue,
		Url:          urlValue,
		Created:      createdValue,
		Edited:       editedValue,
		SpeciesIds:   speciesIdsValue,
		StarshipIds:  starshipIdsValue,
		VehicleIds:   vehicleIdsValue,
		CharacterIds: characterIdsValue,
		PlanetIds:    planetIdsValue,
	}, nil
}

// cast_Swapi_Person_Person__to__Swapi_Person cast from "swapi.person.Person" to "swapi.Person".
func (s *SWAPI) cast_Swapi_Person_Person__to__Swapi_Person(from *personpb.Person) (*Person, error) {
	if from == nil {
		return nil, nil
	}

	idValue := from.GetId()
	nameValue := from.GetName()
	birthYearValue := from.GetBirthYear()
	eyeColorValue := from.GetEyeColor()
	genderValue := from.GetGender()
	hairColorValue := from.GetHairColor()
	heightValue := from.GetHeight()
	massValue := from.GetMass()
	skinColorValue := from.GetSkinColor()
	homeworldValue := from.GetHomeworld()
	urlValue := from.GetUrl()
	createdValue := from.GetCreated()
	editedValue := from.GetEdited()
	filmIdsValue := from.GetFilmIds()
	speciesIdsValue := from.GetSpeciesIds()
	starshipIdsValue := from.GetStarshipIds()
	vehicleIdsValue := from.GetVehicleIds()

	return &Person{
		Id:          idValue,
		Name:        nameValue,
		BirthYear:   birthYearValue,
		EyeColor:    eyeColorValue,
		Gender:      genderValue,
		HairColor:   hairColorValue,
		Height:      heightValue,
		Mass:        massValue,
		SkinColor:   skinColorValue,
		Homeworld:   homeworldValue,
		Url:         urlValue,
		Created:     createdValue,
		Edited:      editedValue,
		FilmIds:     filmIdsValue,
		SpeciesIds:  speciesIdsValue,
		StarshipIds: starshipIdsValue,
		VehicleIds:  vehicleIdsValue,
	}, nil
}

// cast_Swapi_Planet_Planet__to__Swapi_Planet cast from "swapi.planet.Planet" to "swapi.Planet".
func (s *SWAPI) cast_Swapi_Planet_Planet__to__Swapi_Planet(from *planetpb.Planet) (*Planet, error) {
	if from == nil {
		return nil, nil
	}

	idValue := from.GetId()
	nameValue := from.GetName()
	diameterValue := from.GetDiameter()
	rotationPeriodValue := from.GetRotationPeriod()
	orbitalPeriodValue := from.GetOrbitalPeriod()
	gravityValue := from.GetGravity()
	populationValue := from.GetPopulation()
	climateValue := from.GetClimate()
	terrainValue := from.GetTerrain()
	surfaceWaterValue := from.GetSurfaceWater()
	urlValue := from.GetUrl()
	createdValue := from.GetCreated()
	editedValue := from.GetEdited()
	residentIdsValue := from.GetResidentIds()
	filmIdsValue := from.GetFilmIds()

	return &Planet{
		Id:             idValue,
		Name:           nameValue,
		Diameter:       diameterValue,
		RotationPeriod: rotationPeriodValue,
		OrbitalPeriod:  orbitalPeriodValue,
		Gravity:        gravityValue,
		Population:     populationValue,
		Climate:        climateValue,
		Terrain:        terrainValue,
		SurfaceWater:   surfaceWaterValue,
		Url:            urlValue,
		Created:        createdValue,
		Edited:         editedValue,
		ResidentIds:    residentIdsValue,
		FilmIds:        filmIdsValue,
	}, nil
}

// cast_Swapi_Species_Species__to__Swapi_Species cast from "swapi.species.Species" to "swapi.Species".
func (s *SWAPI) cast_Swapi_Species_Species__to__Swapi_Species(from *speciespb.Species) (*Species, error) {
	if from == nil {
		return nil, nil
	}

	idValue := from.GetId()
	nameValue := from.GetName()
	classificationValue := from.GetClassification()
	designationValue := from.GetDesignation()
	averageHeightValue := from.GetAverageHeight()
	averageLifespanValue := from.GetAverageLifespan()
	eyeColorsValue := from.GetEyeColors()
	hairColorsValue := from.GetHairColors()
	skinColorsValue := from.GetSkinColors()
	languageValue := from.GetLanguage()
	homeworldValue := from.GetHomeworld()
	urlValue := from.GetUrl()
	createdValue := from.GetCreated()
	editedValue := from.GetEdited()
	personIdsValue := from.GetPersonIds()
	filmIdsValue := from.GetFilmIds()

	return &Species{
		Id:              idValue,
		Name:            nameValue,
		Classification:  classificationValue,
		Designation:     designationValue,
		AverageHeight:   averageHeightValue,
		AverageLifespan: averageLifespanValue,
		EyeColors:       eyeColorsValue,
		HairColors:      hairColorsValue,
		SkinColors:      skinColorsValue,
		Language:        languageValue,
		Homeworld:       homeworldValue,
		Url:             urlValue,
		Created:         createdValue,
		Edited:          editedValue,
		PersonIds:       personIdsValue,
		FilmIds:         filmIdsValue,
	}, nil
}

// cast_Swapi_Starship_Starship__to__Swapi_Starship cast from "swapi.starship.Starship" to "swapi.Starship".
func (s *SWAPI) cast_Swapi_Starship_Starship__to__Swapi_Starship(from *starshippb.Starship) (*Starship, error) {
	if from == nil {
		return nil, nil
	}

	idValue := from.GetId()
	nameValue := from.GetName()
	modelValue := from.GetModel()
	starshipClassValue := from.GetStarshipClass()
	manufacturerValue := from.GetManufacturer()
	costInCreditsValue := from.GetCostInCredits()
	lengthValue := from.GetLength()
	crewValue := from.GetCrew()
	passengersValue := from.GetPassengers()
	maxAtmospheringSpeedValue := from.GetMaxAtmospheringSpeed()
	hyperdriveRatingValue := from.GetHyperdriveRating()
	mgltValue := from.GetMglt()
	cargoCapacityValue := from.GetCargoCapacity()
	consumablesValue := from.GetConsumables()
	urlValue := from.GetUrl()
	createdValue := from.GetCreated()
	editedValue := from.GetEdited()
	filmIdsValue := from.GetFilmIds()
	pilotIdsValue := from.GetPilotIds()

	return &Starship{
		Id:                   idValue,
		Name:                 nameValue,
		Model:                modelValue,
		StarshipClass:        starshipClassValue,
		Manufacturer:         manufacturerValue,
		CostInCredits:        costInCreditsValue,
		Length:               lengthValue,
		Crew:                 crewValue,
		Passengers:           passengersValue,
		MaxAtmospheringSpeed: maxAtmospheringSpeedValue,
		HyperdriveRating:     hyperdriveRatingValue,
		Mglt:                 mgltValue,
		CargoCapacity:        cargoCapacityValue,
		Consumables:          consumablesValue,
		Url:                  urlValue,
		Created:              createdValue,
		Edited:               editedValue,
		FilmIds:              filmIdsValue,
		PilotIds:             pilotIdsValue,
	}, nil
}

// cast_Swapi_Vehicle_Vehicle__to__Swapi_Vehicle cast from "swapi.vehicle.Vehicle" to "swapi.Vehicle".
func (s *SWAPI) cast_Swapi_Vehicle_Vehicle__to__Swapi_Vehicle(from *vehiclepb.Vehicle) (*Vehicle, error) {
	if from == nil {
		return nil, nil
	}

	idValue := from.GetId()
	nameValue := from.GetName()
	modelValue := from.GetModel()
	vehicleClassValue := from.GetVehicleClass()
	manufacturerValue := from.GetManufacturer()
	lengthValue := from.GetLength()
	costInCreditsValue := from.GetCostInCredits()
	crewValue := from.GetCrew()
	passengersValue := from.GetPassengers()
	maxAtmospheringSpeedValue := from.GetMaxAtmospheringSpeed()
	cargoCapacityValue := from.GetCargoCapacity()
	consumablesValue := from.GetConsumables()
	urlValue := from.GetUrl()
	createdValue := from.GetCreated()
	editedValue := from.GetEdited()
	filmIdsValue := from.GetFilmIds()
	pilotIdsValue := from.GetPilotIds()

	return &Vehicle{
		Id:                   idValue,
		Name:                 nameValue,
		Model:                modelValue,
		VehicleClass:         vehicleClassValue,
		Manufacturer:         manufacturerValue,
		Length:               lengthValue,
		CostInCredits:        costInCreditsValue,
		Crew:                 crewValue,
		Passengers:           passengersValue,
		MaxAtmospheringSpeed: maxAtmospheringSpeedValue,
		CargoCapacity:        cargoCapacityValue,
		Consumables:          consumablesValue,
		Url:                  urlValue,
		Created:              createdValue,
		Edited:               editedValue,
		FilmIds:              filmIdsValue,
		PilotIds:             pilotIdsValue,
	}, nil
}

// cast_repeated_Swapi_Film_Film__to__repeated_Swapi_Film cast from "repeated swapi.film.Film" to "repeated swapi.Film".
func (s *SWAPI) cast_repeated_Swapi_Film_Film__to__repeated_Swapi_Film(from []*filmpb.Film) ([]*Film, error) {
	ret := make([]*Film, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_Swapi_Film_Film__to__Swapi_Film(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_repeated_Swapi_Person_Person__to__repeated_Swapi_Person cast from "repeated swapi.person.Person" to "repeated swapi.Person".
func (s *SWAPI) cast_repeated_Swapi_Person_Person__to__repeated_Swapi_Person(from []*personpb.Person) ([]*Person, error) {
	ret := make([]*Person, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_Swapi_Person_Person__to__Swapi_Person(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_repeated_Swapi_Planet_Planet__to__repeated_Swapi_Planet cast from "repeated swapi.planet.Planet" to "repeated swapi.Planet".
func (s *SWAPI) cast_repeated_Swapi_Planet_Planet__to__repeated_Swapi_Planet(from []*planetpb.Planet) ([]*Planet, error) {
	ret := make([]*Planet, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_Swapi_Planet_Planet__to__Swapi_Planet(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_repeated_Swapi_Species_Species__to__repeated_Swapi_Species cast from "repeated swapi.species.Species" to "repeated swapi.Species".
func (s *SWAPI) cast_repeated_Swapi_Species_Species__to__repeated_Swapi_Species(from []*speciespb.Species) ([]*Species, error) {
	ret := make([]*Species, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_Swapi_Species_Species__to__Swapi_Species(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_repeated_Swapi_Starship_Starship__to__repeated_Swapi_Starship cast from "repeated swapi.starship.Starship" to "repeated swapi.Starship".
func (s *SWAPI) cast_repeated_Swapi_Starship_Starship__to__repeated_Swapi_Starship(from []*starshippb.Starship) ([]*Starship, error) {
	ret := make([]*Starship, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_Swapi_Starship_Starship__to__Swapi_Starship(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_repeated_Swapi_Vehicle_Vehicle__to__repeated_Swapi_Vehicle cast from "repeated swapi.vehicle.Vehicle" to "repeated swapi.Vehicle".
func (s *SWAPI) cast_repeated_Swapi_Vehicle_Vehicle__to__repeated_Swapi_Vehicle(from []*vehiclepb.Vehicle) ([]*Vehicle, error) {
	ret := make([]*Vehicle, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_Swapi_Vehicle_Vehicle__to__Swapi_Vehicle(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

func (s *SWAPI) logvalue_Google_Type_Date(v *date.Date) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("year", int64(v.GetYear())),
		slog.Int64("month", int64(v.GetMonth())),
		slog.Int64("day", int64(v.GetDay())),
	)
}

func (s *SWAPI) logvalue_Swapi_Film(v *Film) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.GetId()),
		slog.String("title", v.GetTitle()),
		slog.Int64("episode_id", int64(v.GetEpisodeId())),
		slog.String("opening_crawl", v.GetOpeningCrawl()),
		slog.String("director", v.GetDirector()),
		slog.String("producer", v.GetProducer()),
		slog.Any("release_date", s.logvalue_Google_Type_Date(v.GetReleaseDate())),
		slog.String("url", v.GetUrl()),
		slog.String("created", v.GetCreated()),
		slog.String("edited", v.GetEdited()),
		slog.Any("species_ids", v.GetSpeciesIds()),
		slog.Any("starship_ids", v.GetStarshipIds()),
		slog.Any("vehicle_ids", v.GetVehicleIds()),
		slog.Any("character_ids", v.GetCharacterIds()),
		slog.Any("planet_ids", v.GetPlanetIds()),
	)
}

func (s *SWAPI) logvalue_Swapi_Film_GetFilmRequest(v *filmpb.GetFilmRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.GetId()),
	)
}

func (s *SWAPI) logvalue_Swapi_Film_ListFilmsRequest(v *filmpb.ListFilmsRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.GetIds()),
	)
}

func (s *SWAPI) logvalue_Swapi_Films(v *Films) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("films", s.logvalue_repeated_Swapi_Film(v.GetFilms())),
	)
}

func (s *SWAPI) logvalue_Swapi_FilmsArgument(v *Swapi_FilmsArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.Ids),
	)
}

func (s *SWAPI) logvalue_Swapi_GetFilmReply(v *GetFilmReply) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("film", s.logvalue_Swapi_Film(v.GetFilm())),
		slog.Any("species", s.logvalue_repeated_Swapi_Species(v.GetSpecies())),
		slog.Any("starships", s.logvalue_repeated_Swapi_Starship(v.GetStarships())),
		slog.Any("vehicles", s.logvalue_repeated_Swapi_Vehicle(v.GetVehicles())),
		slog.Any("characters", s.logvalue_repeated_Swapi_Person(v.GetCharacters())),
		slog.Any("planets", s.logvalue_repeated_Swapi_Planet(v.GetPlanets())),
	)
}

func (s *SWAPI) logvalue_Swapi_GetFilmReplyArgument(v *Swapi_GetFilmReplyArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.Id),
	)
}

func (s *SWAPI) logvalue_Swapi_GetPersonReply(v *GetPersonReply) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("person", s.logvalue_Swapi_Person(v.GetPerson())),
		slog.Any("films", s.logvalue_repeated_Swapi_Film(v.GetFilms())),
		slog.Any("species", s.logvalue_repeated_Swapi_Species(v.GetSpecies())),
		slog.Any("starships", s.logvalue_repeated_Swapi_Starship(v.GetStarships())),
		slog.Any("vehicles", s.logvalue_repeated_Swapi_Vehicle(v.GetVehicles())),
	)
}

func (s *SWAPI) logvalue_Swapi_GetPersonReplyArgument(v *Swapi_GetPersonReplyArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.Id),
	)
}

func (s *SWAPI) logvalue_Swapi_GetPlanetReply(v *GetPlanetReply) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("planet", s.logvalue_Swapi_Planet(v.GetPlanet())),
		slog.Any("residents", s.logvalue_repeated_Swapi_Person(v.GetResidents())),
		slog.Any("films", s.logvalue_repeated_Swapi_Film(v.GetFilms())),
	)
}

func (s *SWAPI) logvalue_Swapi_GetPlanetReplyArgument(v *Swapi_GetPlanetReplyArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.Id),
	)
}

func (s *SWAPI) logvalue_Swapi_GetSpeciesReply(v *GetSpeciesReply) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("species", s.logvalue_Swapi_Species(v.GetSpecies())),
		slog.Any("people", s.logvalue_repeated_Swapi_Person(v.GetPeople())),
		slog.Any("films", s.logvalue_repeated_Swapi_Film(v.GetFilms())),
	)
}

func (s *SWAPI) logvalue_Swapi_GetSpeciesReplyArgument(v *Swapi_GetSpeciesReplyArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.Id),
	)
}

func (s *SWAPI) logvalue_Swapi_GetStarshipReply(v *GetStarshipReply) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("starship", s.logvalue_Swapi_Starship(v.GetStarship())),
		slog.Any("films", s.logvalue_repeated_Swapi_Film(v.GetFilms())),
		slog.Any("pilots", s.logvalue_repeated_Swapi_Person(v.GetPilots())),
	)
}

func (s *SWAPI) logvalue_Swapi_GetStarshipReplyArgument(v *Swapi_GetStarshipReplyArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.Id),
	)
}

func (s *SWAPI) logvalue_Swapi_GetVehicleReply(v *GetVehicleReply) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("vehicle", s.logvalue_Swapi_Vehicle(v.GetVehicle())),
		slog.Any("films", s.logvalue_repeated_Swapi_Film(v.GetFilms())),
		slog.Any("pilots", s.logvalue_repeated_Swapi_Person(v.GetPilots())),
	)
}

func (s *SWAPI) logvalue_Swapi_GetVehicleReplyArgument(v *Swapi_GetVehicleReplyArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.Id),
	)
}

func (s *SWAPI) logvalue_Swapi_ListFilmsReply(v *ListFilmsReply) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("films", s.logvalue_repeated_Swapi_Film(v.GetFilms())),
	)
}

func (s *SWAPI) logvalue_Swapi_ListFilmsReplyArgument(v *Swapi_ListFilmsReplyArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.Ids),
	)
}

func (s *SWAPI) logvalue_Swapi_ListPeopleReply(v *ListPeopleReply) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("people", s.logvalue_repeated_Swapi_Person(v.GetPeople())),
	)
}

func (s *SWAPI) logvalue_Swapi_ListPeopleReplyArgument(v *Swapi_ListPeopleReplyArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.Ids),
	)
}

func (s *SWAPI) logvalue_Swapi_ListPlanetsReply(v *ListPlanetsReply) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("planets", s.logvalue_repeated_Swapi_Planet(v.GetPlanets())),
	)
}

func (s *SWAPI) logvalue_Swapi_ListPlanetsReplyArgument(v *Swapi_ListPlanetsReplyArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.Ids),
	)
}

func (s *SWAPI) logvalue_Swapi_ListSpeciesReply(v *ListSpeciesReply) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("species", s.logvalue_repeated_Swapi_Species(v.GetSpecies())),
	)
}

func (s *SWAPI) logvalue_Swapi_ListSpeciesReplyArgument(v *Swapi_ListSpeciesReplyArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.Ids),
	)
}

func (s *SWAPI) logvalue_Swapi_ListStarshipsReply(v *ListStarshipsReply) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("starships", s.logvalue_repeated_Swapi_Starship(v.GetStarships())),
	)
}

func (s *SWAPI) logvalue_Swapi_ListStarshipsReplyArgument(v *Swapi_ListStarshipsReplyArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.Ids),
	)
}

func (s *SWAPI) logvalue_Swapi_ListVehiclesReply(v *ListVehiclesReply) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("vehicles", s.logvalue_repeated_Swapi_Vehicle(v.GetVehicles())),
	)
}

func (s *SWAPI) logvalue_Swapi_ListVehiclesReplyArgument(v *Swapi_ListVehiclesReplyArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.Ids),
	)
}

func (s *SWAPI) logvalue_Swapi_People(v *People) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("people", s.logvalue_repeated_Swapi_Person(v.GetPeople())),
	)
}

func (s *SWAPI) logvalue_Swapi_PeopleArgument(v *Swapi_PeopleArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.Ids),
	)
}

func (s *SWAPI) logvalue_Swapi_Person(v *Person) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.GetId()),
		slog.String("name", v.GetName()),
		slog.String("birth_year", v.GetBirthYear()),
		slog.String("eye_color", v.GetEyeColor()),
		slog.String("gender", v.GetGender()),
		slog.String("hair_color", v.GetHairColor()),
		slog.String("height", v.GetHeight()),
		slog.String("mass", v.GetMass()),
		slog.String("skin_color", v.GetSkinColor()),
		slog.String("homeworld", v.GetHomeworld()),
		slog.String("url", v.GetUrl()),
		slog.String("created", v.GetCreated()),
		slog.String("edited", v.GetEdited()),
		slog.Any("film_ids", v.GetFilmIds()),
		slog.Any("species_ids", v.GetSpeciesIds()),
		slog.Any("starship_ids", v.GetStarshipIds()),
		slog.Any("vehicle_ids", v.GetVehicleIds()),
	)
}

func (s *SWAPI) logvalue_Swapi_Person_GetPersonRequest(v *personpb.GetPersonRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.GetId()),
	)
}

func (s *SWAPI) logvalue_Swapi_Person_ListPeopleRequest(v *personpb.ListPeopleRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.GetIds()),
	)
}

func (s *SWAPI) logvalue_Swapi_Planet(v *Planet) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.GetId()),
		slog.String("name", v.GetName()),
		slog.String("diameter", v.GetDiameter()),
		slog.String("rotation_period", v.GetRotationPeriod()),
		slog.String("orbital_period", v.GetOrbitalPeriod()),
		slog.String("gravity", v.GetGravity()),
		slog.String("population", v.GetPopulation()),
		slog.String("climate", v.GetClimate()),
		slog.String("terrain", v.GetTerrain()),
		slog.String("surface_water", v.GetSurfaceWater()),
		slog.String("url", v.GetUrl()),
		slog.String("created", v.GetCreated()),
		slog.String("edited", v.GetEdited()),
		slog.Any("resident_ids", v.GetResidentIds()),
		slog.Any("film_ids", v.GetFilmIds()),
	)
}

func (s *SWAPI) logvalue_Swapi_Planet_GetPlanetRequest(v *planetpb.GetPlanetRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.GetId()),
	)
}

func (s *SWAPI) logvalue_Swapi_Planet_ListPlanetsRequest(v *planetpb.ListPlanetsRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.GetIds()),
	)
}

func (s *SWAPI) logvalue_Swapi_Planets(v *Planets) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("planets", s.logvalue_repeated_Swapi_Planet(v.GetPlanets())),
	)
}

func (s *SWAPI) logvalue_Swapi_PlanetsArgument(v *Swapi_PlanetsArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.Ids),
	)
}

func (s *SWAPI) logvalue_Swapi_Species(v *Species) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.GetId()),
		slog.String("name", v.GetName()),
		slog.String("classification", v.GetClassification()),
		slog.String("designation", v.GetDesignation()),
		slog.String("average_height", v.GetAverageHeight()),
		slog.String("average_lifespan", v.GetAverageLifespan()),
		slog.String("eye_colors", v.GetEyeColors()),
		slog.String("hair_colors", v.GetHairColors()),
		slog.String("skin_colors", v.GetSkinColors()),
		slog.String("language", v.GetLanguage()),
		slog.String("homeworld", v.GetHomeworld()),
		slog.String("url", v.GetUrl()),
		slog.String("created", v.GetCreated()),
		slog.String("edited", v.GetEdited()),
		slog.Any("person_ids", v.GetPersonIds()),
		slog.Any("film_ids", v.GetFilmIds()),
	)
}

func (s *SWAPI) logvalue_Swapi_SpeciesList(v *SpeciesList) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("species", s.logvalue_repeated_Swapi_Species(v.GetSpecies())),
	)
}

func (s *SWAPI) logvalue_Swapi_SpeciesListArgument(v *Swapi_SpeciesListArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.Ids),
	)
}

func (s *SWAPI) logvalue_Swapi_Species_GetSpeciesRequest(v *speciespb.GetSpeciesRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.GetId()),
	)
}

func (s *SWAPI) logvalue_Swapi_Species_ListSpeciesRequest(v *speciespb.ListSpeciesRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.GetIds()),
	)
}

func (s *SWAPI) logvalue_Swapi_Starship(v *Starship) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.GetId()),
		slog.String("name", v.GetName()),
		slog.String("model", v.GetModel()),
		slog.String("starship_class", v.GetStarshipClass()),
		slog.String("manufacturer", v.GetManufacturer()),
		slog.String("cost_in_credits", v.GetCostInCredits()),
		slog.String("length", v.GetLength()),
		slog.String("crew", v.GetCrew()),
		slog.String("passengers", v.GetPassengers()),
		slog.String("max_atmosphering_speed", v.GetMaxAtmospheringSpeed()),
		slog.String("hyperdrive_rating", v.GetHyperdriveRating()),
		slog.String("mglt", v.GetMglt()),
		slog.String("cargo_capacity", v.GetCargoCapacity()),
		slog.String("consumables", v.GetConsumables()),
		slog.String("url", v.GetUrl()),
		slog.String("created", v.GetCreated()),
		slog.String("edited", v.GetEdited()),
		slog.Any("film_ids", v.GetFilmIds()),
		slog.Any("pilot_ids", v.GetPilotIds()),
	)
}

func (s *SWAPI) logvalue_Swapi_Starship_GetStarshipRequest(v *starshippb.GetStarshipRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.GetId()),
	)
}

func (s *SWAPI) logvalue_Swapi_Starship_ListStarshipsRequest(v *starshippb.ListStarshipsRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.GetIds()),
	)
}

func (s *SWAPI) logvalue_Swapi_Starships(v *Starships) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("starships", s.logvalue_repeated_Swapi_Starship(v.GetStarships())),
	)
}

func (s *SWAPI) logvalue_Swapi_StarshipsArgument(v *Swapi_StarshipsArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.Ids),
	)
}

func (s *SWAPI) logvalue_Swapi_Vehicle(v *Vehicle) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.GetId()),
		slog.String("name", v.GetName()),
		slog.String("model", v.GetModel()),
		slog.String("vehicle_class", v.GetVehicleClass()),
		slog.String("manufacturer", v.GetManufacturer()),
		slog.String("length", v.GetLength()),
		slog.String("cost_in_credits", v.GetCostInCredits()),
		slog.String("crew", v.GetCrew()),
		slog.String("passengers", v.GetPassengers()),
		slog.String("max_atmosphering_speed", v.GetMaxAtmospheringSpeed()),
		slog.String("cargo_capacity", v.GetCargoCapacity()),
		slog.String("consumables", v.GetConsumables()),
		slog.String("url", v.GetUrl()),
		slog.String("created", v.GetCreated()),
		slog.String("edited", v.GetEdited()),
		slog.Any("film_ids", v.GetFilmIds()),
		slog.Any("pilot_ids", v.GetPilotIds()),
	)
}

func (s *SWAPI) logvalue_Swapi_Vehicle_GetVehicleRequest(v *vehiclepb.GetVehicleRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("id", v.GetId()),
	)
}

func (s *SWAPI) logvalue_Swapi_Vehicle_ListVehiclesRequest(v *vehiclepb.ListVehiclesRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.GetIds()),
	)
}

func (s *SWAPI) logvalue_Swapi_Vehicles(v *Vehicles) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("vehicles", s.logvalue_repeated_Swapi_Vehicle(v.GetVehicles())),
	)
}

func (s *SWAPI) logvalue_Swapi_VehiclesArgument(v *Swapi_VehiclesArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.Ids),
	)
}

func (s *SWAPI) logvalue_repeated_Swapi_Film(v []*Film) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(idx),
			Value: s.logvalue_Swapi_Film(vv),
		})
	}
	return slog.GroupValue(attrs...)
}

func (s *SWAPI) logvalue_repeated_Swapi_Person(v []*Person) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(idx),
			Value: s.logvalue_Swapi_Person(vv),
		})
	}
	return slog.GroupValue(attrs...)
}

func (s *SWAPI) logvalue_repeated_Swapi_Planet(v []*Planet) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(idx),
			Value: s.logvalue_Swapi_Planet(vv),
		})
	}
	return slog.GroupValue(attrs...)
}

func (s *SWAPI) logvalue_repeated_Swapi_Species(v []*Species) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(idx),
			Value: s.logvalue_Swapi_Species(vv),
		})
	}
	return slog.GroupValue(attrs...)
}

func (s *SWAPI) logvalue_repeated_Swapi_Starship(v []*Starship) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(idx),
			Value: s.logvalue_Swapi_Starship(vv),
		})
	}
	return slog.GroupValue(attrs...)
}

func (s *SWAPI) logvalue_repeated_Swapi_Vehicle(v []*Vehicle) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(idx),
			Value: s.logvalue_Swapi_Vehicle(vv),
		})
	}
	return slog.GroupValue(attrs...)
}
