// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: swapi.proto

package swapipb

import (
	_ "github.com/mercari/grpc-federation/demo/swapi/film"
	_ "github.com/mercari/grpc-federation/demo/swapi/person"
	_ "github.com/mercari/grpc-federation/demo/swapi/planet"
	_ "github.com/mercari/grpc-federation/demo/swapi/species"
	_ "github.com/mercari/grpc-federation/demo/swapi/starship"
	_ "github.com/mercari/grpc-federation/demo/swapi/vehicle"
	_ "github.com/mercari/grpc-federation/grpc/federation"
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetPersonRequest.
type GetPersonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The persion id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPersonRequest) Reset() {
	*x = GetPersonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPersonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersonRequest) ProtoMessage() {}

func (x *GetPersonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersonRequest.ProtoReflect.Descriptor instead.
func (*GetPersonRequest) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{0}
}

func (x *GetPersonRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// GetPersonReply.
type GetPersonReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Person *Person `protobuf:"bytes,1,opt,name=person,proto3" json:"person,omitempty"`
	// films.
	Films []*Film `protobuf:"bytes,2,rep,name=films,proto3" json:"films,omitempty"`
	// species.
	Species []*Species `protobuf:"bytes,3,rep,name=species,proto3" json:"species,omitempty"`
	// starships.
	Starships []*Starship `protobuf:"bytes,4,rep,name=starships,proto3" json:"starships,omitempty"`
	// vehicles.
	Vehicles []*Vehicle `protobuf:"bytes,5,rep,name=vehicles,proto3" json:"vehicles,omitempty"`
}

func (x *GetPersonReply) Reset() {
	*x = GetPersonReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPersonReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPersonReply) ProtoMessage() {}

func (x *GetPersonReply) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPersonReply.ProtoReflect.Descriptor instead.
func (*GetPersonReply) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{1}
}

func (x *GetPersonReply) GetPerson() *Person {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *GetPersonReply) GetFilms() []*Film {
	if x != nil {
		return x.Films
	}
	return nil
}

func (x *GetPersonReply) GetSpecies() []*Species {
	if x != nil {
		return x.Species
	}
	return nil
}

func (x *GetPersonReply) GetStarships() []*Starship {
	if x != nil {
		return x.Starships
	}
	return nil
}

func (x *GetPersonReply) GetVehicles() []*Vehicle {
	if x != nil {
		return x.Vehicles
	}
	return nil
}

// ListPeopleRequest.
type ListPeopleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListPeopleRequest) Reset() {
	*x = ListPeopleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPeopleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPeopleRequest) ProtoMessage() {}

func (x *ListPeopleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPeopleRequest.ProtoReflect.Descriptor instead.
func (*ListPeopleRequest) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{2}
}

func (x *ListPeopleRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// ListPeopleReply.
type ListPeopleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	People []*Person `protobuf:"bytes,1,rep,name=people,proto3" json:"people,omitempty"`
}

func (x *ListPeopleReply) Reset() {
	*x = ListPeopleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPeopleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPeopleReply) ProtoMessage() {}

func (x *ListPeopleReply) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPeopleReply.ProtoReflect.Descriptor instead.
func (*ListPeopleReply) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{3}
}

func (x *ListPeopleReply) GetPeople() []*Person {
	if x != nil {
		return x.People
	}
	return nil
}

// GetFilmRequest.
type GetFilmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The film id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetFilmRequest) Reset() {
	*x = GetFilmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilmRequest) ProtoMessage() {}

func (x *GetFilmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilmRequest.ProtoReflect.Descriptor instead.
func (*GetFilmRequest) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{4}
}

func (x *GetFilmRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// GetFilmReply.
type GetFilmReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Film *Film `protobuf:"bytes,1,opt,name=film,proto3" json:"film,omitempty"`
	// species.
	Species []*Species `protobuf:"bytes,2,rep,name=species,proto3" json:"species,omitempty"`
	// starships.
	Starships []*Starship `protobuf:"bytes,3,rep,name=starships,proto3" json:"starships,omitempty"`
	// vehicles.
	Vehicles []*Vehicle `protobuf:"bytes,4,rep,name=vehicles,proto3" json:"vehicles,omitempty"`
	// characters.
	Characters []*Person `protobuf:"bytes,5,rep,name=characters,proto3" json:"characters,omitempty"`
	// planets.
	Planets []*Planet `protobuf:"bytes,6,rep,name=planets,proto3" json:"planets,omitempty"`
}

func (x *GetFilmReply) Reset() {
	*x = GetFilmReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilmReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilmReply) ProtoMessage() {}

func (x *GetFilmReply) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilmReply.ProtoReflect.Descriptor instead.
func (*GetFilmReply) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{5}
}

func (x *GetFilmReply) GetFilm() *Film {
	if x != nil {
		return x.Film
	}
	return nil
}

func (x *GetFilmReply) GetSpecies() []*Species {
	if x != nil {
		return x.Species
	}
	return nil
}

func (x *GetFilmReply) GetStarships() []*Starship {
	if x != nil {
		return x.Starships
	}
	return nil
}

func (x *GetFilmReply) GetVehicles() []*Vehicle {
	if x != nil {
		return x.Vehicles
	}
	return nil
}

func (x *GetFilmReply) GetCharacters() []*Person {
	if x != nil {
		return x.Characters
	}
	return nil
}

func (x *GetFilmReply) GetPlanets() []*Planet {
	if x != nil {
		return x.Planets
	}
	return nil
}

// ListFilmsRequest.
type ListFilmsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListFilmsRequest) Reset() {
	*x = ListFilmsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilmsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilmsRequest) ProtoMessage() {}

func (x *ListFilmsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilmsRequest.ProtoReflect.Descriptor instead.
func (*ListFilmsRequest) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{6}
}

func (x *ListFilmsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// ListFilmsReply.
type ListFilmsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Films []*Film `protobuf:"bytes,1,rep,name=films,proto3" json:"films,omitempty"`
}

func (x *ListFilmsReply) Reset() {
	*x = ListFilmsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilmsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilmsReply) ProtoMessage() {}

func (x *ListFilmsReply) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilmsReply.ProtoReflect.Descriptor instead.
func (*ListFilmsReply) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{7}
}

func (x *ListFilmsReply) GetFilms() []*Film {
	if x != nil {
		return x.Films
	}
	return nil
}

// GetVehicleRequest.
type GetVehicleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vehicle id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetVehicleRequest) Reset() {
	*x = GetVehicleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVehicleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVehicleRequest) ProtoMessage() {}

func (x *GetVehicleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVehicleRequest.ProtoReflect.Descriptor instead.
func (*GetVehicleRequest) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{8}
}

func (x *GetVehicleRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// GetVehicleReply.
type GetVehicleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vehicle *Vehicle `protobuf:"bytes,1,opt,name=vehicle,proto3" json:"vehicle,omitempty"`
	// films.
	Films []*Film `protobuf:"bytes,2,rep,name=films,proto3" json:"films,omitempty"`
	// pilots.
	Pilots []*Person `protobuf:"bytes,3,rep,name=pilots,proto3" json:"pilots,omitempty"`
}

func (x *GetVehicleReply) Reset() {
	*x = GetVehicleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVehicleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVehicleReply) ProtoMessage() {}

func (x *GetVehicleReply) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVehicleReply.ProtoReflect.Descriptor instead.
func (*GetVehicleReply) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{9}
}

func (x *GetVehicleReply) GetVehicle() *Vehicle {
	if x != nil {
		return x.Vehicle
	}
	return nil
}

func (x *GetVehicleReply) GetFilms() []*Film {
	if x != nil {
		return x.Films
	}
	return nil
}

func (x *GetVehicleReply) GetPilots() []*Person {
	if x != nil {
		return x.Pilots
	}
	return nil
}

// ListVehiclesRequest.
type ListVehiclesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListVehiclesRequest) Reset() {
	*x = ListVehiclesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVehiclesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVehiclesRequest) ProtoMessage() {}

func (x *ListVehiclesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVehiclesRequest.ProtoReflect.Descriptor instead.
func (*ListVehiclesRequest) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{10}
}

func (x *ListVehiclesRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// ListVehiclesReply.
type ListVehiclesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vehicles []*Vehicle `protobuf:"bytes,1,rep,name=vehicles,proto3" json:"vehicles,omitempty"`
}

func (x *ListVehiclesReply) Reset() {
	*x = ListVehiclesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVehiclesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVehiclesReply) ProtoMessage() {}

func (x *ListVehiclesReply) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVehiclesReply.ProtoReflect.Descriptor instead.
func (*ListVehiclesReply) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{11}
}

func (x *ListVehiclesReply) GetVehicles() []*Vehicle {
	if x != nil {
		return x.Vehicles
	}
	return nil
}

// GetSpeciesRequest.
type GetSpeciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// species id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSpeciesRequest) Reset() {
	*x = GetSpeciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpeciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpeciesRequest) ProtoMessage() {}

func (x *GetSpeciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpeciesRequest.ProtoReflect.Descriptor instead.
func (*GetSpeciesRequest) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{12}
}

func (x *GetSpeciesRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// GetSpeciesReply.
type GetSpeciesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Species *Species `protobuf:"bytes,1,opt,name=species,proto3" json:"species,omitempty"`
	// people.
	People []*Person `protobuf:"bytes,2,rep,name=people,proto3" json:"people,omitempty"`
	// films.
	Films []*Film `protobuf:"bytes,3,rep,name=films,proto3" json:"films,omitempty"`
}

func (x *GetSpeciesReply) Reset() {
	*x = GetSpeciesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSpeciesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSpeciesReply) ProtoMessage() {}

func (x *GetSpeciesReply) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSpeciesReply.ProtoReflect.Descriptor instead.
func (*GetSpeciesReply) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{13}
}

func (x *GetSpeciesReply) GetSpecies() *Species {
	if x != nil {
		return x.Species
	}
	return nil
}

func (x *GetSpeciesReply) GetPeople() []*Person {
	if x != nil {
		return x.People
	}
	return nil
}

func (x *GetSpeciesReply) GetFilms() []*Film {
	if x != nil {
		return x.Films
	}
	return nil
}

// ListSpeciesRequest.
type ListSpeciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListSpeciesRequest) Reset() {
	*x = ListSpeciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSpeciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSpeciesRequest) ProtoMessage() {}

func (x *ListSpeciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSpeciesRequest.ProtoReflect.Descriptor instead.
func (*ListSpeciesRequest) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{14}
}

func (x *ListSpeciesRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// ListSpeciesReply.
type ListSpeciesReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Species []*Species `protobuf:"bytes,1,rep,name=species,proto3" json:"species,omitempty"`
}

func (x *ListSpeciesReply) Reset() {
	*x = ListSpeciesReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSpeciesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSpeciesReply) ProtoMessage() {}

func (x *ListSpeciesReply) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSpeciesReply.ProtoReflect.Descriptor instead.
func (*ListSpeciesReply) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{15}
}

func (x *ListSpeciesReply) GetSpecies() []*Species {
	if x != nil {
		return x.Species
	}
	return nil
}

// GetStarshipRequest.
type GetStarshipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// starship id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetStarshipRequest) Reset() {
	*x = GetStarshipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStarshipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStarshipRequest) ProtoMessage() {}

func (x *GetStarshipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStarshipRequest.ProtoReflect.Descriptor instead.
func (*GetStarshipRequest) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{16}
}

func (x *GetStarshipRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// GetStarshipReply.
type GetStarshipReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Starship *Starship `protobuf:"bytes,1,opt,name=starship,proto3" json:"starship,omitempty"`
	// films.
	Films []*Film `protobuf:"bytes,2,rep,name=films,proto3" json:"films,omitempty"`
	// pilots.
	Pilots []*Person `protobuf:"bytes,3,rep,name=pilots,proto3" json:"pilots,omitempty"`
}

func (x *GetStarshipReply) Reset() {
	*x = GetStarshipReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStarshipReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStarshipReply) ProtoMessage() {}

func (x *GetStarshipReply) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStarshipReply.ProtoReflect.Descriptor instead.
func (*GetStarshipReply) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{17}
}

func (x *GetStarshipReply) GetStarship() *Starship {
	if x != nil {
		return x.Starship
	}
	return nil
}

func (x *GetStarshipReply) GetFilms() []*Film {
	if x != nil {
		return x.Films
	}
	return nil
}

func (x *GetStarshipReply) GetPilots() []*Person {
	if x != nil {
		return x.Pilots
	}
	return nil
}

// ListStarshipsRequest.
type ListStarshipsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListStarshipsRequest) Reset() {
	*x = ListStarshipsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStarshipsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStarshipsRequest) ProtoMessage() {}

func (x *ListStarshipsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStarshipsRequest.ProtoReflect.Descriptor instead.
func (*ListStarshipsRequest) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{18}
}

func (x *ListStarshipsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// ListStarshipsReply.
type ListStarshipsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Starships []*Starship `protobuf:"bytes,1,rep,name=starships,proto3" json:"starships,omitempty"`
}

func (x *ListStarshipsReply) Reset() {
	*x = ListStarshipsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStarshipsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStarshipsReply) ProtoMessage() {}

func (x *ListStarshipsReply) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStarshipsReply.ProtoReflect.Descriptor instead.
func (*ListStarshipsReply) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{19}
}

func (x *ListStarshipsReply) GetStarships() []*Starship {
	if x != nil {
		return x.Starships
	}
	return nil
}

// GetPlanetRequest.
type GetPlanetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// planet id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPlanetRequest) Reset() {
	*x = GetPlanetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanetRequest) ProtoMessage() {}

func (x *GetPlanetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanetRequest.ProtoReflect.Descriptor instead.
func (*GetPlanetRequest) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{20}
}

func (x *GetPlanetRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// GetPlanetReply.
type GetPlanetReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Planet *Planet `protobuf:"bytes,1,opt,name=planet,proto3" json:"planet,omitempty"`
	// the people that live on this planet.
	Residents []*Person `protobuf:"bytes,2,rep,name=residents,proto3" json:"residents,omitempty"`
	// films.
	Films []*Film `protobuf:"bytes,3,rep,name=films,proto3" json:"films,omitempty"`
}

func (x *GetPlanetReply) Reset() {
	*x = GetPlanetReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanetReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanetReply) ProtoMessage() {}

func (x *GetPlanetReply) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanetReply.ProtoReflect.Descriptor instead.
func (*GetPlanetReply) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{21}
}

func (x *GetPlanetReply) GetPlanet() *Planet {
	if x != nil {
		return x.Planet
	}
	return nil
}

func (x *GetPlanetReply) GetResidents() []*Person {
	if x != nil {
		return x.Residents
	}
	return nil
}

func (x *GetPlanetReply) GetFilms() []*Film {
	if x != nil {
		return x.Films
	}
	return nil
}

// ListPlanetsRequest.
type ListPlanetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ListPlanetsRequest) Reset() {
	*x = ListPlanetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlanetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanetsRequest) ProtoMessage() {}

func (x *ListPlanetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanetsRequest.ProtoReflect.Descriptor instead.
func (*ListPlanetsRequest) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{22}
}

func (x *ListPlanetsRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// ListPlanetsReply.
type ListPlanetsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Planets []*Planet `protobuf:"bytes,1,rep,name=planets,proto3" json:"planets,omitempty"`
}

func (x *ListPlanetsReply) Reset() {
	*x = ListPlanetsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPlanetsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanetsReply) ProtoMessage() {}

func (x *ListPlanetsReply) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanetsReply.ProtoReflect.Descriptor instead.
func (*ListPlanetsReply) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{23}
}

func (x *ListPlanetsReply) GetPlanets() []*Planet {
	if x != nil {
		return x.Planets
	}
	return nil
}

// Person is an individual person or character within the Star Wars universe.
type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// person id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of this person.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The birth year of the person,
	// using the in-universe standard of BBY or ABY
	// - Before the Battle of Yavin or After the Battle of Yavin.
	// The Battle of Yavin is a battle that occurs at the end of Star Wars episode IV: A New Hope.
	BirthYear string `protobuf:"bytes,3,opt,name=birth_year,json=birthYear,proto3" json:"birth_year,omitempty"`
	// The eye color of this person.
	// Will be "unknown" if not known or "n/a" if the person does not have an eye.
	EyeColor string `protobuf:"bytes,4,opt,name=eye_color,json=eyeColor,proto3" json:"eye_color,omitempty"`
	// The gender of this person.
	// Either "Male", "Female" or "unknown", "n/a" if the person does not have a gender.
	Gender string `protobuf:"bytes,5,opt,name=gender,proto3" json:"gender,omitempty"`
	// The hair color of this person.
	// Will be "unknown" if not known or "n/a" if the person does not have hair.
	HairColor string `protobuf:"bytes,6,opt,name=hair_color,json=hairColor,proto3" json:"hair_color,omitempty"`
	// The height of the person in centimeters.
	Height string `protobuf:"bytes,7,opt,name=height,proto3" json:"height,omitempty"`
	// The mass of the person in kilograms.
	Mass string `protobuf:"bytes,8,opt,name=mass,proto3" json:"mass,omitempty"`
	// The skin color of this person.
	SkinColor string `protobuf:"bytes,9,opt,name=skin_color,json=skinColor,proto3" json:"skin_color,omitempty"`
	// The URL of a planet resource, a planet that this person was born on or inhabits.
	Homeworld string `protobuf:"bytes,10,opt,name=homeworld,proto3" json:"homeworld,omitempty"`
	// the hypermedia URL of this resource.
	Url string `protobuf:"bytes,11,opt,name=url,proto3" json:"url,omitempty"`
	// the ISO 8601 date format of the time that this resource was created.
	Created string `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	// the ISO 8601 date format of the time that this resource was edited.
	Edited string `protobuf:"bytes,13,opt,name=edited,proto3" json:"edited,omitempty"`
	// film ids.
	FilmIds []int64 `protobuf:"varint,14,rep,packed,name=film_ids,json=filmIds,proto3" json:"film_ids,omitempty"`
	// species ids.
	SpeciesIds []int64 `protobuf:"varint,15,rep,packed,name=species_ids,json=speciesIds,proto3" json:"species_ids,omitempty"`
	// starship ids.
	StarshipIds []int64 `protobuf:"varint,16,rep,packed,name=starship_ids,json=starshipIds,proto3" json:"starship_ids,omitempty"`
	// vehicle ids.
	VehicleIds []int64 `protobuf:"varint,17,rep,packed,name=vehicle_ids,json=vehicleIds,proto3" json:"vehicle_ids,omitempty"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{24}
}

func (x *Person) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Person) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Person) GetBirthYear() string {
	if x != nil {
		return x.BirthYear
	}
	return ""
}

func (x *Person) GetEyeColor() string {
	if x != nil {
		return x.EyeColor
	}
	return ""
}

func (x *Person) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Person) GetHairColor() string {
	if x != nil {
		return x.HairColor
	}
	return ""
}

func (x *Person) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *Person) GetMass() string {
	if x != nil {
		return x.Mass
	}
	return ""
}

func (x *Person) GetSkinColor() string {
	if x != nil {
		return x.SkinColor
	}
	return ""
}

func (x *Person) GetHomeworld() string {
	if x != nil {
		return x.Homeworld
	}
	return ""
}

func (x *Person) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Person) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Person) GetEdited() string {
	if x != nil {
		return x.Edited
	}
	return ""
}

func (x *Person) GetFilmIds() []int64 {
	if x != nil {
		return x.FilmIds
	}
	return nil
}

func (x *Person) GetSpeciesIds() []int64 {
	if x != nil {
		return x.SpeciesIds
	}
	return nil
}

func (x *Person) GetStarshipIds() []int64 {
	if x != nil {
		return x.StarshipIds
	}
	return nil
}

func (x *Person) GetVehicleIds() []int64 {
	if x != nil {
		return x.VehicleIds
	}
	return nil
}

type People struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	People []*Person `protobuf:"bytes,1,rep,name=people,proto3" json:"people,omitempty"`
}

func (x *People) Reset() {
	*x = People{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *People) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*People) ProtoMessage() {}

func (x *People) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use People.ProtoReflect.Descriptor instead.
func (*People) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{25}
}

func (x *People) GetPeople() []*Person {
	if x != nil {
		return x.People
	}
	return nil
}

// Film is a single film.
type Film struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// film id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The title of this film.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// The episode number of this film.
	EpisodeId int32 `protobuf:"varint,3,opt,name=episode_id,json=episodeId,proto3" json:"episode_id,omitempty"`
	// The opening paragraphs at the beginning of this film.
	OpeningCrawl string `protobuf:"bytes,4,opt,name=opening_crawl,json=openingCrawl,proto3" json:"opening_crawl,omitempty"`
	// The name of the director of this film.
	Director string `protobuf:"bytes,5,opt,name=director,proto3" json:"director,omitempty"`
	// The name(s) of the producer(s) of this film. Comma separated.
	Producer string `protobuf:"bytes,6,opt,name=producer,proto3" json:"producer,omitempty"`
	// The ISO 8601 date format of film release at original creator country.
	ReleaseDate *date.Date `protobuf:"bytes,7,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	// the hypermedia URL of this resource.
	Url string `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	// the ISO 8601 date format of the time that this resource was created.
	Created string `protobuf:"bytes,9,opt,name=created,proto3" json:"created,omitempty"`
	// the ISO 8601 date format of the time that this resource was edited.
	Edited string `protobuf:"bytes,10,opt,name=edited,proto3" json:"edited,omitempty"`
	// species ids.
	SpeciesIds []int64 `protobuf:"varint,11,rep,packed,name=species_ids,json=speciesIds,proto3" json:"species_ids,omitempty"`
	// starship ids.
	StarshipIds []int64 `protobuf:"varint,12,rep,packed,name=starship_ids,json=starshipIds,proto3" json:"starship_ids,omitempty"`
	// vehicle ids.
	VehicleIds []int64 `protobuf:"varint,13,rep,packed,name=vehicle_ids,json=vehicleIds,proto3" json:"vehicle_ids,omitempty"`
	// character ids.
	CharacterIds []int64 `protobuf:"varint,14,rep,packed,name=character_ids,json=characterIds,proto3" json:"character_ids,omitempty"`
	// planet ids.
	PlanetIds []int64 `protobuf:"varint,15,rep,packed,name=planet_ids,json=planetIds,proto3" json:"planet_ids,omitempty"`
}

func (x *Film) Reset() {
	*x = Film{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Film) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Film) ProtoMessage() {}

func (x *Film) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Film.ProtoReflect.Descriptor instead.
func (*Film) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{26}
}

func (x *Film) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Film) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Film) GetEpisodeId() int32 {
	if x != nil {
		return x.EpisodeId
	}
	return 0
}

func (x *Film) GetOpeningCrawl() string {
	if x != nil {
		return x.OpeningCrawl
	}
	return ""
}

func (x *Film) GetDirector() string {
	if x != nil {
		return x.Director
	}
	return ""
}

func (x *Film) GetProducer() string {
	if x != nil {
		return x.Producer
	}
	return ""
}

func (x *Film) GetReleaseDate() *date.Date {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Film) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Film) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Film) GetEdited() string {
	if x != nil {
		return x.Edited
	}
	return ""
}

func (x *Film) GetSpeciesIds() []int64 {
	if x != nil {
		return x.SpeciesIds
	}
	return nil
}

func (x *Film) GetStarshipIds() []int64 {
	if x != nil {
		return x.StarshipIds
	}
	return nil
}

func (x *Film) GetVehicleIds() []int64 {
	if x != nil {
		return x.VehicleIds
	}
	return nil
}

func (x *Film) GetCharacterIds() []int64 {
	if x != nil {
		return x.CharacterIds
	}
	return nil
}

func (x *Film) GetPlanetIds() []int64 {
	if x != nil {
		return x.PlanetIds
	}
	return nil
}

type Films struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Films []*Film `protobuf:"bytes,1,rep,name=films,proto3" json:"films,omitempty"`
}

func (x *Films) Reset() {
	*x = Films{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Films) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Films) ProtoMessage() {}

func (x *Films) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Films.ProtoReflect.Descriptor instead.
func (*Films) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{27}
}

func (x *Films) GetFilms() []*Film {
	if x != nil {
		return x.Films
	}
	return nil
}

// Starship is a single transport craft that has hyperdrive capability.
type Starship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// starship id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of this starship. The common name, such as "Death Star".
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The model or official name of this starship.
	// Such as "T-65 X-wing" or "DS-1 Orbital Battle Station".
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// The class of this starship, such as "Starfighter" or "Deep Space Mobile Battlestation".
	StarshipClass string `protobuf:"bytes,4,opt,name=starship_class,json=starshipClass,proto3" json:"starship_class,omitempty"`
	// The manufacturer of this starship. Comma separated if more than one.
	Manufacturer string `protobuf:"bytes,5,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// The cost of this starship new, in galactic credits.
	CostInCredits string `protobuf:"bytes,6,opt,name=cost_in_credits,json=costInCredits,proto3" json:"cost_in_credits,omitempty"`
	// The length of this starship in meters.
	Length string `protobuf:"bytes,7,opt,name=length,proto3" json:"length,omitempty"`
	// The number of personnel needed to run or pilot this starship.
	Crew string `protobuf:"bytes,8,opt,name=crew,proto3" json:"crew,omitempty"`
	// The number of non-essential people this starship can transport.
	Passengers string `protobuf:"bytes,9,opt,name=passengers,proto3" json:"passengers,omitempty"`
	// The maximum speed of this starship in the atmosphere.
	// "N/A" if this starship is incapable of atmospheric flight.
	MaxAtmospheringSpeed string `protobuf:"bytes,10,opt,name=max_atmosphering_speed,json=maxAtmospheringSpeed,proto3" json:"max_atmosphering_speed,omitempty"`
	// The class of this starships hyperdrive.
	HyperdriveRating string `protobuf:"bytes,11,opt,name=hyperdrive_rating,json=hyperdriveRating,proto3" json:"hyperdrive_rating,omitempty"`
	// The Maximum number of Megalights this starship can travel in a standard hour.
	// A "Megalight" is a standard unit of distance and has never been defined before within the Star Wars universe.
	// This figure is only really useful for measuring the difference in speed of starships.
	// We can assume it is similar to AU, the distance between our Sun (Sol) and Earth.
	Mglt string `protobuf:"bytes,12,opt,name=mglt,proto3" json:"mglt,omitempty"`
	// The maximum number of kilograms that this starship can transport.
	CargoCapacity string `protobuf:"bytes,13,opt,name=cargo_capacity,json=cargoCapacity,proto3" json:"cargo_capacity,omitempty"`
	// The maximum length of time that this starship can provide consumables for its entire crew without having to resupply.
	Consumables string `protobuf:"bytes,14,opt,name=consumables,proto3" json:"consumables,omitempty"`
	// the hypermedia URL of this resource.
	Url string `protobuf:"bytes,15,opt,name=url,proto3" json:"url,omitempty"`
	// the ISO 8601 date format of the time that this resource was created.
	Created string `protobuf:"bytes,16,opt,name=created,proto3" json:"created,omitempty"`
	// the ISO 8601 date format of the time that this resource was edited.
	Edited string `protobuf:"bytes,17,opt,name=edited,proto3" json:"edited,omitempty"`
	// film ids.
	FilmIds []int64 `protobuf:"varint,18,rep,packed,name=film_ids,json=filmIds,proto3" json:"film_ids,omitempty"`
	// pilot ids.
	PilotIds []int64 `protobuf:"varint,19,rep,packed,name=pilot_ids,json=pilotIds,proto3" json:"pilot_ids,omitempty"`
}

func (x *Starship) Reset() {
	*x = Starship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Starship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Starship) ProtoMessage() {}

func (x *Starship) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Starship.ProtoReflect.Descriptor instead.
func (*Starship) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{28}
}

func (x *Starship) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Starship) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Starship) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Starship) GetStarshipClass() string {
	if x != nil {
		return x.StarshipClass
	}
	return ""
}

func (x *Starship) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *Starship) GetCostInCredits() string {
	if x != nil {
		return x.CostInCredits
	}
	return ""
}

func (x *Starship) GetLength() string {
	if x != nil {
		return x.Length
	}
	return ""
}

func (x *Starship) GetCrew() string {
	if x != nil {
		return x.Crew
	}
	return ""
}

func (x *Starship) GetPassengers() string {
	if x != nil {
		return x.Passengers
	}
	return ""
}

func (x *Starship) GetMaxAtmospheringSpeed() string {
	if x != nil {
		return x.MaxAtmospheringSpeed
	}
	return ""
}

func (x *Starship) GetHyperdriveRating() string {
	if x != nil {
		return x.HyperdriveRating
	}
	return ""
}

func (x *Starship) GetMglt() string {
	if x != nil {
		return x.Mglt
	}
	return ""
}

func (x *Starship) GetCargoCapacity() string {
	if x != nil {
		return x.CargoCapacity
	}
	return ""
}

func (x *Starship) GetConsumables() string {
	if x != nil {
		return x.Consumables
	}
	return ""
}

func (x *Starship) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Starship) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Starship) GetEdited() string {
	if x != nil {
		return x.Edited
	}
	return ""
}

func (x *Starship) GetFilmIds() []int64 {
	if x != nil {
		return x.FilmIds
	}
	return nil
}

func (x *Starship) GetPilotIds() []int64 {
	if x != nil {
		return x.PilotIds
	}
	return nil
}

type Starships struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Starships []*Starship `protobuf:"bytes,1,rep,name=starships,proto3" json:"starships,omitempty"`
}

func (x *Starships) Reset() {
	*x = Starships{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Starships) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Starships) ProtoMessage() {}

func (x *Starships) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Starships.ProtoReflect.Descriptor instead.
func (*Starships) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{29}
}

func (x *Starships) GetStarships() []*Starship {
	if x != nil {
		return x.Starships
	}
	return nil
}

// Vehicle is a single transport craft that does not have hyperdrive capability..
type Vehicle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// vehicle id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of this vehicle. The common name, such as "Sand Crawler" or "Speeder bike".
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The model or official name of this vehicle. Such as "All-Terrain Attack Transport".
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// The class of this vehicle, such as "Wheeled" or "Repulsorcraft".
	VehicleClass string `protobuf:"bytes,4,opt,name=vehicle_class,json=vehicleClass,proto3" json:"vehicle_class,omitempty"`
	// The manufacturer of this vehicle. Comma separated if more than one.
	Manufacturer string `protobuf:"bytes,5,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// The length of this vehicle in meters.
	Length string `protobuf:"bytes,6,opt,name=length,proto3" json:"length,omitempty"`
	// The cost of this vehicle new, in Galactic Credits.
	CostInCredits string `protobuf:"bytes,7,opt,name=cost_in_credits,json=costInCredits,proto3" json:"cost_in_credits,omitempty"`
	// The number of personnel needed to run or pilot this vehicle.
	Crew string `protobuf:"bytes,8,opt,name=crew,proto3" json:"crew,omitempty"`
	// The number of non-essential people this vehicle can transport.
	Passengers string `protobuf:"bytes,9,opt,name=passengers,proto3" json:"passengers,omitempty"`
	// The maximum speed of this vehicle in the atmosphere.
	MaxAtmospheringSpeed string `protobuf:"bytes,10,opt,name=max_atmosphering_speed,json=maxAtmospheringSpeed,proto3" json:"max_atmosphering_speed,omitempty"`
	// The maximum number of kilograms that this vehicle can transport.
	CargoCapacity string `protobuf:"bytes,11,opt,name=cargo_capacity,json=cargoCapacity,proto3" json:"cargo_capacity,omitempty"`
	// The maximum length of time that this vehicle can provide consumables for its entire crew without having to resupply.
	Consumables string `protobuf:"bytes,12,opt,name=consumables,proto3" json:"consumables,omitempty"`
	// the hypermedia URL of this resource.
	Url string `protobuf:"bytes,13,opt,name=url,proto3" json:"url,omitempty"`
	// the ISO 8601 date format of the time that this resource was created.
	Created string `protobuf:"bytes,14,opt,name=created,proto3" json:"created,omitempty"`
	// the ISO 8601 date format of the time that this resource was edited.
	Edited string `protobuf:"bytes,15,opt,name=edited,proto3" json:"edited,omitempty"`
	// film ids.
	FilmIds []int64 `protobuf:"varint,16,rep,packed,name=film_ids,json=filmIds,proto3" json:"film_ids,omitempty"`
	// pilot ids.
	PilotIds []int64 `protobuf:"varint,17,rep,packed,name=pilot_ids,json=pilotIds,proto3" json:"pilot_ids,omitempty"`
}

func (x *Vehicle) Reset() {
	*x = Vehicle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vehicle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vehicle) ProtoMessage() {}

func (x *Vehicle) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vehicle.ProtoReflect.Descriptor instead.
func (*Vehicle) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{30}
}

func (x *Vehicle) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Vehicle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vehicle) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Vehicle) GetVehicleClass() string {
	if x != nil {
		return x.VehicleClass
	}
	return ""
}

func (x *Vehicle) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *Vehicle) GetLength() string {
	if x != nil {
		return x.Length
	}
	return ""
}

func (x *Vehicle) GetCostInCredits() string {
	if x != nil {
		return x.CostInCredits
	}
	return ""
}

func (x *Vehicle) GetCrew() string {
	if x != nil {
		return x.Crew
	}
	return ""
}

func (x *Vehicle) GetPassengers() string {
	if x != nil {
		return x.Passengers
	}
	return ""
}

func (x *Vehicle) GetMaxAtmospheringSpeed() string {
	if x != nil {
		return x.MaxAtmospheringSpeed
	}
	return ""
}

func (x *Vehicle) GetCargoCapacity() string {
	if x != nil {
		return x.CargoCapacity
	}
	return ""
}

func (x *Vehicle) GetConsumables() string {
	if x != nil {
		return x.Consumables
	}
	return ""
}

func (x *Vehicle) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Vehicle) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Vehicle) GetEdited() string {
	if x != nil {
		return x.Edited
	}
	return ""
}

func (x *Vehicle) GetFilmIds() []int64 {
	if x != nil {
		return x.FilmIds
	}
	return nil
}

func (x *Vehicle) GetPilotIds() []int64 {
	if x != nil {
		return x.PilotIds
	}
	return nil
}

type Vehicles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vehicles []*Vehicle `protobuf:"bytes,1,rep,name=vehicles,proto3" json:"vehicles,omitempty"`
}

func (x *Vehicles) Reset() {
	*x = Vehicles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vehicles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vehicles) ProtoMessage() {}

func (x *Vehicles) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vehicles.ProtoReflect.Descriptor instead.
func (*Vehicles) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{31}
}

func (x *Vehicles) GetVehicles() []*Vehicle {
	if x != nil {
		return x.Vehicles
	}
	return nil
}

// Species is a type of person or character within the Star Wars Universe.
type Species struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// species id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of this species.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The classification of this species, such as "mammal" or "reptile".
	Classification string `protobuf:"bytes,3,opt,name=classification,proto3" json:"classification,omitempty"`
	// The designation of this species, such as "sentient".
	Designation string `protobuf:"bytes,4,opt,name=designation,proto3" json:"designation,omitempty"`
	// The average height of this species in centimeters.
	AverageHeight string `protobuf:"bytes,5,opt,name=average_height,json=averageHeight,proto3" json:"average_height,omitempty"`
	// The average lifespan of this species in years.
	AverageLifespan string `protobuf:"bytes,6,opt,name=average_lifespan,json=averageLifespan,proto3" json:"average_lifespan,omitempty"`
	// A comma-separated string of common eye colors for this species,
	// "none" if this species does not typically have eyes.
	EyeColors string `protobuf:"bytes,7,opt,name=eye_colors,json=eyeColors,proto3" json:"eye_colors,omitempty"`
	// A comma-separated string of common hair colors for this species,
	// "none" if this species does not typically have hair.
	HairColors string `protobuf:"bytes,8,opt,name=hair_colors,json=hairColors,proto3" json:"hair_colors,omitempty"`
	// A comma-separated string of common skin colors for this species,
	// "none" if this species does not typically have skin.
	SkinColors string `protobuf:"bytes,9,opt,name=skin_colors,json=skinColors,proto3" json:"skin_colors,omitempty"`
	// The language commonly spoken by this species.
	Language string `protobuf:"bytes,10,opt,name=language,proto3" json:"language,omitempty"`
	// The URL of a planet resource, a planet that this species originates from.
	Homeworld string `protobuf:"bytes,11,opt,name=homeworld,proto3" json:"homeworld,omitempty"`
	// the hypermedia URL of this resource.
	Url string `protobuf:"bytes,12,opt,name=url,proto3" json:"url,omitempty"`
	// the ISO 8601 date format of the time that this resource was created.
	Created string `protobuf:"bytes,13,opt,name=created,proto3" json:"created,omitempty"`
	// the ISO 8601 date format of the time that this resource was edited.
	Edited string `protobuf:"bytes,14,opt,name=edited,proto3" json:"edited,omitempty"`
	// person ids.
	PersonIds []int64 `protobuf:"varint,15,rep,packed,name=person_ids,json=personIds,proto3" json:"person_ids,omitempty"`
	// film ids.
	FilmIds []int64 `protobuf:"varint,16,rep,packed,name=film_ids,json=filmIds,proto3" json:"film_ids,omitempty"`
}

func (x *Species) Reset() {
	*x = Species{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Species) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Species) ProtoMessage() {}

func (x *Species) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Species.ProtoReflect.Descriptor instead.
func (*Species) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{32}
}

func (x *Species) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Species) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Species) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

func (x *Species) GetDesignation() string {
	if x != nil {
		return x.Designation
	}
	return ""
}

func (x *Species) GetAverageHeight() string {
	if x != nil {
		return x.AverageHeight
	}
	return ""
}

func (x *Species) GetAverageLifespan() string {
	if x != nil {
		return x.AverageLifespan
	}
	return ""
}

func (x *Species) GetEyeColors() string {
	if x != nil {
		return x.EyeColors
	}
	return ""
}

func (x *Species) GetHairColors() string {
	if x != nil {
		return x.HairColors
	}
	return ""
}

func (x *Species) GetSkinColors() string {
	if x != nil {
		return x.SkinColors
	}
	return ""
}

func (x *Species) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Species) GetHomeworld() string {
	if x != nil {
		return x.Homeworld
	}
	return ""
}

func (x *Species) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Species) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Species) GetEdited() string {
	if x != nil {
		return x.Edited
	}
	return ""
}

func (x *Species) GetPersonIds() []int64 {
	if x != nil {
		return x.PersonIds
	}
	return nil
}

func (x *Species) GetFilmIds() []int64 {
	if x != nil {
		return x.FilmIds
	}
	return nil
}

type SpeciesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Species []*Species `protobuf:"bytes,1,rep,name=species,proto3" json:"species,omitempty"`
}

func (x *SpeciesList) Reset() {
	*x = SpeciesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeciesList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeciesList) ProtoMessage() {}

func (x *SpeciesList) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeciesList.ProtoReflect.Descriptor instead.
func (*SpeciesList) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{33}
}

func (x *SpeciesList) GetSpecies() []*Species {
	if x != nil {
		return x.Species
	}
	return nil
}

// Planet is a large mass, planet or planetoid in the Star Wars Universe, at the time of 0 ABY.
type Planet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// planet id.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of this planet.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The diameter of this planet in kilometers.
	Diameter string `protobuf:"bytes,3,opt,name=diameter,proto3" json:"diameter,omitempty"`
	// The number of standard hours it takes for this planet to complete a single rotation on its axis.
	RotationPeriod string `protobuf:"bytes,4,opt,name=rotation_period,json=rotationPeriod,proto3" json:"rotation_period,omitempty"`
	// The number of standard days it takes for this planet to complete a single orbit of its local star.
	OrbitalPeriod string `protobuf:"bytes,5,opt,name=orbital_period,json=orbitalPeriod,proto3" json:"orbital_period,omitempty"`
	// A number denoting the gravity of this planet, where "1" is normal or 1 standard G.
	// "2" is twice or 2 standard Gs. "0.5" is half or 0.5 standard Gs.
	Gravity string `protobuf:"bytes,6,opt,name=gravity,proto3" json:"gravity,omitempty"`
	// The average population of sentient beings inhabiting this planet.
	Population string `protobuf:"bytes,7,opt,name=population,proto3" json:"population,omitempty"`
	// The climate of this planet. Comma separated if diverse.
	Climate string `protobuf:"bytes,8,opt,name=climate,proto3" json:"climate,omitempty"`
	// The terrain of this planet. Comma separated if diverse.
	Terrain string `protobuf:"bytes,9,opt,name=terrain,proto3" json:"terrain,omitempty"`
	// The percentage of the planet surface that is naturally occurring water or bodies of water.
	SurfaceWater string `protobuf:"bytes,10,opt,name=surface_water,json=surfaceWater,proto3" json:"surface_water,omitempty"`
	// the hypermedia URL of this resource.
	Url string `protobuf:"bytes,11,opt,name=url,proto3" json:"url,omitempty"`
	// the ISO 8601 date format of the time that this resource was created.
	Created string `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	// the ISO 8601 date format of the time that this resource was edited.
	Edited string `protobuf:"bytes,13,opt,name=edited,proto3" json:"edited,omitempty"`
	// the person that live on this planet ids.
	ResidentIds []int64 `protobuf:"varint,14,rep,packed,name=resident_ids,json=residentIds,proto3" json:"resident_ids,omitempty"`
	// film ids.
	FilmIds []int64 `protobuf:"varint,15,rep,packed,name=film_ids,json=filmIds,proto3" json:"film_ids,omitempty"`
}

func (x *Planet) Reset() {
	*x = Planet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Planet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Planet) ProtoMessage() {}

func (x *Planet) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Planet.ProtoReflect.Descriptor instead.
func (*Planet) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{34}
}

func (x *Planet) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Planet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Planet) GetDiameter() string {
	if x != nil {
		return x.Diameter
	}
	return ""
}

func (x *Planet) GetRotationPeriod() string {
	if x != nil {
		return x.RotationPeriod
	}
	return ""
}

func (x *Planet) GetOrbitalPeriod() string {
	if x != nil {
		return x.OrbitalPeriod
	}
	return ""
}

func (x *Planet) GetGravity() string {
	if x != nil {
		return x.Gravity
	}
	return ""
}

func (x *Planet) GetPopulation() string {
	if x != nil {
		return x.Population
	}
	return ""
}

func (x *Planet) GetClimate() string {
	if x != nil {
		return x.Climate
	}
	return ""
}

func (x *Planet) GetTerrain() string {
	if x != nil {
		return x.Terrain
	}
	return ""
}

func (x *Planet) GetSurfaceWater() string {
	if x != nil {
		return x.SurfaceWater
	}
	return ""
}

func (x *Planet) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Planet) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Planet) GetEdited() string {
	if x != nil {
		return x.Edited
	}
	return ""
}

func (x *Planet) GetResidentIds() []int64 {
	if x != nil {
		return x.ResidentIds
	}
	return nil
}

func (x *Planet) GetFilmIds() []int64 {
	if x != nil {
		return x.FilmIds
	}
	return nil
}

type Planets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Planets []*Planet `protobuf:"bytes,1,rep,name=planets,proto3" json:"planets,omitempty"`
}

func (x *Planets) Reset() {
	*x = Planets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_swapi_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Planets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Planets) ProtoMessage() {}

func (x *Planets) ProtoReflect() protoreflect.Message {
	mi := &file_swapi_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Planets.ProtoReflect.Descriptor instead.
func (*Planets) Descriptor() ([]byte, []int) {
	return file_swapi_proto_rawDescGZIP(), []int{35}
}

func (x *Planets) GetPlanets() []*Planet {
	if x != nil {
		return x.Planets
	}
	return nil
}

var File_swapi_proto protoreflect.FileDescriptor

var file_swapi_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73,
	0x77, 0x61, 0x70, 0x69, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x66, 0x69, 0x6c, 0x6d, 0x2f, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2f, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x2f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xb2, 0x04, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x06, 0x9a, 0x4a, 0x03, 0x12, 0x01, 0x70, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69,
	0x6c, 0x6d, 0x42, 0x0c, 0x9a, 0x4a, 0x09, 0x12, 0x07, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x73,
	0x52, 0x05, 0x66, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x42, 0x14, 0x9a, 0x4a, 0x11, 0x12, 0x0f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x52, 0x07,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x77, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x18, 0x9a, 0x4a, 0x15,
	0x12, 0x13, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x3b, 0x0a, 0x08, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x42, 0x0f, 0x9a, 0x4a, 0x0c, 0x12, 0x0a, 0x76, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x52, 0x08, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x3a, 0xf9, 0x01,
	0x9a, 0x4a, 0xf5, 0x01, 0x0a, 0x39, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x72, 0x32, 0x0a, 0x24, 0x73,
	0x77, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x02, 0x69, 0x64, 0x12, 0x04, 0x24, 0x2e, 0x69, 0x64, 0x0a,
	0x0f, 0x0a, 0x01, 0x70, 0x5a, 0x0a, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x0a, 0x1f, 0x0a, 0x01, 0x66, 0x6a, 0x1a, 0x0a, 0x05, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x11,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0a, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x5f, 0x69, 0x64,
	0x73, 0x0a, 0x2e, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x6a, 0x23, 0x0a, 0x0b,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x0d, 0x70, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64,
	0x73, 0x0a, 0x2f, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x6a, 0x22,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x0e, 0x70, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69,
	0x64, 0x73, 0x0a, 0x25, 0x0a, 0x01, 0x76, 0x6a, 0x20, 0x0a, 0x08, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0d, 0x70, 0x2e, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x25, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x22, 0x69, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x42, 0x0d, 0x9a, 0x4a, 0x0a, 0x12, 0x08, 0x70, 0x2e, 0x70, 0x65, 0x6f, 0x70, 0x6c,
	0x65, 0x52, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x3a, 0x20, 0x9a, 0x4a, 0x1d, 0x0a, 0x1b,
	0x0a, 0x01, 0x70, 0x6a, 0x16, 0x0a, 0x06, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x0c, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x05, 0x24, 0x2e, 0x69, 0x64, 0x73, 0x22, 0x20, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb1, 0x05,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73,
	0x77, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x42, 0x06, 0x9a, 0x4a, 0x03, 0x12, 0x01,
	0x66, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x6d, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x42, 0x14, 0x9a, 0x4a, 0x11, 0x12, 0x0f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x52, 0x07,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x77, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x18, 0x9a, 0x4a, 0x15,
	0x12, 0x13, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x3b, 0x0a, 0x08, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x42, 0x0f, 0x9a, 0x4a, 0x0c, 0x12, 0x0a, 0x76, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x52, 0x08, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x45, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x42, 0x16, 0x9a, 0x4a, 0x13, 0x12, 0x11, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x74, 0x42, 0x14, 0x9a, 0x4a, 0x11, 0x12, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x74, 0x73, 0x3a, 0xab, 0x02, 0x9a, 0x4a, 0xa7, 0x02, 0x0a, 0x33, 0x0a, 0x03, 0x72, 0x65,
	0x73, 0x72, 0x2c, 0x0a, 0x1e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e,
	0x46, 0x69, 0x6c, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x6d, 0x12, 0x0a, 0x0a, 0x02, 0x69, 0x64, 0x12, 0x04, 0x24, 0x2e, 0x69, 0x64, 0x0a,
	0x0d, 0x0a, 0x01, 0x66, 0x5a, 0x08, 0x72, 0x65, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x0a, 0x2e,
	0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x6a, 0x23, 0x0a, 0x0b, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x0d, 0x66, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x0a, 0x2f,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x6a, 0x22, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x0e, 0x66, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x0a,
	0x25, 0x0a, 0x01, 0x76, 0x6a, 0x20, 0x0a, 0x08, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0d, 0x66, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x0a, 0x2e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x73, 0x6a, 0x20, 0x0a, 0x06, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0f, 0x66, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x0a, 0x29, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74,
	0x73, 0x6a, 0x1e, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x13, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x0c, 0x66, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x22, 0x24, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x62, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x6d, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x69, 0x6c,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x42, 0x0c, 0x9a, 0x4a, 0x09, 0x12, 0x07, 0x66, 0x2e, 0x66, 0x69,
	0x6c, 0x6d, 0x73, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x6d, 0x73, 0x3a, 0x1f, 0x9a, 0x4a, 0x1c, 0x0a,
	0x1a, 0x0a, 0x01, 0x66, 0x6a, 0x15, 0x0a, 0x05, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x0c, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x05, 0x24, 0x2e, 0x69, 0x64, 0x73, 0x22, 0x23, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xc5, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x06, 0x9a, 0x4a, 0x03, 0x12, 0x01, 0x76, 0x52, 0x07, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69,
	0x6c, 0x6d, 0x42, 0x0c, 0x9a, 0x4a, 0x09, 0x12, 0x07, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x73,
	0x52, 0x05, 0x66, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x69, 0x6c, 0x6f, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x0d, 0x9a, 0x4a, 0x0a, 0x12, 0x08, 0x70, 0x2e, 0x70,
	0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x73, 0x3a, 0x98, 0x01,
	0x9a, 0x4a, 0x94, 0x01, 0x0a, 0x3c, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x72, 0x35, 0x0a, 0x27, 0x73,
	0x77, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0a, 0x0a, 0x02, 0x69, 0x64, 0x12, 0x04, 0x24, 0x2e,
	0x69, 0x64, 0x0a, 0x10, 0x0a, 0x01, 0x76, 0x5a, 0x0b, 0x72, 0x65, 0x73, 0x2e, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x0a, 0x1f, 0x0a, 0x01, 0x66, 0x6a, 0x1a, 0x0a, 0x05, 0x46, 0x69, 0x6c,
	0x6d, 0x73, 0x12, 0x11, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0a, 0x76, 0x2e, 0x66, 0x69, 0x6c,
	0x6d, 0x5f, 0x69, 0x64, 0x73, 0x0a, 0x21, 0x0a, 0x01, 0x70, 0x6a, 0x1c, 0x0a, 0x06, 0x50, 0x65,
	0x6f, 0x70, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0b, 0x76, 0x2e, 0x70,
	0x69, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x27, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x22, 0x74, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x08, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x42, 0x0f, 0x9a, 0x4a, 0x0c, 0x12, 0x0a, 0x76,
	0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x08, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x3a, 0x22, 0x9a, 0x4a, 0x1f, 0x0a, 0x1d, 0x0a, 0x01, 0x76, 0x6a, 0x18, 0x0a,
	0x08, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x0c, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x12, 0x05, 0x24, 0x2e, 0x69, 0x64, 0x73, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc6, 0x02, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x30, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65,
	0x73, 0x42, 0x06, 0x9a, 0x4a, 0x03, 0x12, 0x01, 0x73, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x42, 0x0d, 0x9a, 0x4a, 0x0a, 0x12, 0x08, 0x70, 0x2e, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65,
	0x52, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x69, 0x6c, 0x6d, 0x42, 0x0c, 0x9a, 0x4a, 0x09, 0x12, 0x07, 0x66, 0x2e, 0x66, 0x69, 0x6c,
	0x6d, 0x73, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x6d, 0x73, 0x3a, 0x99, 0x01, 0x9a, 0x4a, 0x95, 0x01,
	0x0a, 0x3c, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x72, 0x35, 0x0a, 0x27, 0x73, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x0a, 0x0a, 0x02, 0x69, 0x64, 0x12, 0x04, 0x24, 0x2e, 0x69, 0x64, 0x0a, 0x10,
	0x0a, 0x01, 0x73, 0x5a, 0x0b, 0x72, 0x65, 0x73, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73,
	0x0a, 0x1f, 0x0a, 0x01, 0x66, 0x6a, 0x1a, 0x0a, 0x05, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x11,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0a, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x5f, 0x69, 0x64,
	0x73, 0x0a, 0x22, 0x0a, 0x01, 0x70, 0x6a, 0x1d, 0x0a, 0x06, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65,
	0x12, 0x13, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0c, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x26, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x73, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x65, 0x73, 0x42, 0x0e, 0x9a, 0x4a, 0x0b, 0x12, 0x09, 0x73, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x25, 0x9a, 0x4a, 0x22,
	0x0a, 0x20, 0x0a, 0x01, 0x73, 0x6a, 0x1b, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x12, 0x05, 0x24, 0x2e, 0x69,
	0x64, 0x73, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xcd, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x42, 0x06, 0x9a, 0x4a, 0x03, 0x12, 0x01, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x42, 0x0c,
	0x9a, 0x4a, 0x09, 0x12, 0x07, 0x66, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x73, 0x52, 0x05, 0x66, 0x69,
	0x6c, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x42, 0x0d, 0x9a, 0x4a, 0x0a, 0x12, 0x08, 0x70, 0x2e, 0x70, 0x65, 0x6f, 0x70, 0x6c,
	0x65, 0x52, 0x06, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x73, 0x3a, 0x9c, 0x01, 0x9a, 0x4a, 0x98, 0x01,
	0x0a, 0x3f, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x72, 0x38, 0x0a, 0x2a, 0x73, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x0a, 0x0a, 0x02, 0x69, 0x64, 0x12, 0x04, 0x24, 0x2e, 0x69,
	0x64, 0x0a, 0x11, 0x0a, 0x01, 0x73, 0x5a, 0x0c, 0x72, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x0a, 0x1f, 0x0a, 0x01, 0x66, 0x6a, 0x1a, 0x0a, 0x05, 0x46, 0x69, 0x6c,
	0x6d, 0x73, 0x12, 0x11, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0a, 0x73, 0x2e, 0x66, 0x69, 0x6c,
	0x6d, 0x5f, 0x69, 0x64, 0x73, 0x0a, 0x21, 0x0a, 0x01, 0x70, 0x6a, 0x1c, 0x0a, 0x06, 0x50, 0x65,
	0x6f, 0x70, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0b, 0x73, 0x2e, 0x70,
	0x69, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x28, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x22, 0x7a, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x77,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42, 0x10, 0x9a, 0x4a,
	0x0d, 0x12, 0x0b, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x3a, 0x23, 0x9a, 0x4a, 0x20, 0x0a, 0x1e,
	0x0a, 0x01, 0x73, 0x6a, 0x19, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x12, 0x0c, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x12, 0x05, 0x24, 0x2e, 0x69, 0x64, 0x73, 0x22, 0x22,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xd6, 0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x74, 0x42, 0x06, 0x9a, 0x4a, 0x03, 0x12, 0x01, 0x70, 0x52, 0x06, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x15, 0x9a, 0x4a, 0x12, 0x12, 0x10, 0x72, 0x65, 0x73,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x69, 0x6c, 0x6d, 0x42, 0x0c, 0x9a, 0x4a, 0x09, 0x12, 0x07, 0x66, 0x2e, 0x66, 0x69, 0x6c,
	0x6d, 0x73, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x6d, 0x73, 0x3a, 0x9f, 0x01, 0x9a, 0x4a, 0x9b, 0x01,
	0x0a, 0x39, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x72, 0x32, 0x0a, 0x24, 0x73, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x12,
	0x0a, 0x0a, 0x02, 0x69, 0x64, 0x12, 0x04, 0x24, 0x2e, 0x69, 0x64, 0x0a, 0x0f, 0x0a, 0x01, 0x70,
	0x5a, 0x0a, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x0a, 0x2c, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x6a, 0x1f, 0x0a, 0x06, 0x50, 0x65, 0x6f,
	0x70, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x12, 0x0e, 0x70, 0x2e, 0x72, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x0a, 0x1f, 0x0a, 0x01, 0x66, 0x6a,
	0x1a, 0x0a, 0x05, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12, 0x11, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x12,
	0x0a, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x22, 0x26, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x22, 0x6e, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x42, 0x0e, 0x9a, 0x4a, 0x0b, 0x12, 0x09, 0x70, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73,
	0x3a, 0x21, 0x9a, 0x4a, 0x1e, 0x0a, 0x1c, 0x0a, 0x01, 0x70, 0x6a, 0x17, 0x0a, 0x07, 0x50, 0x6c,
	0x61, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x0c, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x12, 0x05, 0x24, 0x2e,
	0x69, 0x64, 0x73, 0x22, 0xe6, 0x03, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x72, 0x74, 0x68, 0x5f, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x59, 0x65, 0x61,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x79, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x61, 0x69, 0x72,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x73,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64,
	0x69, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74,
	0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x49, 0x64, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49,
	0x64, 0x73, 0x3a, 0x18, 0x9a, 0x4a, 0x15, 0x1a, 0x13, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x22, 0x83, 0x01, 0x0a,
	0x06, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x9a, 0x4a, 0x0c, 0x12, 0x0a, 0x72, 0x65, 0x73,
	0x2e, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x3a,
	0x41, 0x9a, 0x4a, 0x3e, 0x0a, 0x3c, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x72, 0x35, 0x0a, 0x25, 0x73,
	0x77, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65,
	0x6f, 0x70, 0x6c, 0x65, 0x12, 0x0c, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x12, 0x05, 0x24, 0x2e, 0x69,
	0x64, 0x73, 0x22, 0xe1, 0x03, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67,
	0x43, 0x72, 0x61, 0x77, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x65, 0x73, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0a, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x73,
	0x3a, 0x14, 0x9a, 0x4a, 0x11, 0x1a, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c,
	0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x22, 0x78, 0x0a, 0x05, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x12,
	0x31, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x6c, 0x6d, 0x42, 0x0e, 0x9a, 0x4a, 0x0b,
	0x12, 0x09, 0x72, 0x65, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x73, 0x52, 0x05, 0x66, 0x69, 0x6c,
	0x6d, 0x73, 0x3a, 0x3c, 0x9a, 0x4a, 0x39, 0x0a, 0x37, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x72, 0x30,
	0x0a, 0x20, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x69, 0x6c, 0x6d, 0x2e, 0x46, 0x69, 0x6c,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x6d, 0x73, 0x12, 0x0c, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x12, 0x05, 0x24, 0x2e, 0x69, 0x64, 0x73,
	0x22, 0xdd, 0x04, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x73,
	0x74, 0x49, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x72, 0x65, 0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e,
	0x67, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74,
	0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x41, 0x74, 0x6d, 0x6f, 0x73,
	0x70, 0x68, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x68, 0x79, 0x70, 0x65, 0x72, 0x64, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x79, 0x70, 0x65, 0x72, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x67, 0x6c,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x67, 0x6c, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x49,
	0x64, 0x73, 0x3a, 0x1c, 0x9a, 0x4a, 0x19, 0x1a, 0x17, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x22, 0x98, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x41,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x42, 0x12, 0x9a, 0x4a, 0x0f, 0x12, 0x0d, 0x72, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x61,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x3a, 0x48, 0x9a, 0x4a, 0x45, 0x0a, 0x43, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x72, 0x3c, 0x0a,
	0x2c, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x0c, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x05, 0x24, 0x2e, 0x69, 0x64, 0x73, 0x22, 0x97, 0x04, 0x0a, 0x07,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x73,
	0x74, 0x49, 0x6e, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72,
	0x65, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x65, 0x77, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x12, 0x34,
	0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6d, 0x61, 0x78, 0x41, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61,
	0x72, 0x67, 0x6f, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69,
	0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x65,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x69, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x69, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x3a, 0x1a, 0x9a, 0x4a, 0x17, 0x1a, 0x15,
	0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x08, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x42, 0x11, 0x9a, 0x4a, 0x0e, 0x12, 0x0c, 0x72, 0x65, 0x73, 0x2e, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x08, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x3a, 0x45, 0x9a, 0x4a, 0x42, 0x0a, 0x40, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x72, 0x39, 0x0a,
	0x29, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x0c, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x12, 0x05, 0x24, 0x2e, 0x69, 0x64, 0x73, 0x22, 0xfe, 0x03, 0x0a, 0x07, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x66, 0x65,
	0x73, 0x70, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x79, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x79, 0x65, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61, 0x69, 0x72, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x69, 0x6e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x64, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69,
	0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x6d, 0x49, 0x64, 0x73, 0x3a, 0x1a, 0x9a,
	0x4a, 0x17, 0x1a, 0x15, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65,
	0x73, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0b, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x77, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x42, 0x10, 0x9a, 0x4a, 0x0d, 0x12,
	0x0b, 0x72, 0x65, 0x73, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x52, 0x07, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x44, 0x9a, 0x4a, 0x41, 0x0a, 0x3f, 0x0a, 0x03, 0x72, 0x65,
	0x73, 0x72, 0x38, 0x0a, 0x28, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x65, 0x73, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x0c, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x12, 0x05, 0x24, 0x2e, 0x69, 0x64, 0x73, 0x22, 0xc7, 0x03, 0x0a, 0x06,
	0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x72, 0x62, 0x69, 0x74, 0x61, 0x6c,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65,
	0x72, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x72,
	0x72, 0x61, 0x69, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x6d, 0x49, 0x64, 0x73, 0x3a, 0x18, 0x9a, 0x4a, 0x15,
	0x1a, 0x13, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74,
	0x73, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x42, 0x10, 0x9a, 0x4a, 0x0d, 0x12, 0x0b, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x65, 0x74, 0x73, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x3a, 0x42, 0x9a, 0x4a,
	0x3f, 0x0a, 0x3d, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x72, 0x36, 0x0a, 0x26, 0x73, 0x77, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x73, 0x12, 0x0c, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x12, 0x05, 0x24, 0x2e, 0x69, 0x64, 0x73,
	0x32, 0xaa, 0x06, 0x0a, 0x05, 0x53, 0x57, 0x41, 0x50, 0x49, 0x12, 0x3d, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x65,
	0x6f, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x12, 0x15, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x6d,
	0x73, 0x12, 0x17, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x77, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x6d, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x12, 0x19, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x77, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x18, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x77,
	0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x73,
	0x77, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x12, 0x17, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x77, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65,
	0x74, 0x73, 0x12, 0x19, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x73, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x1a, 0x03, 0x9a, 0x4a, 0x00, 0x42, 0x88, 0x01,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x77, 0x61, 0x70, 0x69, 0x42, 0x0a, 0x53, 0x77, 0x61,
	0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x61, 0x72, 0x69, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x2d, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65,
	0x6d, 0x6f, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x77, 0x61, 0x70, 0x69, 0x3b, 0x73,
	0x77, 0x61, 0x70, 0x69, 0x70, 0x62, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x05, 0x53,
	0x77, 0x61, 0x70, 0x69, 0xca, 0x02, 0x05, 0x53, 0x77, 0x61, 0x70, 0x69, 0xe2, 0x02, 0x11, 0x53,
	0x77, 0x61, 0x70, 0x69, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x05, 0x53, 0x77, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_swapi_proto_rawDescOnce sync.Once
	file_swapi_proto_rawDescData = file_swapi_proto_rawDesc
)

func file_swapi_proto_rawDescGZIP() []byte {
	file_swapi_proto_rawDescOnce.Do(func() {
		file_swapi_proto_rawDescData = protoimpl.X.CompressGZIP(file_swapi_proto_rawDescData)
	})
	return file_swapi_proto_rawDescData
}

var file_swapi_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_swapi_proto_goTypes = []interface{}{
	(*GetPersonRequest)(nil),     // 0: swapi.GetPersonRequest
	(*GetPersonReply)(nil),       // 1: swapi.GetPersonReply
	(*ListPeopleRequest)(nil),    // 2: swapi.ListPeopleRequest
	(*ListPeopleReply)(nil),      // 3: swapi.ListPeopleReply
	(*GetFilmRequest)(nil),       // 4: swapi.GetFilmRequest
	(*GetFilmReply)(nil),         // 5: swapi.GetFilmReply
	(*ListFilmsRequest)(nil),     // 6: swapi.ListFilmsRequest
	(*ListFilmsReply)(nil),       // 7: swapi.ListFilmsReply
	(*GetVehicleRequest)(nil),    // 8: swapi.GetVehicleRequest
	(*GetVehicleReply)(nil),      // 9: swapi.GetVehicleReply
	(*ListVehiclesRequest)(nil),  // 10: swapi.ListVehiclesRequest
	(*ListVehiclesReply)(nil),    // 11: swapi.ListVehiclesReply
	(*GetSpeciesRequest)(nil),    // 12: swapi.GetSpeciesRequest
	(*GetSpeciesReply)(nil),      // 13: swapi.GetSpeciesReply
	(*ListSpeciesRequest)(nil),   // 14: swapi.ListSpeciesRequest
	(*ListSpeciesReply)(nil),     // 15: swapi.ListSpeciesReply
	(*GetStarshipRequest)(nil),   // 16: swapi.GetStarshipRequest
	(*GetStarshipReply)(nil),     // 17: swapi.GetStarshipReply
	(*ListStarshipsRequest)(nil), // 18: swapi.ListStarshipsRequest
	(*ListStarshipsReply)(nil),   // 19: swapi.ListStarshipsReply
	(*GetPlanetRequest)(nil),     // 20: swapi.GetPlanetRequest
	(*GetPlanetReply)(nil),       // 21: swapi.GetPlanetReply
	(*ListPlanetsRequest)(nil),   // 22: swapi.ListPlanetsRequest
	(*ListPlanetsReply)(nil),     // 23: swapi.ListPlanetsReply
	(*Person)(nil),               // 24: swapi.Person
	(*People)(nil),               // 25: swapi.People
	(*Film)(nil),                 // 26: swapi.Film
	(*Films)(nil),                // 27: swapi.Films
	(*Starship)(nil),             // 28: swapi.Starship
	(*Starships)(nil),            // 29: swapi.Starships
	(*Vehicle)(nil),              // 30: swapi.Vehicle
	(*Vehicles)(nil),             // 31: swapi.Vehicles
	(*Species)(nil),              // 32: swapi.Species
	(*SpeciesList)(nil),          // 33: swapi.SpeciesList
	(*Planet)(nil),               // 34: swapi.Planet
	(*Planets)(nil),              // 35: swapi.Planets
	(*date.Date)(nil),            // 36: google.type.Date
}
var file_swapi_proto_depIdxs = []int32{
	24, // 0: swapi.GetPersonReply.person:type_name -> swapi.Person
	26, // 1: swapi.GetPersonReply.films:type_name -> swapi.Film
	32, // 2: swapi.GetPersonReply.species:type_name -> swapi.Species
	28, // 3: swapi.GetPersonReply.starships:type_name -> swapi.Starship
	30, // 4: swapi.GetPersonReply.vehicles:type_name -> swapi.Vehicle
	24, // 5: swapi.ListPeopleReply.people:type_name -> swapi.Person
	26, // 6: swapi.GetFilmReply.film:type_name -> swapi.Film
	32, // 7: swapi.GetFilmReply.species:type_name -> swapi.Species
	28, // 8: swapi.GetFilmReply.starships:type_name -> swapi.Starship
	30, // 9: swapi.GetFilmReply.vehicles:type_name -> swapi.Vehicle
	24, // 10: swapi.GetFilmReply.characters:type_name -> swapi.Person
	34, // 11: swapi.GetFilmReply.planets:type_name -> swapi.Planet
	26, // 12: swapi.ListFilmsReply.films:type_name -> swapi.Film
	30, // 13: swapi.GetVehicleReply.vehicle:type_name -> swapi.Vehicle
	26, // 14: swapi.GetVehicleReply.films:type_name -> swapi.Film
	24, // 15: swapi.GetVehicleReply.pilots:type_name -> swapi.Person
	30, // 16: swapi.ListVehiclesReply.vehicles:type_name -> swapi.Vehicle
	32, // 17: swapi.GetSpeciesReply.species:type_name -> swapi.Species
	24, // 18: swapi.GetSpeciesReply.people:type_name -> swapi.Person
	26, // 19: swapi.GetSpeciesReply.films:type_name -> swapi.Film
	32, // 20: swapi.ListSpeciesReply.species:type_name -> swapi.Species
	28, // 21: swapi.GetStarshipReply.starship:type_name -> swapi.Starship
	26, // 22: swapi.GetStarshipReply.films:type_name -> swapi.Film
	24, // 23: swapi.GetStarshipReply.pilots:type_name -> swapi.Person
	28, // 24: swapi.ListStarshipsReply.starships:type_name -> swapi.Starship
	34, // 25: swapi.GetPlanetReply.planet:type_name -> swapi.Planet
	24, // 26: swapi.GetPlanetReply.residents:type_name -> swapi.Person
	26, // 27: swapi.GetPlanetReply.films:type_name -> swapi.Film
	34, // 28: swapi.ListPlanetsReply.planets:type_name -> swapi.Planet
	24, // 29: swapi.People.people:type_name -> swapi.Person
	36, // 30: swapi.Film.release_date:type_name -> google.type.Date
	26, // 31: swapi.Films.films:type_name -> swapi.Film
	28, // 32: swapi.Starships.starships:type_name -> swapi.Starship
	30, // 33: swapi.Vehicles.vehicles:type_name -> swapi.Vehicle
	32, // 34: swapi.SpeciesList.species:type_name -> swapi.Species
	34, // 35: swapi.Planets.planets:type_name -> swapi.Planet
	0,  // 36: swapi.SWAPI.GetPerson:input_type -> swapi.GetPersonRequest
	2,  // 37: swapi.SWAPI.ListPeople:input_type -> swapi.ListPeopleRequest
	4,  // 38: swapi.SWAPI.GetFilm:input_type -> swapi.GetFilmRequest
	6,  // 39: swapi.SWAPI.ListFilms:input_type -> swapi.ListFilmsRequest
	16, // 40: swapi.SWAPI.GetStarship:input_type -> swapi.GetStarshipRequest
	18, // 41: swapi.SWAPI.ListStarships:input_type -> swapi.ListStarshipsRequest
	12, // 42: swapi.SWAPI.GetSpecies:input_type -> swapi.GetSpeciesRequest
	14, // 43: swapi.SWAPI.ListSpecies:input_type -> swapi.ListSpeciesRequest
	8,  // 44: swapi.SWAPI.GetVehicle:input_type -> swapi.GetVehicleRequest
	10, // 45: swapi.SWAPI.ListVehicles:input_type -> swapi.ListVehiclesRequest
	20, // 46: swapi.SWAPI.GetPlanet:input_type -> swapi.GetPlanetRequest
	22, // 47: swapi.SWAPI.ListPlanets:input_type -> swapi.ListPlanetsRequest
	1,  // 48: swapi.SWAPI.GetPerson:output_type -> swapi.GetPersonReply
	3,  // 49: swapi.SWAPI.ListPeople:output_type -> swapi.ListPeopleReply
	5,  // 50: swapi.SWAPI.GetFilm:output_type -> swapi.GetFilmReply
	7,  // 51: swapi.SWAPI.ListFilms:output_type -> swapi.ListFilmsReply
	17, // 52: swapi.SWAPI.GetStarship:output_type -> swapi.GetStarshipReply
	19, // 53: swapi.SWAPI.ListStarships:output_type -> swapi.ListStarshipsReply
	13, // 54: swapi.SWAPI.GetSpecies:output_type -> swapi.GetSpeciesReply
	15, // 55: swapi.SWAPI.ListSpecies:output_type -> swapi.ListSpeciesReply
	9,  // 56: swapi.SWAPI.GetVehicle:output_type -> swapi.GetVehicleReply
	11, // 57: swapi.SWAPI.ListVehicles:output_type -> swapi.ListVehiclesReply
	21, // 58: swapi.SWAPI.GetPlanet:output_type -> swapi.GetPlanetReply
	23, // 59: swapi.SWAPI.ListPlanets:output_type -> swapi.ListPlanetsReply
	48, // [48:60] is the sub-list for method output_type
	36, // [36:48] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_swapi_proto_init() }
func file_swapi_proto_init() {
	if File_swapi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_swapi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPersonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPersonReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPeopleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPeopleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilmReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilmsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilmsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVehicleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVehicleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVehiclesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVehiclesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpeciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSpeciesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSpeciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSpeciesReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStarshipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStarshipReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStarshipsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStarshipsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanetReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlanetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPlanetsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*People); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Film); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Films); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Starship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Starships); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vehicle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vehicles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Species); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeciesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Planet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_swapi_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Planets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_swapi_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_swapi_proto_goTypes,
		DependencyIndexes: file_swapi_proto_depIdxs,
		MessageInfos:      file_swapi_proto_msgTypes,
	}.Build()
	File_swapi_proto = out.File
	file_swapi_proto_rawDesc = nil
	file_swapi_proto_goTypes = nil
	file_swapi_proto_depIdxs = nil
}
