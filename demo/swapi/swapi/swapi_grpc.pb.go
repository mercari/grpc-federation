// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: swapi.proto

package swapipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SWAPI_GetPerson_FullMethodName     = "/swapi.SWAPI/GetPerson"
	SWAPI_ListPeople_FullMethodName    = "/swapi.SWAPI/ListPeople"
	SWAPI_GetFilm_FullMethodName       = "/swapi.SWAPI/GetFilm"
	SWAPI_ListFilms_FullMethodName     = "/swapi.SWAPI/ListFilms"
	SWAPI_GetStarship_FullMethodName   = "/swapi.SWAPI/GetStarship"
	SWAPI_ListStarships_FullMethodName = "/swapi.SWAPI/ListStarships"
	SWAPI_GetSpecies_FullMethodName    = "/swapi.SWAPI/GetSpecies"
	SWAPI_ListSpecies_FullMethodName   = "/swapi.SWAPI/ListSpecies"
	SWAPI_GetVehicle_FullMethodName    = "/swapi.SWAPI/GetVehicle"
	SWAPI_ListVehicles_FullMethodName  = "/swapi.SWAPI/ListVehicles"
	SWAPI_GetPlanet_FullMethodName     = "/swapi.SWAPI/GetPlanet"
	SWAPI_ListPlanets_FullMethodName   = "/swapi.SWAPI/ListPlanets"
)

// SWAPIClient is the client API for SWAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SWAPIClient interface {
	GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*GetPersonReply, error)
	ListPeople(ctx context.Context, in *ListPeopleRequest, opts ...grpc.CallOption) (*ListPeopleReply, error)
	GetFilm(ctx context.Context, in *GetFilmRequest, opts ...grpc.CallOption) (*GetFilmReply, error)
	ListFilms(ctx context.Context, in *ListFilmsRequest, opts ...grpc.CallOption) (*ListFilmsReply, error)
	GetStarship(ctx context.Context, in *GetStarshipRequest, opts ...grpc.CallOption) (*GetStarshipReply, error)
	ListStarships(ctx context.Context, in *ListStarshipsRequest, opts ...grpc.CallOption) (*ListStarshipsReply, error)
	GetSpecies(ctx context.Context, in *GetSpeciesRequest, opts ...grpc.CallOption) (*GetSpeciesReply, error)
	ListSpecies(ctx context.Context, in *ListSpeciesRequest, opts ...grpc.CallOption) (*ListSpeciesReply, error)
	GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*GetVehicleReply, error)
	ListVehicles(ctx context.Context, in *ListVehiclesRequest, opts ...grpc.CallOption) (*ListVehiclesReply, error)
	GetPlanet(ctx context.Context, in *GetPlanetRequest, opts ...grpc.CallOption) (*GetPlanetReply, error)
	ListPlanets(ctx context.Context, in *ListPlanetsRequest, opts ...grpc.CallOption) (*ListPlanetsReply, error)
}

type sWAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewSWAPIClient(cc grpc.ClientConnInterface) SWAPIClient {
	return &sWAPIClient{cc}
}

func (c *sWAPIClient) GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*GetPersonReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPersonReply)
	err := c.cc.Invoke(ctx, SWAPI_GetPerson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sWAPIClient) ListPeople(ctx context.Context, in *ListPeopleRequest, opts ...grpc.CallOption) (*ListPeopleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPeopleReply)
	err := c.cc.Invoke(ctx, SWAPI_ListPeople_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sWAPIClient) GetFilm(ctx context.Context, in *GetFilmRequest, opts ...grpc.CallOption) (*GetFilmReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilmReply)
	err := c.cc.Invoke(ctx, SWAPI_GetFilm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sWAPIClient) ListFilms(ctx context.Context, in *ListFilmsRequest, opts ...grpc.CallOption) (*ListFilmsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilmsReply)
	err := c.cc.Invoke(ctx, SWAPI_ListFilms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sWAPIClient) GetStarship(ctx context.Context, in *GetStarshipRequest, opts ...grpc.CallOption) (*GetStarshipReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStarshipReply)
	err := c.cc.Invoke(ctx, SWAPI_GetStarship_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sWAPIClient) ListStarships(ctx context.Context, in *ListStarshipsRequest, opts ...grpc.CallOption) (*ListStarshipsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStarshipsReply)
	err := c.cc.Invoke(ctx, SWAPI_ListStarships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sWAPIClient) GetSpecies(ctx context.Context, in *GetSpeciesRequest, opts ...grpc.CallOption) (*GetSpeciesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpeciesReply)
	err := c.cc.Invoke(ctx, SWAPI_GetSpecies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sWAPIClient) ListSpecies(ctx context.Context, in *ListSpeciesRequest, opts ...grpc.CallOption) (*ListSpeciesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSpeciesReply)
	err := c.cc.Invoke(ctx, SWAPI_ListSpecies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sWAPIClient) GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*GetVehicleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVehicleReply)
	err := c.cc.Invoke(ctx, SWAPI_GetVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sWAPIClient) ListVehicles(ctx context.Context, in *ListVehiclesRequest, opts ...grpc.CallOption) (*ListVehiclesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVehiclesReply)
	err := c.cc.Invoke(ctx, SWAPI_ListVehicles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sWAPIClient) GetPlanet(ctx context.Context, in *GetPlanetRequest, opts ...grpc.CallOption) (*GetPlanetReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlanetReply)
	err := c.cc.Invoke(ctx, SWAPI_GetPlanet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sWAPIClient) ListPlanets(ctx context.Context, in *ListPlanetsRequest, opts ...grpc.CallOption) (*ListPlanetsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPlanetsReply)
	err := c.cc.Invoke(ctx, SWAPI_ListPlanets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SWAPIServer is the server API for SWAPI service.
// All implementations must embed UnimplementedSWAPIServer
// for forward compatibility
type SWAPIServer interface {
	GetPerson(context.Context, *GetPersonRequest) (*GetPersonReply, error)
	ListPeople(context.Context, *ListPeopleRequest) (*ListPeopleReply, error)
	GetFilm(context.Context, *GetFilmRequest) (*GetFilmReply, error)
	ListFilms(context.Context, *ListFilmsRequest) (*ListFilmsReply, error)
	GetStarship(context.Context, *GetStarshipRequest) (*GetStarshipReply, error)
	ListStarships(context.Context, *ListStarshipsRequest) (*ListStarshipsReply, error)
	GetSpecies(context.Context, *GetSpeciesRequest) (*GetSpeciesReply, error)
	ListSpecies(context.Context, *ListSpeciesRequest) (*ListSpeciesReply, error)
	GetVehicle(context.Context, *GetVehicleRequest) (*GetVehicleReply, error)
	ListVehicles(context.Context, *ListVehiclesRequest) (*ListVehiclesReply, error)
	GetPlanet(context.Context, *GetPlanetRequest) (*GetPlanetReply, error)
	ListPlanets(context.Context, *ListPlanetsRequest) (*ListPlanetsReply, error)
	mustEmbedUnimplementedSWAPIServer()
}

// UnimplementedSWAPIServer must be embedded to have forward compatible implementations.
type UnimplementedSWAPIServer struct {
}

func (UnimplementedSWAPIServer) GetPerson(context.Context, *GetPersonRequest) (*GetPersonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerson not implemented")
}
func (UnimplementedSWAPIServer) ListPeople(context.Context, *ListPeopleRequest) (*ListPeopleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeople not implemented")
}
func (UnimplementedSWAPIServer) GetFilm(context.Context, *GetFilmRequest) (*GetFilmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilm not implemented")
}
func (UnimplementedSWAPIServer) ListFilms(context.Context, *ListFilmsRequest) (*ListFilmsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilms not implemented")
}
func (UnimplementedSWAPIServer) GetStarship(context.Context, *GetStarshipRequest) (*GetStarshipReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStarship not implemented")
}
func (UnimplementedSWAPIServer) ListStarships(context.Context, *ListStarshipsRequest) (*ListStarshipsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStarships not implemented")
}
func (UnimplementedSWAPIServer) GetSpecies(context.Context, *GetSpeciesRequest) (*GetSpeciesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecies not implemented")
}
func (UnimplementedSWAPIServer) ListSpecies(context.Context, *ListSpeciesRequest) (*ListSpeciesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpecies not implemented")
}
func (UnimplementedSWAPIServer) GetVehicle(context.Context, *GetVehicleRequest) (*GetVehicleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicle not implemented")
}
func (UnimplementedSWAPIServer) ListVehicles(context.Context, *ListVehiclesRequest) (*ListVehiclesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVehicles not implemented")
}
func (UnimplementedSWAPIServer) GetPlanet(context.Context, *GetPlanetRequest) (*GetPlanetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanet not implemented")
}
func (UnimplementedSWAPIServer) ListPlanets(context.Context, *ListPlanetsRequest) (*ListPlanetsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlanets not implemented")
}
func (UnimplementedSWAPIServer) mustEmbedUnimplementedSWAPIServer() {}

// UnsafeSWAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SWAPIServer will
// result in compilation errors.
type UnsafeSWAPIServer interface {
	mustEmbedUnimplementedSWAPIServer()
}

func RegisterSWAPIServer(s grpc.ServiceRegistrar, srv SWAPIServer) {
	s.RegisterService(&SWAPI_ServiceDesc, srv)
}

func _SWAPI_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWAPIServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWAPI_GetPerson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWAPIServer).GetPerson(ctx, req.(*GetPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SWAPI_ListPeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPeopleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWAPIServer).ListPeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWAPI_ListPeople_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWAPIServer).ListPeople(ctx, req.(*ListPeopleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SWAPI_GetFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWAPIServer).GetFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWAPI_GetFilm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWAPIServer).GetFilm(ctx, req.(*GetFilmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SWAPI_ListFilms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWAPIServer).ListFilms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWAPI_ListFilms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWAPIServer).ListFilms(ctx, req.(*ListFilmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SWAPI_GetStarship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStarshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWAPIServer).GetStarship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWAPI_GetStarship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWAPIServer).GetStarship(ctx, req.(*GetStarshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SWAPI_ListStarships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStarshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWAPIServer).ListStarships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWAPI_ListStarships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWAPIServer).ListStarships(ctx, req.(*ListStarshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SWAPI_GetSpecies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpeciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWAPIServer).GetSpecies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWAPI_GetSpecies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWAPIServer).GetSpecies(ctx, req.(*GetSpeciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SWAPI_ListSpecies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpeciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWAPIServer).ListSpecies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWAPI_ListSpecies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWAPIServer).ListSpecies(ctx, req.(*ListSpeciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SWAPI_GetVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWAPIServer).GetVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWAPI_GetVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWAPIServer).GetVehicle(ctx, req.(*GetVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SWAPI_ListVehicles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVehiclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWAPIServer).ListVehicles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWAPI_ListVehicles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWAPIServer).ListVehicles(ctx, req.(*ListVehiclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SWAPI_GetPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWAPIServer).GetPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWAPI_GetPlanet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWAPIServer).GetPlanet(ctx, req.(*GetPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SWAPI_ListPlanets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlanetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SWAPIServer).ListPlanets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SWAPI_ListPlanets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SWAPIServer).ListPlanets(ctx, req.(*ListPlanetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SWAPI_ServiceDesc is the grpc.ServiceDesc for SWAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SWAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swapi.SWAPI",
	HandlerType: (*SWAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPerson",
			Handler:    _SWAPI_GetPerson_Handler,
		},
		{
			MethodName: "ListPeople",
			Handler:    _SWAPI_ListPeople_Handler,
		},
		{
			MethodName: "GetFilm",
			Handler:    _SWAPI_GetFilm_Handler,
		},
		{
			MethodName: "ListFilms",
			Handler:    _SWAPI_ListFilms_Handler,
		},
		{
			MethodName: "GetStarship",
			Handler:    _SWAPI_GetStarship_Handler,
		},
		{
			MethodName: "ListStarships",
			Handler:    _SWAPI_ListStarships_Handler,
		},
		{
			MethodName: "GetSpecies",
			Handler:    _SWAPI_GetSpecies_Handler,
		},
		{
			MethodName: "ListSpecies",
			Handler:    _SWAPI_ListSpecies_Handler,
		},
		{
			MethodName: "GetVehicle",
			Handler:    _SWAPI_GetVehicle_Handler,
		},
		{
			MethodName: "ListVehicles",
			Handler:    _SWAPI_ListVehicles_Handler,
		},
		{
			MethodName: "GetPlanet",
			Handler:    _SWAPI_GetPlanet_Handler,
		},
		{
			MethodName: "ListPlanets",
			Handler:    _SWAPI_ListPlanets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swapi.proto",
}
