// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: starship/starship.proto

package starshippb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StarshipService_GetStarship_FullMethodName   = "/swapi.starship.StarshipService/GetStarship"
	StarshipService_ListStarships_FullMethodName = "/swapi.starship.StarshipService/ListStarships"
)

// StarshipServiceClient is the client API for StarshipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StarshipServiceClient interface {
	GetStarship(ctx context.Context, in *GetStarshipRequest, opts ...grpc.CallOption) (*GetStarshipReply, error)
	ListStarships(ctx context.Context, in *ListStarshipsRequest, opts ...grpc.CallOption) (*ListStarshipsReply, error)
}

type starshipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStarshipServiceClient(cc grpc.ClientConnInterface) StarshipServiceClient {
	return &starshipServiceClient{cc}
}

func (c *starshipServiceClient) GetStarship(ctx context.Context, in *GetStarshipRequest, opts ...grpc.CallOption) (*GetStarshipReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStarshipReply)
	err := c.cc.Invoke(ctx, StarshipService_GetStarship_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starshipServiceClient) ListStarships(ctx context.Context, in *ListStarshipsRequest, opts ...grpc.CallOption) (*ListStarshipsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStarshipsReply)
	err := c.cc.Invoke(ctx, StarshipService_ListStarships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StarshipServiceServer is the server API for StarshipService service.
// All implementations must embed UnimplementedStarshipServiceServer
// for forward compatibility
type StarshipServiceServer interface {
	GetStarship(context.Context, *GetStarshipRequest) (*GetStarshipReply, error)
	ListStarships(context.Context, *ListStarshipsRequest) (*ListStarshipsReply, error)
	mustEmbedUnimplementedStarshipServiceServer()
}

// UnimplementedStarshipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStarshipServiceServer struct {
}

func (UnimplementedStarshipServiceServer) GetStarship(context.Context, *GetStarshipRequest) (*GetStarshipReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStarship not implemented")
}
func (UnimplementedStarshipServiceServer) ListStarships(context.Context, *ListStarshipsRequest) (*ListStarshipsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStarships not implemented")
}
func (UnimplementedStarshipServiceServer) mustEmbedUnimplementedStarshipServiceServer() {}

// UnsafeStarshipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StarshipServiceServer will
// result in compilation errors.
type UnsafeStarshipServiceServer interface {
	mustEmbedUnimplementedStarshipServiceServer()
}

func RegisterStarshipServiceServer(s grpc.ServiceRegistrar, srv StarshipServiceServer) {
	s.RegisterService(&StarshipService_ServiceDesc, srv)
}

func _StarshipService_GetStarship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStarshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarshipServiceServer).GetStarship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarshipService_GetStarship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarshipServiceServer).GetStarship(ctx, req.(*GetStarshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarshipService_ListStarships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStarshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarshipServiceServer).ListStarships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StarshipService_ListStarships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarshipServiceServer).ListStarships(ctx, req.(*ListStarshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StarshipService_ServiceDesc is the grpc.ServiceDesc for StarshipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StarshipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swapi.starship.StarshipService",
	HandlerType: (*StarshipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStarship",
			Handler:    _StarshipService_GetStarship_Handler,
		},
		{
			MethodName: "ListStarships",
			Handler:    _StarshipService_ListStarships_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "starship/starship.proto",
}
