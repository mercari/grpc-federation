// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: species/species.proto

package speciespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SpeciesService_GetSpecies_FullMethodName  = "/swapi.species.SpeciesService/GetSpecies"
	SpeciesService_ListSpecies_FullMethodName = "/swapi.species.SpeciesService/ListSpecies"
)

// SpeciesServiceClient is the client API for SpeciesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeciesServiceClient interface {
	GetSpecies(ctx context.Context, in *GetSpeciesRequest, opts ...grpc.CallOption) (*GetSpeciesReply, error)
	ListSpecies(ctx context.Context, in *ListSpeciesRequest, opts ...grpc.CallOption) (*ListSpeciesReply, error)
}

type speciesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeciesServiceClient(cc grpc.ClientConnInterface) SpeciesServiceClient {
	return &speciesServiceClient{cc}
}

func (c *speciesServiceClient) GetSpecies(ctx context.Context, in *GetSpeciesRequest, opts ...grpc.CallOption) (*GetSpeciesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpeciesReply)
	err := c.cc.Invoke(ctx, SpeciesService_GetSpecies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speciesServiceClient) ListSpecies(ctx context.Context, in *ListSpeciesRequest, opts ...grpc.CallOption) (*ListSpeciesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSpeciesReply)
	err := c.cc.Invoke(ctx, SpeciesService_ListSpecies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeciesServiceServer is the server API for SpeciesService service.
// All implementations must embed UnimplementedSpeciesServiceServer
// for forward compatibility
type SpeciesServiceServer interface {
	GetSpecies(context.Context, *GetSpeciesRequest) (*GetSpeciesReply, error)
	ListSpecies(context.Context, *ListSpeciesRequest) (*ListSpeciesReply, error)
	mustEmbedUnimplementedSpeciesServiceServer()
}

// UnimplementedSpeciesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpeciesServiceServer struct {
}

func (UnimplementedSpeciesServiceServer) GetSpecies(context.Context, *GetSpeciesRequest) (*GetSpeciesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecies not implemented")
}
func (UnimplementedSpeciesServiceServer) ListSpecies(context.Context, *ListSpeciesRequest) (*ListSpeciesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpecies not implemented")
}
func (UnimplementedSpeciesServiceServer) mustEmbedUnimplementedSpeciesServiceServer() {}

// UnsafeSpeciesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeciesServiceServer will
// result in compilation errors.
type UnsafeSpeciesServiceServer interface {
	mustEmbedUnimplementedSpeciesServiceServer()
}

func RegisterSpeciesServiceServer(s grpc.ServiceRegistrar, srv SpeciesServiceServer) {
	s.RegisterService(&SpeciesService_ServiceDesc, srv)
}

func _SpeciesService_GetSpecies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpeciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeciesServiceServer).GetSpecies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeciesService_GetSpecies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeciesServiceServer).GetSpecies(ctx, req.(*GetSpeciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeciesService_ListSpecies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpeciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeciesServiceServer).ListSpecies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeciesService_ListSpecies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeciesServiceServer).ListSpecies(ctx, req.(*ListSpeciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpeciesService_ServiceDesc is the grpc.ServiceDesc for SpeciesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeciesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swapi.species.SpeciesService",
	HandlerType: (*SpeciesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpecies",
			Handler:    _SpeciesService_GetSpecies_Handler,
		},
		{
			MethodName: "ListSpecies",
			Handler:    _SpeciesService_ListSpecies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "species/species.proto",
}
