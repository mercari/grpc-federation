// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
package federation

import (
	"context"
	"fmt"
	"io"
	"log/slog"
	"os"
	"reflect"
	"runtime/debug"
	"sync"

	"github.com/google/cel-go/cel"
	celtypes "github.com/google/cel-go/common/types"
	grpcfed "github.com/mercari/grpc-federation/grpc/federation"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"
	"golang.org/x/sync/errgroup"
	"golang.org/x/sync/singleflight"

	content "example/content"
)

// Org_Federation_ContentArgument is argument for "org.federation.Content" message.
type Org_Federation_ContentArgument[T any] struct {
	BoolField        bool
	BoolsField       []bool
	ByField          string
	ByteStringField  []byte
	ByteStringsField [][]byte
	DoubleField      float64
	DoublesField     []float64
	EnumField        ContentType
	EnumsField       []ContentType
	EnvField         string
	EnvsField        []string
	Fixed32Field     uint32
	Fixed32SField    []uint32
	Fixed64Field     uint64
	Fixed64SField    []uint64
	FloatField       float32
	FloatsField      []float32
	Int32Field       int32
	Int32SField      []int32
	Int64Field       int64
	Int64SField      []int64
	MessageField     *Content
	MessagesField    []*Content
	Sfixed32Field    int32
	Sfixed32SField   []int32
	Sfixed64Field    int64
	Sfixed64SField   []int64
	Sint32Field      int32
	Sint32SField     []int32
	Sint64Field      int64
	Sint64SField     []int64
	StringField      string
	StringsField     []string
	Uint32Field      uint32
	Uint32SField     []uint32
	Uint64Field      uint64
	Uint64SField     []uint64
	Client           T
}

// Org_Federation_GetResponseArgument is argument for "org.federation.GetResponse" message.
type Org_Federation_GetResponseArgument[T any] struct {
	Content  *content.Content
	Content2 *Content
	Id       string
	Client   T
}

// FederationServiceConfig configuration required to initialize the service that use GRPC Federation.
type FederationServiceConfig struct {
	// Client provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
	// If this interface is not provided, an error is returned during initialization.
	Client FederationServiceClientFactory // required
	// ErrorHandler Federation Service often needs to convert errors received from downstream services.
	// If an error occurs during method execution in the Federation Service, this error handler is called and the returned error is treated as a final error.
	ErrorHandler grpcfed.ErrorHandler
	// Logger sets the logger used to output Debug/Info/Error information.
	Logger *slog.Logger
}

// FederationServiceClientFactory provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
type FederationServiceClientFactory interface {
	// Content_ContentServiceClient create a gRPC Client to be used to call methods in content.ContentService.
	Content_ContentServiceClient(FederationServiceClientConfig) (content.ContentServiceClient, error)
}

// FederationServiceClientConfig information set in `dependencies` of the `grpc.federation.service` option.
// Hints for creating a gRPC Client.
type FederationServiceClientConfig struct {
	// Service returns the name of the service on Protocol Buffers.
	Service string
	// Name is the value set for `name` in `dependencies` of the `grpc.federation.service` option.
	// It must be unique among the services on which the Federation Service depends.
	Name string
}

// FederationServiceDependentClientSet has a gRPC client for all services on which the federation service depends.
// This is provided as an argument when implementing the custom resolver.
type FederationServiceDependentClientSet struct {
	Content_ContentServiceClient content.ContentServiceClient
}

// FederationServiceResolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
type FederationServiceResolver interface {
}

// FederationServiceUnimplementedResolver a structure implemented to satisfy the Resolver interface.
// An Unimplemented error is always returned.
// This is intended for use when there are many Resolver interfaces that do not need to be implemented,
// by embedding them in a resolver structure that you have created.
type FederationServiceUnimplementedResolver struct{}

const (
	FederationService_DependentMethod_Content_ContentService_GetContent = "/content.ContentService/GetContent"
)

// FederationService represents Federation Service.
type FederationService struct {
	*UnimplementedFederationServiceServer
	cfg          FederationServiceConfig
	logger       *slog.Logger
	errorHandler grpcfed.ErrorHandler
	env          *cel.Env
	tracer       trace.Tracer
	client       *FederationServiceDependentClientSet
}

// NewFederationService creates FederationService instance by FederationServiceConfig.
func NewFederationService(cfg FederationServiceConfig) (*FederationService, error) {
	if cfg.Client == nil {
		return nil, fmt.Errorf("Client field in FederationServiceConfig is not set. this field must be set")
	}
	Content_ContentServiceClient, err := cfg.Client.Content_ContentServiceClient(FederationServiceClientConfig{
		Service: "content.ContentService",
		Name:    "",
	})
	if err != nil {
		return nil, err
	}
	logger := cfg.Logger
	if logger == nil {
		logger = slog.New(slog.NewJSONHandler(io.Discard, nil))
	}
	errorHandler := cfg.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(ctx context.Context, methodName string, err error) error { return err }
	}
	celHelper := grpcfed.NewCELTypeHelper(map[string]map[string]*celtypes.FieldType{
		"grpc.federation.private.ContentArgument": {
			"by_field":           grpcfed.NewCELFieldType(celtypes.StringType, "ByField"),
			"double_field":       grpcfed.NewCELFieldType(celtypes.DoubleType, "DoubleField"),
			"doubles_field":      grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.DoubleType), "DoublesField"),
			"float_field":        grpcfed.NewCELFieldType(celtypes.DoubleType, "FloatField"),
			"floats_field":       grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.DoubleType), "FloatsField"),
			"int32_field":        grpcfed.NewCELFieldType(celtypes.IntType, "Int32Field"),
			"int32s_field":       grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.IntType), "Int32SField"),
			"int64_field":        grpcfed.NewCELFieldType(celtypes.IntType, "Int64Field"),
			"int64s_field":       grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.IntType), "Int64SField"),
			"uint32_field":       grpcfed.NewCELFieldType(celtypes.UintType, "Uint32Field"),
			"uint32s_field":      grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.UintType), "Uint32SField"),
			"uint64_field":       grpcfed.NewCELFieldType(celtypes.UintType, "Uint64Field"),
			"uint64s_field":      grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.UintType), "Uint64SField"),
			"sint32_field":       grpcfed.NewCELFieldType(celtypes.IntType, "Sint32Field"),
			"sint32s_field":      grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.IntType), "Sint32SField"),
			"sint64_field":       grpcfed.NewCELFieldType(celtypes.IntType, "Sint64Field"),
			"sint64s_field":      grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.IntType), "Sint64SField"),
			"fixed32_field":      grpcfed.NewCELFieldType(celtypes.UintType, "Fixed32Field"),
			"fixed32s_field":     grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.UintType), "Fixed32SField"),
			"fixed64_field":      grpcfed.NewCELFieldType(celtypes.UintType, "Fixed64Field"),
			"fixed64s_field":     grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.UintType), "Fixed64SField"),
			"sfixed32_field":     grpcfed.NewCELFieldType(celtypes.IntType, "Sfixed32Field"),
			"sfixed32s_field":    grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.IntType), "Sfixed32SField"),
			"sfixed64_field":     grpcfed.NewCELFieldType(celtypes.IntType, "Sfixed64Field"),
			"sfixed64s_field":    grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.IntType), "Sfixed64SField"),
			"bool_field":         grpcfed.NewCELFieldType(celtypes.BoolType, "BoolField"),
			"bools_field":        grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.BoolType), "BoolsField"),
			"string_field":       grpcfed.NewCELFieldType(celtypes.StringType, "StringField"),
			"strings_field":      grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.StringType), "StringsField"),
			"byte_string_field":  grpcfed.NewCELFieldType(celtypes.BytesType, "ByteStringField"),
			"byte_strings_field": grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.BytesType), "ByteStringsField"),
			"enum_field":         grpcfed.NewCELFieldType(celtypes.IntType, "EnumField"),
			"enums_field":        grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.IntType), "EnumsField"),
			"env_field":          grpcfed.NewCELFieldType(celtypes.StringType, "EnvField"),
			"envs_field":         grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.StringType), "EnvsField"),
			"message_field":      grpcfed.NewCELFieldType(celtypes.NewObjectType("org.federation.Content"), "MessageField"),
			"messages_field":     grpcfed.NewCELFieldType(celtypes.NewListType(celtypes.NewObjectType("org.federation.Content")), "MessagesField"),
		},
		"grpc.federation.private.GetResponseArgument": {
			"id": grpcfed.NewCELFieldType(celtypes.StringType, "Id"),
		},
	})
	env, err := cel.NewCustomEnv(
		cel.StdLib(),
		cel.CustomTypeAdapter(celHelper.TypeAdapter()),
		cel.CustomTypeProvider(celHelper.TypeProvider()),
	)
	if err != nil {
		return nil, err
	}
	return &FederationService{
		cfg:          cfg,
		logger:       logger,
		errorHandler: errorHandler,
		env:          env,
		tracer:       otel.Tracer("org.federation.FederationService"),
		client: &FederationServiceDependentClientSet{
			Content_ContentServiceClient: Content_ContentServiceClient,
		},
	}, nil
}

// Get implements "org.federation.FederationService/Get" method.
func (s *FederationService) Get(ctx context.Context, req *GetRequest) (res *GetResponse, e error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.FederationService/Get")
	defer span.End()

	ctx = grpcfed.WithLogger(ctx, s.logger)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, debug.Stack())
			grpcfed.OutputErrorLog(ctx, s.logger, e)
		}
	}()
	res, err := s.resolve_Org_Federation_GetResponse(ctx, &Org_Federation_GetResponseArgument[*FederationServiceDependentClientSet]{
		Client: s.client,
		Id:     req.Id,
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, s.logger, err)
		return nil, err
	}
	return res, nil
}

// resolve_Org_Federation_Content resolve "org.federation.Content" message.
func (s *FederationService) resolve_Org_Federation_Content(ctx context.Context, req *Org_Federation_ContentArgument[*FederationServiceDependentClientSet]) (*Content, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.Content")
	defer span.End()

	s.logger.DebugContext(ctx, "resolve org.federation.Content", slog.Any("message_args", s.logvalue_Org_Federation_ContentArgument(req)))
	envOpts := []cel.EnvOption{cel.Variable(grpcfed.MessageArgumentVariableName, cel.ObjectType("grpc.federation.private.ContentArgument"))}
	evalValues := map[string]any{grpcfed.MessageArgumentVariableName: req}

	// create a message value to be returned.
	ret := &Content{}

	// field binding section.
	// (grpc.federation.field).alias = "by_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.by_field", envOpts, evalValues, reflect.TypeOf(""))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.ByField = _value.(string)
	}
	// (grpc.federation.field).alias = "double_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.double_field", envOpts, evalValues, reflect.TypeOf(float64(0)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.DoubleField = _value.(float64)
	}
	// (grpc.federation.field).alias = "doubles_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.doubles_field", envOpts, evalValues, reflect.TypeOf([]float64(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.DoublesField = _value.([]float64)
	}
	// (grpc.federation.field).alias = "float_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.float_field", envOpts, evalValues, reflect.TypeOf(float32(0)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.FloatField = _value.(float32)
	}
	// (grpc.federation.field).alias = "floats_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.floats_field", envOpts, evalValues, reflect.TypeOf([]float32(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.FloatsField = _value.([]float32)
	}
	// (grpc.federation.field).alias = "int32_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.int32_field", envOpts, evalValues, reflect.TypeOf(int32(0)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Int32Field = _value.(int32)
	}
	// (grpc.federation.field).alias = "int32s_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.int32s_field", envOpts, evalValues, reflect.TypeOf([]int32(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Int32SField = _value.([]int32)
	}
	// (grpc.federation.field).alias = "int64_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.int64_field", envOpts, evalValues, reflect.TypeOf(int64(0)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Int64Field = _value.(int64)
	}
	// (grpc.federation.field).alias = "int64s_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.int64s_field", envOpts, evalValues, reflect.TypeOf([]int64(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Int64SField = _value.([]int64)
	}
	// (grpc.federation.field).alias = "uint32_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.uint32_field", envOpts, evalValues, reflect.TypeOf(uint32(0)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Uint32Field = _value.(uint32)
	}
	// (grpc.federation.field).alias = "uint32s_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.uint32s_field", envOpts, evalValues, reflect.TypeOf([]uint32(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Uint32SField = _value.([]uint32)
	}
	// (grpc.federation.field).alias = "uint64_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.uint64_field", envOpts, evalValues, reflect.TypeOf(uint64(0)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Uint64Field = _value.(uint64)
	}
	// (grpc.federation.field).alias = "uint64s_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.uint64s_field", envOpts, evalValues, reflect.TypeOf([]uint64(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Uint64SField = _value.([]uint64)
	}
	// (grpc.federation.field).alias = "sint32_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.sint32_field", envOpts, evalValues, reflect.TypeOf(int32(0)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Sint32Field = _value.(int32)
	}
	// (grpc.federation.field).alias = "sint32s_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.sint32s_field", envOpts, evalValues, reflect.TypeOf([]int32(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Sint32SField = _value.([]int32)
	}
	// (grpc.federation.field).alias = "sint64_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.sint64_field", envOpts, evalValues, reflect.TypeOf(int64(0)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Sint64Field = _value.(int64)
	}
	// (grpc.federation.field).alias = "sint64s_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.sint64s_field", envOpts, evalValues, reflect.TypeOf([]int64(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Sint64SField = _value.([]int64)
	}
	// (grpc.federation.field).alias = "fixed32_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.fixed32_field", envOpts, evalValues, reflect.TypeOf(uint32(0)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Fixed32Field = _value.(uint32)
	}
	// (grpc.federation.field).alias = "fixed32s_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.fixed32s_field", envOpts, evalValues, reflect.TypeOf([]uint32(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Fixed32SField = _value.([]uint32)
	}
	// (grpc.federation.field).alias = "fixed64_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.fixed64_field", envOpts, evalValues, reflect.TypeOf(uint64(0)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Fixed64Field = _value.(uint64)
	}
	// (grpc.federation.field).alias = "fixed64s_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.fixed64s_field", envOpts, evalValues, reflect.TypeOf([]uint64(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Fixed64SField = _value.([]uint64)
	}
	// (grpc.federation.field).alias = "sfixed32_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.sfixed32_field", envOpts, evalValues, reflect.TypeOf(int32(0)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Sfixed32Field = _value.(int32)
	}
	// (grpc.federation.field).alias = "sfixed32s_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.sfixed32s_field", envOpts, evalValues, reflect.TypeOf([]int32(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Sfixed32SField = _value.([]int32)
	}
	// (grpc.federation.field).alias = "sfixed64_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.sfixed64_field", envOpts, evalValues, reflect.TypeOf(int64(0)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Sfixed64Field = _value.(int64)
	}
	// (grpc.federation.field).alias = "sfixed64s_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.sfixed64s_field", envOpts, evalValues, reflect.TypeOf([]int64(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Sfixed64SField = _value.([]int64)
	}
	// (grpc.federation.field).alias = "bool_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.bool_field", envOpts, evalValues, reflect.TypeOf(false))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.BoolField = _value.(bool)
	}
	// (grpc.federation.field).alias = "bools_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.bools_field", envOpts, evalValues, reflect.TypeOf([]bool(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.BoolsField = _value.([]bool)
	}
	// (grpc.federation.field).alias = "string_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.string_field", envOpts, evalValues, reflect.TypeOf(""))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.StringField = _value.(string)
	}
	// (grpc.federation.field).alias = "strings_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.strings_field", envOpts, evalValues, reflect.TypeOf([]string(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.StringsField = _value.([]string)
	}
	// (grpc.federation.field).alias = "byte_string_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.byte_string_field", envOpts, evalValues, reflect.TypeOf([]byte(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.ByteStringField = _value.([]byte)
	}
	// (grpc.federation.field).alias = "byte_strings_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.byte_strings_field", envOpts, evalValues, reflect.TypeOf([][]byte(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.ByteStringsField = _value.([][]byte)
	}
	// (grpc.federation.field).alias = "enum_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.enum_field", envOpts, evalValues, reflect.TypeOf(ContentType(0)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.EnumField = _value.(ContentType)
	}
	// (grpc.federation.field).alias = "enums_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.enums_field", envOpts, evalValues, reflect.TypeOf([]ContentType(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.EnumsField = _value.([]ContentType)
	}
	// (grpc.federation.field).alias = "env_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.env_field", envOpts, evalValues, reflect.TypeOf(""))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.EnvField = _value.(string)
	}
	// (grpc.federation.field).alias = "envs_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.envs_field", envOpts, evalValues, reflect.TypeOf([]string(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.EnvsField = _value.([]string)
	}
	// (grpc.federation.field).alias = "message_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.message_field", envOpts, evalValues, reflect.TypeOf((*Content)(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.MessageField = _value.(*Content)
	}
	// (grpc.federation.field).alias = "messages_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "$.messages_field", envOpts, evalValues, reflect.TypeOf([]*Content(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.MessagesField = _value.([]*Content)
	}

	s.logger.DebugContext(ctx, "resolved org.federation.Content", slog.Any("org.federation.Content", s.logvalue_Org_Federation_Content(ret)))
	return ret, nil
}

// resolve_Org_Federation_GetResponse resolve "org.federation.GetResponse" message.
func (s *FederationService) resolve_Org_Federation_GetResponse(ctx context.Context, req *Org_Federation_GetResponseArgument[*FederationServiceDependentClientSet]) (*GetResponse, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.GetResponse")
	defer span.End()

	s.logger.DebugContext(ctx, "resolve org.federation.GetResponse", slog.Any("message_args", s.logvalue_Org_Federation_GetResponseArgument(req)))
	var (
		sg            singleflight.Group
		valueContent  *content.Content
		valueContent2 *Content
		valueMu       sync.RWMutex
	)
	envOpts := []cel.EnvOption{cel.Variable(grpcfed.MessageArgumentVariableName, cel.ObjectType("grpc.federation.private.GetResponseArgument"))}
	evalValues := map[string]any{grpcfed.MessageArgumentVariableName: req}
	// A tree view of message dependencies is shown below.
	/*
	   GetContent ─┐
	     content2 ─┤
	*/
	eg, ctx1 := errgroup.WithContext(ctx)

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   resolver: {
		     method: "content.ContentService/GetContent"
		     request: [
		       { field: "by_field", by: "$.id" },
		       { field: "double_field", double: 1.23 },
		       { field: "doubles_field", doubles: [4.56, 7.89] },
		       { field: "float_field", float: 4.56 },
		       { field: "floats_field", floats: [7.89, 1.23] },
		       { field: "int32_field", int32: -1 },
		       { field: "int32s_field", int32s: [-2, -3] },
		       { field: "int64_field", int64: -4 },
		       { field: "int64s_field", int64s: [-5, -6] },
		       { field: "uint32_field", uint32: 1 },
		       { field: "uint32s_field", uint32s: [2, 3] },
		       { field: "uint64_field", uint64: 4 },
		       { field: "uint64s_field", uint64s: [5, 6] },
		       { field: "sint32_field", sint32: -7 },
		       { field: "sint32s_field", sint32s: [-8, -9] },
		       { field: "sint64_field", sint64: -10 },
		       { field: "sint64s_field", sint64s: [-11, -12] },
		       { field: "fixed32_field", fixed32: 10 },
		       { field: "fixed32s_field", fixed32s: [11, 12] },
		       { field: "fixed64_field", fixed64: 13 },
		       { field: "fixed64s_field", fixed64s: [14, 15] },
		       { field: "sfixed32_field", sfixed32: -14 },
		       { field: "sfixed32s_field", sfixed32s: [-15, -16] },
		       { field: "sfixed64_field", sfixed64: -17 },
		       { field: "sfixed64s_field", sfixed64s: [-18, -19] },
		       { field: "bool_field", bool: true },
		       { field: "bools_field", bools: [true, false] },
		       { field: "string_field", string: "foo" },
		       { field: "strings_field", strings: ["hello", "world"] },
		       { field: "byte_string_field", byte_string: "foo" },
		       { field: "byte_strings_field", byte_strings: ["foo", "bar"] },
		       { field: "enum_field", enum: "content.CONTENT_TYPE_1" },
		       { field: "enums_field", enums: ["content.CONTENT_TYPE_2", "content.CONTENT_TYPE_3"] },
		       { field: "env_field", env: "foo" },
		       { field: "envs_field", envs: ["foo", "bar"] },
		       { field: "message_field", message: { name: "content.Content", fields: [{ field: "bool_field", bool: true }, { field: "bools_field", bools: [true, false] }, { field: "byte_string_field", byte_string: "foo" }, { field: "byte_strings_field", byte_strings: ["foo", "bar"] }, { field: "double_field", double: 1.23 }, { field: "doubles_field", doubles: [4.56, 7.89] }, { field: "enum_field", enum: "content.CONTENT_TYPE_1" }, { field: "enums_field", enums: ["content.CONTENT_TYPE_2", "content.CONTENT_TYPE_3"] }, { field: "env_field", env: "foo" }, { field: "envs_field", envs: ["foo", "bar"] }, { field: "fixed32_field", fixed32: 10 }, { field: "fixed32s_field", fixed32s: [11, 12] }, { field: "fixed64_field", fixed64: 13 }, { field: "fixed64s_field", fixed64s: [14, 15] }, { field: "float_field", float: 4.56 }, { field: "floats_field", floats: [7.89, 1.23] }, { field: "int32_field", int32: -1 }, { field: "int32s_field", int32s: [-2, -3] }, { field: "int64_field", int64: -4 }, { field: "int64s_field", int64s: [-5, -6] }, { field: "message_field", message: { name: "content.Content", fields: [] } }, { field: "messages_field", messages: [{ name: "content.Content", fields: [] }, { name: "content.Content", fields: [] }] }, { field: "sfixed32_field", sfixed32: -14 }, { field: "sfixed32s_field", sfixed32s: [-15, -16] }, { field: "sfixed64_field", sfixed64: -17 }, { field: "sfixed64s_field", sfixed64s: [-18, -19] }, { field: "sint32_field", sint32: -7 }, { field: "sint32s_field", sint32s: [-8, -9] }, { field: "sint64_field", sint64: -10 }, { field: "sint64s_field", sint64s: [-11, -12] }, { field: "string_field", string: "foo" }, { field: "strings_field", strings: ["hello", "world"] }, { field: "uint32_field", uint32: 1 }, { field: "uint32s_field", uint32s: [2, 3] }, { field: "uint64_field", uint64: 4 }, { field: "uint64s_field", uint64s: [5, 6] }] } },
		       { field: "messages_field", messages: [{ name: "content.Content", fields: [] }, { name: "content.Content", fields: [] }] }
		     ]
		     response { name: "content", field: "content" }
		   }
		*/
		resGetContentResponseIface, err, _ := sg.Do("content.ContentService/GetContent", func() (any, error) {
			valueMu.RLock()
			args := &content.GetContentRequest{
				DoubleField:      1.23,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      // { field: "double_field", double: 1.23 }
				DoublesField:     []float64{4.56, 7.89}{ field: "doubles_field", doubles: [4.56, 7.89] }
				FloatField:       4.56,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      // { field: "float_field", float: 4.56 }
				FloatsField:      []float32{7.89, 1.23}{ field: "floats_field", floats: [7.89, 1.23] }
				Int32Field{ field: "int32_field", int32: -1 }
				Int32SField:      []int32{-2, -3}{ field: "int32s_field", int32s: [-2, -3] }
				Int64Field{ field: "int64_field", int64: -4 }
				Int64SField:      []int64{-5, -6}{ field: "int64s_field", int64s: [-5, -6] }
				Uint32Field{ field: "uint32_field", uint32: 1 }
				Uint32SField:     []uint32{2, 3}{ field: "uint32s_field", uint32s: [2, 3] }
				Uint64Field{ field: "uint64_field", uint64: 4 }
				Uint64SField:     []uint64{5, 6}{ field: "uint64s_field", uint64s: [5, 6] }
				Sint32Field:      -7,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        // { field: "sint32_field", sint32: -7 }
				Sint32SField:     []int32{-8, -9}{ field: "sint32s_field", sint32s: [-8, -9] }
				Sint64Field{ field: "sint64_field", sint64: -10 }
				Sint64SField:     []int64{-11, -12}{ field: "sint64s_field", sint64s: [-11, -12] }
				Fixed32Field{ field: "fixed32_field", fixed32: 10 }
				Fixed32SField:    []uint32{11, 12}{ field: "fixed32s_field", fixed32s: [11, 12] }
				Fixed64Field{ field: "fixed64_field", fixed64: 13 }
				Fixed64SField:    []uint64{14, 15}{ field: "fixed64s_field", fixed64s: [14, 15] }
				Sfixed32Field{ field: "sfixed32_field", sfixed32: -14 }
				Sfixed32SField:   []int32{-15, -16}{ field: "sfixed32s_field", sfixed32s: [-15, -16] }
				Sfixed64Field{ field: "sfixed64_field", sfixed64: -17 }
				Sfixed64SField:   []int64{-18, -19}{ field: "sfixed64s_field", sfixed64s: [-18, -19] }
				BoolField:        true{ field: "bool_field", bool: true }
				BoolsField:       []bool{true, false}{ field: "bools_field", bools: [true, false] }
				StringField:      "foo{ field: "string_field", string: "foo" }
				StringsField:     []string{"hello", "world"}{ field: "strings_field", strings: ["hello", "world"] }
				ByteStringField:  []byte{102, 111, 111}{ field: "byte_string_field", byte_string: "foo" }
				ByteStringsField: [][]byte{[]byte{102, 111, 111}, []byte{98, 97, 114}}{ field: "byte_strings_field", byte_strings: ["foo", "bar"] }
				EnumField:        content.ContentType{ field: "enum_field", enum: "content.CONTENT_TYPE_1" }
				EnumsField:       []content.ContentType{content.ContentType_CONTENT_TYPE_2, content.ContentType_CONTENT_TYPE_3}{ field: "enums_field", enums: ["content.CONTENT_TYPE_2", "content.CONTENT_TYPE_3"] }
				EnvField:         os.Getenv("foo{ field: "env_field", env: "foo" }
				EnvsField:        []string{os.Getenv("foo"), os.Getenv("bar")},                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              // { field: "envs_field", envs: ["foo", "bar"] }
				MessageField:     &content.Content{DoubleField: 1.23, DoublesField: []float64{4.56, 7.89}, FloatField: 4.56, FloatsField: []float32{7.89, 1.23}, Int32Field: -1, Int32SField: []int32{-2, -3}, Int64Field: -4, Int64SField: []int64{-5, -6}, Uint32Field: 1, Uint32SField: []uint32{2, 3}, Uint64Field: 4, Uint64SField: []uint64{5, 6}, Sint32Field: -7, Sint32SField: []int32{-8, -9}, Sint64Field: -10, Sint64SField: []int64{-11, -12}, Fixed32Field: 10, Fixed32SField: []uint32{11, 12}, Fixed64Field: 13, Fixed64SField: []uint64{14, 15}, Sfixed32Field: -14, Sfixed32SField: []int32{-15, -16}, Sfixed64Field: -17, Sfixed64SField: []int64{-18, -19}, BoolField: true, BoolsField: []bool{true, false}, StringField: "foo", StringsField: []string{"hello", "world"}, ByteStringField: []byte{102, 111, 111}, ByteStringsField: [][]byte{[]byte{102, 111, 111}, []byte{98, 97, 114}}, EnumField: content.ContentType_CONTENT_TYPE_1, EnumsField: []content.ContentType{content.ContentType_CONTENT_TYPE_2, content.ContentType_CONTENT_TYPE_3}, EnvField: os.Getenv("foo"), EnvsField: []string{os.Getenv("foo"), os.Getenv("bar")}, MessageField: &content.Content{}, MessagesField: []*content.Content{&content.Content{}, &content.Content{}}}, // { field: "message_field", message: { name: "content.Content", fields: [{ field: "bool_field", bool: true }, { field: "bools_field", bools: [true, false] }, { field: "byte_string_field", byte_string: "foo" }, { field: "byte_strings_field", byte_strings: ["foo", "bar"] }, { field: "double_field", double: 1.23 }, { field: "doubles_field", doubles: [4.56, 7.89] }, { field: "enum_field", enum: "content.CONTENT_TYPE_1" }, { field: "enums_field", enums: ["content.CONTENT_TYPE_2", "content.CONTENT_TYPE_3"] }, { field: "env_field", env: "foo" }, { field: "envs_field", envs: ["foo", "bar"] }, { field: "fixed32_field", fixed32: 10 }, { field: "fixed32s_field", fixed32s: [11, 12] }, { field: "fixed64_field", fixed64: 13 }, { field: "fixed64s_field", fixed64s: [14, 15] }, { field: "float_field", float: 4.56 }, { field: "floats_field", floats: [7.89, 1.23] }, { field: "int32_field", int32: -1 }, { field: "int32s_field", int32s: [-2, -3] }, { field: "int64_field", int64: -4 }, { field: "int64s_field", int64s: [-5, -6] }, { field: "message_field", message: { name: "content.Content", fields: [] } }, { field: "messages_field", messages: [{ name: "content.Content", fields: [] }, { name: "content.Content", fields: [] }] }, { field: "sfixed32_field", sfixed32: -14 }, { field: "sfixed32s_field", sfixed32s: [-15, -16] }, { field: "sfixed64_field", sfixed64: -17 }, { field: "sfixed64s_field", sfixed64s: [-18, -19] }, { field: "sint32_field", sint32: -7 }, { field: "sint32s_field", sint32s: [-8, -9] }, { field: "sint64_field", sint64: -10 }, { field: "sint64s_field", sint64s: [-11, -12] }, { field: "string_field", string: "foo" }, { field: "strings_field", strings: ["hello", "world"] }, { field: "uint32_field", uint32: 1 }, { field: "uint32s_field", uint32s: [2, 3] }, { field: "uint64_field", uint64: 4 }, { field: "uint64s_field", uint64s: [5, 6] }] } }
				MessagesField:    []*content.Content{&content.Content{}, &content.Content{}}{ field: "messages_field", messages: [{ name: "content.Content", fields: [] }, { name: "content.Content", fields: [] }] }
			}
			// { field: "by_field", by: "$.id" }
			{
				_value, err := grpcfed.EvalCEL(s.env, "$.id", envOpts, evalValues, reflect.TypeOf(""))
				if err != nil {
					grpcfed.RecordErrorToSpan(ctx, err)
					return nil, err
				}
				args.ByField = _value.(string)
			}
			valueMu.RUnlock()
			return s.client.Content_ContentServiceClient.GetContent(ctx1, args)
		})
		if err != nil {
			if err := s.errorHandler(ctx1, FederationService_DependentMethod_Content_ContentService_GetContent, err); err != nil {
				grpcfed.RecordErrorToSpan(ctx, err)
				return nil, err
			}
		}
		resGetContentResponse := resGetContentResponseIface.(*content.GetContentResponse)
		valueMu.Lock()
		valueContent = resGetContentResponse.GetContent() // { name: "content", field: "content" }
		envOpts = append(envOpts, cel.Variable("content", cel.ObjectType("content.Content")))
		evalValues["content"] = valueContent
		valueMu.Unlock()
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   {
		     name: "content2"
		     message: "Content"
		     args: [
		       { name: "by_field", by: "$.id" },
		       { name: "double_field", double: 1.23 },
		       { name: "doubles_field", doubles: [4.56, 7.89] },
		       { name: "float_field", float: 4.56 },
		       { name: "floats_field", floats: [7.89, 1.23] },
		       { name: "int32_field", int32: -1 },
		       { name: "int32s_field", int32s: [-2, -3] },
		       { name: "int64_field", int64: -4 },
		       { name: "int64s_field", int64s: [-5, -6] },
		       { name: "uint32_field", uint32: 1 },
		       { name: "uint32s_field", uint32s: [2, 3] },
		       { name: "uint64_field", uint64: 4 },
		       { name: "uint64s_field", uint64s: [5, 6] },
		       { name: "sint32_field", sint32: -7 },
		       { name: "sint32s_field", sint32s: [-8, -9] },
		       { name: "sint64_field", sint64: -10 },
		       { name: "sint64s_field", sint64s: [-11, -12] },
		       { name: "fixed32_field", fixed32: 10 },
		       { name: "fixed32s_field", fixed32s: [11, 12] },
		       { name: "fixed64_field", fixed64: 13 },
		       { name: "fixed64s_field", fixed64s: [14, 15] },
		       { name: "sfixed32_field", sfixed32: -14 },
		       { name: "sfixed32s_field", sfixed32s: [-15, -16] },
		       { name: "sfixed64_field", sfixed64: -17 },
		       { name: "sfixed64s_field", sfixed64s: [-18, -19] },
		       { name: "bool_field", bool: true },
		       { name: "bools_field", bools: [true, false] },
		       { name: "string_field", string: "foo" },
		       { name: "strings_field", strings: ["hello", "world"] },
		       { name: "byte_string_field", byte_string: "foo" },
		       { name: "byte_strings_field", byte_strings: ["foo", "bar"] },
		       { name: "enum_field", enum: "org.federation.CONTENT_TYPE_1" },
		       { name: "enums_field", enums: ["org.federation.CONTENT_TYPE_2", "org.federation.CONTENT_TYPE_3"] },
		       { name: "env_field", env: "foo" },
		       { name: "envs_field", envs: ["foo", "bar"] },
		       { name: "message_field", message: { name: "org.federation.Content", fields: [{ field: "bool_field", bool: true }, { field: "bools_field", bools: [true, false] }, { field: "byte_string_field", byte_string: "foo" }, { field: "byte_strings_field", byte_strings: ["foo", "bar"] }, { field: "double_field", double: 1.23 }, { field: "doubles_field", doubles: [4.56, 7.89] }, { field: "enum_field", enum: "org.federation.CONTENT_TYPE_1" }, { field: "enums_field", enums: ["org.federation.CONTENT_TYPE_2", "org.federation.CONTENT_TYPE_3"] }, { field: "env_field", env: "foo" }, { field: "envs_field", envs: ["foo", "bar"] }, { field: "fixed32_field", fixed32: 10 }, { field: "fixed32s_field", fixed32s: [11, 12] }, { field: "fixed64_field", fixed64: 13 }, { field: "fixed64s_field", fixed64s: [14, 15] }, { field: "float_field", float: 4.56 }, { field: "floats_field", floats: [7.89, 1.23] }, { field: "int32_field", int32: -1 }, { field: "int32s_field", int32s: [-2, -3] }, { field: "int64_field", int64: -4 }, { field: "int64s_field", int64s: [-5, -6] }, { field: "messages_field", messages: [{ name: "org.federation.Content", fields: [] }, { name: "org.federation.Content", fields: [] }] }, { field: "sfixed32_field", sfixed32: -14 }, { field: "sfixed32s_field", sfixed32s: [-15, -16] }, { field: "sfixed64_field", sfixed64: -17 }, { field: "sfixed64s_field", sfixed64s: [-18, -19] }, { field: "sint32_field", sint32: -7 }, { field: "sint32s_field", sint32s: [-8, -9] }, { field: "sint64_field", sint64: -10 }, { field: "sint64s_field", sint64s: [-11, -12] }, { field: "string_field", string: "foo" }, { field: "strings_field", strings: ["hello", "world"] }, { field: "uint32_field", uint32: 1 }, { field: "uint32s_field", uint32s: [2, 3] }, { field: "uint64_field", uint64: 4 }, { field: "uint64s_field", uint64s: [5, 6] }] } },
		       { name: "messages_field", messages: [{ name: "org.federation.Content", fields: [] }, { name: "org.federation.Content", fields: [] }] }
		     ]
		   }
		*/
		resContentIface, err, _ := sg.Do("content2_org.federation.Content", func() (any, error) {
			valueMu.RLock()
			args := &Org_Federation_ContentArgument[*FederationServiceDependentClientSet]{
				Client:           s.client,
				DoubleField{ name: "double_field", double: 1.23 }
				DoublesField:     []float64{4.56, 7.89}{ name: "doubles_field", doubles: [4.56, 7.89] }
				FloatField:       4.56,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    // { name: "float_field", float: 4.56 }
				FloatsField:      []float32{7.89, 1.23}{ name: "floats_field", floats: [7.89, 1.23] }
				Int32Field{ name: "int32_field", int32: -1 }
				Int32SField:      []int32{-2, -3}{ name: "int32s_field", int32s: [-2, -3] }
				Int64Field{ name: "int64_field", int64: -4 }
				Int64SField:      []int64{-5, -6}{ name: "int64s_field", int64s: [-5, -6] }
				Uint32Field{ name: "uint32_field", uint32: 1 }
				Uint32SField:     []uint32{2, 3}{ name: "uint32s_field", uint32s: [2, 3] }
				Uint64Field{ name: "uint64_field", uint64: 4 }
				Uint64SField:     []uint64{5, 6},                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          // { name: "uint64s_field", uint64s: [5, 6] }
				Sint32Field{ name: "sint32_field", sint32: -7 }
				Sint32SField:     []int32{-8, -9}{ name: "sint32s_field", sint32s: [-8, -9] }
				Sint64Field:      -10,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     // { name: "sint64_field", sint64: -10 }
				Sint64SField:     []int64{-11, -12}{ name: "sint64s_field", sint64s: [-11, -12] }
				Fixed32Field{ name: "fixed32_field", fixed32: 10 }
				Fixed32SField:    []uint32{11, 12}{ name: "fixed32s_field", fixed32s: [11, 12] }
				Fixed64Field{ name: "fixed64_field", fixed64: 13 }
				Fixed64SField:    []uint64{14, 15}{ name: "fixed64s_field", fixed64s: [14, 15] }
				Sfixed32Field{ name: "sfixed32_field", sfixed32: -14 }
				Sfixed32SField:   []int32{-15, -16}{ name: "sfixed32s_field", sfixed32s: [-15, -16] }
				Sfixed64Field{ name: "sfixed64_field", sfixed64: -17 }
				Sfixed64SField:   []int64{-18, -19}{ name: "sfixed64s_field", sfixed64s: [-18, -19] }
				BoolField:        true{ name: "bool_field", bool: true }
				BoolsField:       []bool{true, false}{ name: "bools_field", bools: [true, false] }
				StringField:      "foo",                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   // { name: "string_field", string: "foo" }
				StringsField:     []string{"hello", "world"}{ name: "strings_field", strings: ["hello", "world"] }
				ByteStringField:  []byte{102, 111, 111}{ name: "byte_string_field", byte_string: "foo" }
				ByteStringsField: [][]byte{[]byte{102, 111, 111}, []byte{98, 97, 114}}{ name: "byte_strings_field", byte_strings: ["foo", "bar"] }
				EnumField:        ContentType{ name: "enum_field", enum: "org.federation.CONTENT_TYPE_1" }
				EnumsField:       []ContentType{ContentType_CONTENT_TYPE_2, ContentType_CONTENT_TYPE_3}{ name: "enums_field", enums: ["org.federation.CONTENT_TYPE_2", "org.federation.CONTENT_TYPE_3"] }
				EnvField:         os.Getenv("foo{ name: "env_field", env: "foo" }
				EnvsField:        []string{os.Getenv("foo"), os.Getenv("bar")}{ name: "envs_field", envs: ["foo", "bar"] }
				MessageField:     &Content{DoubleField: 1.23, DoublesField: []float64{4.56, 7.89}, FloatField: 4.56, FloatsField: []float32{7.89, 1.23}, Int32Field: -1, Int32SField: []int32{-2, -3}, Int64Field: -4, Int64SField: []int64{-5, -6}, Uint32Field: 1, Uint32SField: []uint32{2, 3}, Uint64Field: 4, Uint64SField: []uint64{5, 6}, Sint32Field: -7, Sint32SField: []int32{-8, -9}, Sint64Field: -10, Sint64SField: []int64{-11, -12}, Fixed32Field: 10, Fixed32SField: []uint32{11, 12}, Fixed64Field: 13, Fixed64SField: []uint64{14, 15}, Sfixed32Field: -14, Sfixed32SField: []int32{-15, -16}, Sfixed64Field: -17, Sfixed64SField: []int64{-18, -19}, BoolField: true, BoolsField: []bool{true, false}, StringField: "foo", StringsField: []string{"hello", "world"}, ByteStringField: []byte{102, 111, 111}, ByteStringsField: [][]byte{[]byte{102, 111, 111}, []byte{98, 97, 114}}, EnumField: ContentType_CONTENT_TYPE_1, EnumsField: []ContentType{ContentType_CONTENT_TYPE_2, ContentType_CONTENT_TYPE_3}, EnvField: os.Getenv("foo"), EnvsField: []string{os.Getenv("foo"), os.Getenv("bar")}, MessagesField: []*Content{&Content{}, &Content{}}}, // { name: "message_field", message: { name: "org.federation.Content", fields: [{ field: "bool_field", bool: true }, { field: "bools_field", bools: [true, false] }, { field: "byte_string_field", byte_string: "foo" }, { field: "byte_strings_field", byte_strings: ["foo", "bar"] }, { field: "double_field", double: 1.23 }, { field: "doubles_field", doubles: [4.56, 7.89] }, { field: "enum_field", enum: "org.federation.CONTENT_TYPE_1" }, { field: "enums_field", enums: ["org.federation.CONTENT_TYPE_2", "org.federation.CONTENT_TYPE_3"] }, { field: "env_field", env: "foo" }, { field: "envs_field", envs: ["foo", "bar"] }, { field: "fixed32_field", fixed32: 10 }, { field: "fixed32s_field", fixed32s: [11, 12] }, { field: "fixed64_field", fixed64: 13 }, { field: "fixed64s_field", fixed64s: [14, 15] }, { field: "float_field", float: 4.56 }, { field: "floats_field", floats: [7.89, 1.23] }, { field: "int32_field", int32: -1 }, { field: "int32s_field", int32s: [-2, -3] }, { field: "int64_field", int64: -4 }, { field: "int64s_field", int64s: [-5, -6] }, { field: "messages_field", messages: [{ name: "org.federation.Content", fields: [] }, { name: "org.federation.Content", fields: [] }] }, { field: "sfixed32_field", sfixed32: -14 }, { field: "sfixed32s_field", sfixed32s: [-15, -16] }, { field: "sfixed64_field", sfixed64: -17 }, { field: "sfixed64s_field", sfixed64s: [-18, -19] }, { field: "sint32_field", sint32: -7 }, { field: "sint32s_field", sint32s: [-8, -9] }, { field: "sint64_field", sint64: -10 }, { field: "sint64s_field", sint64s: [-11, -12] }, { field: "string_field", string: "foo" }, { field: "strings_field", strings: ["hello", "world"] }, { field: "uint32_field", uint32: 1 }, { field: "uint32s_field", uint32s: [2, 3] }, { field: "uint64_field", uint64: 4 }, { field: "uint64s_field", uint64s: [5, 6] }] } }
				MessagesField:    []*Content{&Content{}, &Content{}}{ name: "messages_field", messages: [{ name: "org.federation.Content", fields: [] }, { name: "org.federation.Content", fields: [] }] }
			}
			// { name: "by_field", by: "$.id" }
			{
				_value, err := grpcfed.EvalCEL(s.env, "$.id", envOpts, evalValues, reflect.TypeOf(""))
				if err != nil {
					grpcfed.RecordErrorToSpan(ctx, err)
					return nil, err
				}
				args.ByField = _value.(string)
			}
			valueMu.RUnlock()
			return s.resolve_Org_Federation_Content(ctx1, args)
		})
		if err != nil {
			return nil, err
		}
		resContent := resContentIface.(*Content)
		valueMu.Lock()
		valueContent2 = resContent // { name: "content2", message: "Content" ... }
		envOpts = append(envOpts, cel.Variable("content2", cel.ObjectType("org.federation.Content")))
		evalValues["content2"] = valueContent2
		valueMu.Unlock()
		return nil, nil
	})

	if err := eg.Wait(); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Content = valueContent
	req.Content2 = valueContent2

	// create a message value to be returned.
	ret := &GetResponse{}

	// field binding section.
	// (grpc.federation.field).by = "content"
	{
		_value, err := grpcfed.EvalCEL(s.env, "content", envOpts, evalValues, reflect.TypeOf((*content.Content)(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Content = s.cast_Content_Content__to__Org_Federation_Content(_value.(*content.Content))
	}
	// (grpc.federation.field).by = "content2"
	{
		_value, err := grpcfed.EvalCEL(s.env, "content2", envOpts, evalValues, reflect.TypeOf((*Content)(nil)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Content2 = _value.(*Content)
	}
	// (grpc.federation.field).by = "content.int32_field + content.sint32_field + content2.int64_field + content2.sint64_field"
	{
		_value, err := grpcfed.EvalCEL(s.env, "content.int32_field + content.sint32_field + content2.int64_field + content2.sint64_field", envOpts, evalValues, reflect.TypeOf(int64(0)))
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.CelExpr = _value.(int64)
	}

	s.logger.DebugContext(ctx, "resolved org.federation.GetResponse", slog.Any("org.federation.GetResponse", s.logvalue_Org_Federation_GetResponse(ret)))
	return ret, nil
}

// cast_Content_ContentType__to__Org_Federation_ContentType cast from "content.ContentType" to "org.federation.ContentType".
func (s *FederationService) cast_Content_ContentType__to__Org_Federation_ContentType(from content.ContentType) ContentType {
	switch from {
	case content.ContentType_CONTENT_TYPE_1:
		return ContentType_CONTENT_TYPE_1
	case content.ContentType_CONTENT_TYPE_2:
		return ContentType_CONTENT_TYPE_2
	case content.ContentType_CONTENT_TYPE_3:
		return ContentType_CONTENT_TYPE_3
	default:
		return 0
	}
}

// cast_Content_Content__to__Org_Federation_Content cast from "content.Content" to "org.federation.Content".
func (s *FederationService) cast_Content_Content__to__Org_Federation_Content(from *content.Content) *Content {
	if from == nil {
		return nil
	}

	return &Content{
		ByField:          from.GetByField(),
		DoubleField:      from.GetDoubleField(),
		DoublesField:     from.GetDoublesField(),
		FloatField:       from.GetFloatField(),
		FloatsField:      from.GetFloatsField(),
		Int32Field:       from.GetInt32Field(),
		Int32SField:      from.GetInt32SField(),
		Int64Field:       from.GetInt64Field(),
		Int64SField:      from.GetInt64SField(),
		Uint32Field:      from.GetUint32Field(),
		Uint32SField:     from.GetUint32SField(),
		Uint64Field:      from.GetUint64Field(),
		Uint64SField:     from.GetUint64SField(),
		Sint32Field:      from.GetSint32Field(),
		Sint32SField:     from.GetSint32SField(),
		Sint64Field:      from.GetSint64Field(),
		Sint64SField:     from.GetSint64SField(),
		Fixed32Field:     from.GetFixed32Field(),
		Fixed32SField:    from.GetFixed32SField(),
		Fixed64Field:     from.GetFixed64Field(),
		Fixed64SField:    from.GetFixed64SField(),
		Sfixed32Field:    from.GetSfixed32Field(),
		Sfixed32SField:   from.GetSfixed32SField(),
		Sfixed64Field:    from.GetSfixed64Field(),
		Sfixed64SField:   from.GetSfixed64SField(),
		BoolField:        from.GetBoolField(),
		BoolsField:       from.GetBoolsField(),
		StringField:      from.GetStringField(),
		StringsField:     from.GetStringsField(),
		ByteStringField:  from.GetByteStringField(),
		ByteStringsField: from.GetByteStringsField(),
		EnumField:        s.cast_Content_ContentType__to__Org_Federation_ContentType(from.GetEnumField()),
		EnumsField:       s.cast_repeated_Content_ContentType__to__repeated_Org_Federation_ContentType(from.GetEnumsField()),
		EnvField:         from.GetEnvField(),
		EnvsField:        from.GetEnvsField(),
		MessageField:     s.cast_Content_Content__to__Org_Federation_Content(from.GetMessageField()),
		MessagesField:    s.cast_repeated_Content_Content__to__repeated_Org_Federation_Content(from.GetMessagesField()),
	}
}

// cast_repeated_Content_ContentType__to__repeated_Org_Federation_ContentType cast from "repeated content.ContentType" to "repeated org.federation.ContentType".
func (s *FederationService) cast_repeated_Content_ContentType__to__repeated_Org_Federation_ContentType(from []content.ContentType) []ContentType {
	ret := make([]ContentType, 0, len(from))
	for _, v := range from {
		ret = append(ret, s.cast_Content_ContentType__to__Org_Federation_ContentType(v))
	}
	return ret
}

// cast_repeated_Content_Content__to__repeated_Org_Federation_Content cast from "repeated content.Content" to "repeated org.federation.Content".
func (s *FederationService) cast_repeated_Content_Content__to__repeated_Org_Federation_Content(from []*content.Content) []*Content {
	ret := make([]*Content, 0, len(from))
	for _, v := range from {
		ret = append(ret, s.cast_Content_Content__to__Org_Federation_Content(v))
	}
	return ret
}

func (s *FederationService) logvalue_Org_Federation_Content(v *Content) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("by_field", v.GetByField()),
		slog.Float64("double_field", v.GetDoubleField()),
		slog.Any("doubles_field", v.GetDoublesField()),
		slog.Float64("float_field", float64(v.GetFloatField())),
		slog.Any("floats_field", v.GetFloatsField()),
		slog.Int64("int32_field", int64(v.GetInt32Field())),
		slog.Any("int32s_field", v.GetInt32SField()),
		slog.Int64("int64_field", v.GetInt64Field()),
		slog.Any("int64s_field", v.GetInt64SField()),
		slog.Uint64("uint32_field", uint64(v.GetUint32Field())),
		slog.Any("uint32s_field", v.GetUint32SField()),
		slog.Uint64("uint64_field", v.GetUint64Field()),
		slog.Any("uint64s_field", v.GetUint64SField()),
		slog.Int64("sint32_field", int64(v.GetSint32Field())),
		slog.Any("sint32s_field", v.GetSint32SField()),
		slog.Int64("sint64_field", v.GetSint64Field()),
		slog.Any("sint64s_field", v.GetSint64SField()),
		slog.Uint64("fixed32_field", uint64(v.GetFixed32Field())),
		slog.Any("fixed32s_field", v.GetFixed32SField()),
		slog.Uint64("fixed64_field", v.GetFixed64Field()),
		slog.Any("fixed64s_field", v.GetFixed64SField()),
		slog.Int64("sfixed32_field", int64(v.GetSfixed32Field())),
		slog.Any("sfixed32s_field", v.GetSfixed32SField()),
		slog.Int64("sfixed64_field", v.GetSfixed64Field()),
		slog.Any("sfixed64s_field", v.GetSfixed64SField()),
		slog.Bool("bool_field", v.GetBoolField()),
		slog.Any("bools_field", v.GetBoolsField()),
		slog.String("string_field", v.GetStringField()),
		slog.Any("strings_field", v.GetStringsField()),
		slog.String("byte_string_field", string(v.GetByteStringField())),
		slog.Any("byte_strings_field", v.GetByteStringsField()),
		slog.String("enum_field", s.logvalue_Org_Federation_ContentType(v.GetEnumField()).String()),
		slog.Any("enums_field", s.logvalue_repeated_Org_Federation_ContentType(v.GetEnumsField())),
		slog.String("env_field", v.GetEnvField()),
		slog.Any("envs_field", v.GetEnvsField()),
		slog.Any("message_field", s.logvalue_Org_Federation_Content(v.GetMessageField())),
		slog.Any("messages_field", s.logvalue_repeated_Org_Federation_Content(v.GetMessagesField())),
	)
}

func (s *FederationService) logvalue_Org_Federation_ContentArgument(v *Org_Federation_ContentArgument[*FederationServiceDependentClientSet]) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("by_field", v.ByField),
		slog.Float64("double_field", v.DoubleField),
		slog.Any("doubles_field", v.DoublesField),
		slog.Float64("float_field", float64(v.FloatField)),
		slog.Any("floats_field", v.FloatsField),
		slog.Int64("int32_field", int64(v.Int32Field)),
		slog.Any("int32s_field", v.Int32SField),
		slog.Int64("int64_field", v.Int64Field),
		slog.Any("int64s_field", v.Int64SField),
		slog.Uint64("uint32_field", uint64(v.Uint32Field)),
		slog.Any("uint32s_field", v.Uint32SField),
		slog.Uint64("uint64_field", v.Uint64Field),
		slog.Any("uint64s_field", v.Uint64SField),
		slog.Int64("sint32_field", int64(v.Sint32Field)),
		slog.Any("sint32s_field", v.Sint32SField),
		slog.Int64("sint64_field", v.Sint64Field),
		slog.Any("sint64s_field", v.Sint64SField),
		slog.Uint64("fixed32_field", uint64(v.Fixed32Field)),
		slog.Any("fixed32s_field", v.Fixed32SField),
		slog.Uint64("fixed64_field", v.Fixed64Field),
		slog.Any("fixed64s_field", v.Fixed64SField),
		slog.Int64("sfixed32_field", int64(v.Sfixed32Field)),
		slog.Any("sfixed32s_field", v.Sfixed32SField),
		slog.Int64("sfixed64_field", v.Sfixed64Field),
		slog.Any("sfixed64s_field", v.Sfixed64SField),
		slog.Bool("bool_field", v.BoolField),
		slog.Any("bools_field", v.BoolsField),
		slog.String("string_field", v.StringField),
		slog.Any("strings_field", v.StringsField),
		slog.String("byte_string_field", string(v.ByteStringField)),
		slog.Any("byte_strings_field", v.ByteStringsField),
		slog.String("enum_field", s.logvalue_Org_Federation_ContentType(v.EnumField).String()),
		slog.Any("enums_field", s.logvalue_repeated_Org_Federation_ContentType(v.EnumsField)),
		slog.String("env_field", v.EnvField),
		slog.Any("envs_field", v.EnvsField),
		slog.Any("message_field", s.logvalue_Org_Federation_Content(v.MessageField)),
		slog.Any("messages_field", s.logvalue_repeated_Org_Federation_Content(v.MessagesField)),
	)
}

func (s *FederationService) logvalue_Org_Federation_ContentType(v ContentType) slog.Value {
	switch v {
	case ContentType_CONTENT_TYPE_1:
		return slog.StringValue("CONTENT_TYPE_1")
	case ContentType_CONTENT_TYPE_2:
		return slog.StringValue("CONTENT_TYPE_2")
	case ContentType_CONTENT_TYPE_3:
		return slog.StringValue("CONTENT_TYPE_3")
	}
	return slog.StringValue("")
}

func (s *FederationService) logvalue_Org_Federation_GetResponse(v *GetResponse) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("content", s.logvalue_Org_Federation_Content(v.GetContent())),
		slog.Any("content2", s.logvalue_Org_Federation_Content(v.GetContent2())),
		slog.Int64("cel_expr", v.GetCelExpr()),
	)
}

func (s *FederationService) logvalue_Org_Federation_GetResponseArgument(v *Org_Federation_GetResponseArgument[*FederationServiceDependentClientSet]) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.Id),
	)
}

func (s *FederationService) logvalue_repeated_Org_Federation_Content(v []*Content) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   fmt.Sprint(idx),
			Value: s.logvalue_Org_Federation_Content(vv),
		})
	}
	return slog.GroupValue(attrs...)
}

func (s *FederationService) logvalue_repeated_Org_Federation_ContentType(v []ContentType) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   fmt.Sprint(idx),
			Value: s.logvalue_Org_Federation_ContentType(vv),
		})
	}
	return slog.GroupValue(attrs...)
}
