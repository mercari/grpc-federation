// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
// versions:
//
//	protoc-gen-grpc-federation: dev
//
// source: const_value.proto
package federation

import (
	"context"
	"io"
	"log/slog"
	"reflect"
	"runtime/debug"

	grpcfed "github.com/mercari/grpc-federation/grpc/federation"
	grpcfedcel "github.com/mercari/grpc-federation/grpc/federation/cel"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"

	content "example/content"
)

var (
	_ = reflect.Invalid // to avoid "imported and not used error"
)

// Org_Federation_ContentArgument is argument for "org.federation.Content" message.
type Org_Federation_ContentArgument struct {
}

// Org_Federation_GetResponseArgument is argument for "org.federation.GetResponse" message.
type Org_Federation_GetResponseArgument struct {
	Content *content.Content
	Id      string
	Res     *content.GetContentResponse
}

// FederationServiceConfig configuration required to initialize the service that use GRPC Federation.
type FederationServiceConfig struct {
	// Client provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
	// If this interface is not provided, an error is returned during initialization.
	Client FederationServiceClientFactory // required
	// ErrorHandler Federation Service often needs to convert errors received from downstream services.
	// If an error occurs during method execution in the Federation Service, this error handler is called and the returned error is treated as a final error.
	ErrorHandler grpcfed.ErrorHandler
	// Logger sets the logger used to output Debug/Info/Error information.
	Logger *slog.Logger
}

// FederationServiceClientFactory provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
type FederationServiceClientFactory interface {
	// Content_ContentServiceClient create a gRPC Client to be used to call methods in content.ContentService.
	Content_ContentServiceClient(FederationServiceClientConfig) (content.ContentServiceClient, error)
}

// FederationServiceClientConfig helper to create gRPC client.
// Hints for creating a gRPC Client.
type FederationServiceClientConfig struct {
	// Service FQDN ( `<package-name>.<service-name>` ) of the service on Protocol Buffers.
	Service string
}

// FederationServiceDependentClientSet has a gRPC client for all services on which the federation service depends.
// This is provided as an argument when implementing the custom resolver.
type FederationServiceDependentClientSet struct {
	Content_ContentServiceClient content.ContentServiceClient
}

// FederationServiceResolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
type FederationServiceResolver interface {
}

// FederationServiceCELPluginWasmConfig type alias for grpcfedcel.WasmConfig.
type FederationServiceCELPluginWasmConfig = grpcfedcel.WasmConfig

// FederationServiceCELPluginConfig hints for loading a WebAssembly based plugin.
type FederationServiceCELPluginConfig struct {
}

// FederationServiceUnimplementedResolver a structure implemented to satisfy the Resolver interface.
// An Unimplemented error is always returned.
// This is intended for use when there are many Resolver interfaces that do not need to be implemented,
// by embedding them in a resolver structure that you have created.
type FederationServiceUnimplementedResolver struct{}

const (
	FederationService_DependentMethod_Content_ContentService_GetContent = "/content.ContentService/GetContent"
)

// FederationService represents Federation Service.
type FederationService struct {
	*UnimplementedFederationServiceServer
	cfg           FederationServiceConfig
	logger        *slog.Logger
	errorHandler  grpcfed.ErrorHandler
	celCacheMap   *grpcfed.CELCacheMap
	tracer        trace.Tracer
	celTypeHelper *grpcfed.CELTypeHelper
	envOpts       []grpcfed.CELEnvOption
	celPlugins    []*grpcfedcel.CELPlugin
	client        *FederationServiceDependentClientSet
}

// NewFederationService creates FederationService instance by FederationServiceConfig.
func NewFederationService(cfg FederationServiceConfig) (*FederationService, error) {
	if cfg.Client == nil {
		return nil, grpcfed.ErrClientConfig
	}
	Content_ContentServiceClient, err := cfg.Client.Content_ContentServiceClient(FederationServiceClientConfig{
		Service: "content.ContentService",
	})
	if err != nil {
		return nil, err
	}
	logger := cfg.Logger
	if logger == nil {
		logger = slog.New(slog.NewJSONHandler(io.Discard, nil))
	}
	errorHandler := cfg.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(ctx context.Context, methodName string, err error) error { return err }
	}
	celTypeHelperFieldMap := grpcfed.CELTypeHelperFieldMap{
		"grpc.federation.private.GetResponseArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Id"),
		},
	}
	celTypeHelper := grpcfed.NewCELTypeHelper(celTypeHelperFieldMap)
	var envOpts []grpcfed.CELEnvOption
	envOpts = append(envOpts, grpcfed.NewDefaultEnvOptions(celTypeHelper)...)
	envOpts = append(envOpts, grpcfed.EnumAccessorOptions("content.ContentType", content.ContentType_value, content.ContentType_name)...)
	envOpts = append(envOpts, grpcfed.EnumAccessorOptions("org.federation.ContentType", ContentType_value, ContentType_name)...)
	return &FederationService{
		cfg:           cfg,
		logger:        logger,
		errorHandler:  errorHandler,
		envOpts:       envOpts,
		celTypeHelper: celTypeHelper,
		celCacheMap:   grpcfed.NewCELCacheMap(),
		tracer:        otel.Tracer("org.federation.FederationService"),
		client: &FederationServiceDependentClientSet{
			Content_ContentServiceClient: Content_ContentServiceClient,
		},
	}, nil
}

// Get implements "org.federation.FederationService/Get" method.
func (s *FederationService) Get(ctx context.Context, req *GetRequest) (res *GetResponse, e error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.FederationService/Get")
	defer span.End()

	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, debug.Stack())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Org_Federation_GetResponse(ctx, &Org_Federation_GetResponseArgument{
		Id: req.GetId(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// resolve_Org_Federation_GetResponse resolve "org.federation.GetResponse" message.
func (s *FederationService) resolve_Org_Federation_GetResponse(ctx context.Context, req *Org_Federation_GetResponseArgument) (*GetResponse, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.GetResponse")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.GetResponse", slog.Any("message_args", s.logvalue_Org_Federation_GetResponseArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			content *content.Content
			res     *content.GetContentResponse
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.envOpts, s.celPlugins, "grpc.federation.private.GetResponseArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "res"
	     call {
	       method: "content.ContentService/GetContent"
	       request: [
	         { field: "by_field", by: "$.id" },
	         { field: "double_field", double: 1.23 },
	         { field: "doubles_field", doubles: [4.56, 7.89] },
	         { field: "float_field", float: 4.56 },
	         { field: "floats_field", floats: [7.89, 1.23] },
	         { field: "int32_field", int32: -1 },
	         { field: "int32s_field", int32s: [-2, -3] },
	         { field: "int64_field", int64: -4 },
	         { field: "int64s_field", int64s: [-5, -6] },
	         { field: "uint32_field", uint32: 1 },
	         { field: "uint32s_field", uint32s: [2, 3] },
	         { field: "uint64_field", uint64: 4 },
	         { field: "uint64s_field", uint64s: [5, 6] },
	         { field: "sint32_field", sint32: -7 },
	         { field: "sint32s_field", sint32s: [-8, -9] },
	         { field: "sint64_field", sint64: -10 },
	         { field: "sint64s_field", sint64s: [-11, -12] },
	         { field: "fixed32_field", fixed32: 10 },
	         { field: "fixed32s_field", fixed32s: [11, 12] },
	         { field: "fixed64_field", fixed64: 13 },
	         { field: "fixed64s_field", fixed64s: [14, 15] },
	         { field: "sfixed32_field", sfixed32: -14 },
	         { field: "sfixed32s_field", sfixed32s: [-15, -16] },
	         { field: "sfixed64_field", sfixed64: -17 },
	         { field: "sfixed64s_field", sfixed64s: [-18, -19] },
	         { field: "bool_field", bool: true },
	         { field: "bools_field", bools: [true, false] },
	         { field: "string_field", string: "foo" },
	         { field: "strings_field", strings: ["hello", "world"] },
	         { field: "byte_string_field", byte_string: "foo" },
	         { field: "byte_strings_field", byte_strings: ["foo", "bar"] },
	         { field: "enum_field", enum: "content.CONTENT_TYPE_1" },
	         { field: "enums_field", enums: ["content.CONTENT_TYPE_2", "content.CONTENT_TYPE_3"] },
	         { field: "env_field", env: "foo" },
	         { field: "envs_field", envs: ["foo", "bar"] },
	         { field: "message_field", message: { name: "content.Content", fields: [{ field: "bool_field", bool: true }, { field: "bools_field", bools: [true, false] }, { field: "byte_string_field", byte_string: "foo" }, { field: "byte_strings_field", byte_strings: ["foo", "bar"] }, { field: "double_field", double: 1.23 }, { field: "doubles_field", doubles: [4.56, 7.89] }, { field: "enum_field", enum: "content.CONTENT_TYPE_1" }, { field: "enums_field", enums: ["content.CONTENT_TYPE_2", "content.CONTENT_TYPE_3"] }, { field: "env_field", env: "foo" }, { field: "envs_field", envs: ["foo", "bar"] }, { field: "fixed32_field", fixed32: 10 }, { field: "fixed32s_field", fixed32s: [11, 12] }, { field: "fixed64_field", fixed64: 13 }, { field: "fixed64s_field", fixed64s: [14, 15] }, { field: "float_field", float: 4.56 }, { field: "floats_field", floats: [7.89, 1.23] }, { field: "int32_field", int32: -1 }, { field: "int32s_field", int32s: [-2, -3] }, { field: "int64_field", int64: -4 }, { field: "int64s_field", int64s: [-5, -6] }, { field: "message_field", message: { name: "content.Content", fields: [] } }, { field: "messages_field", messages: [{ name: "content.Content", fields: [] }, { name: "content.Content", fields: [] }] }, { field: "sfixed32_field", sfixed32: -14 }, { field: "sfixed32s_field", sfixed32s: [-15, -16] }, { field: "sfixed64_field", sfixed64: -17 }, { field: "sfixed64s_field", sfixed64s: [-18, -19] }, { field: "sint32_field", sint32: -7 }, { field: "sint32s_field", sint32s: [-8, -9] }, { field: "sint64_field", sint64: -10 }, { field: "sint64s_field", sint64s: [-11, -12] }, { field: "string_field", string: "foo" }, { field: "strings_field", strings: ["hello", "world"] }, { field: "uint32_field", uint32: 1 }, { field: "uint32s_field", uint32s: [2, 3] }, { field: "uint64_field", uint64: 4 }, { field: "uint64s_field", uint64s: [5, 6] }] } },
	         { field: "messages_field", messages: [{ name: "content.Content", fields: [] }, { name: "content.Content", fields: [] }] }
	       ]
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*content.GetContentResponse, *localValueType]{
		Name: `res`,
		Type: grpcfed.CELObjectType("content.GetContentResponse"),
		Setter: func(value *localValueType, v *content.GetContentResponse) error {
			value.vars.res = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &content.GetContentRequest{
				DoubleField{ field: "double_field", double: 1.23 }
				DoublesField:     []float64{4.56, 7.89}{ field: "doubles_field", doubles: [4.56, 7.89] }
				FloatField{ field: "float_field", float: 4.56 }
				FloatsField:      []float32{7.89, 1.23}{ field: "floats_field", floats: [7.89, 1.23] }
				Int32Field{ field: "int32_field", int32: -1 }
				Int32SField:      []int32{-2, -3}{ field: "int32s_field", int32s: [-2, -3] }
				Int64Field{ field: "int64_field", int64: -4 }
				Int64SField:      []int64{-5, -6}{ field: "int64s_field", int64s: [-5, -6] }
				Uint32Field{ field: "uint32_field", uint32: 1 }
				Uint32SField:     []uint32{2, 3}{ field: "uint32s_field", uint32s: [2, 3] }
				Uint64Field{ field: "uint64_field", uint64: 4 }
				Uint64SField:     []uint64{5, 6}{ field: "uint64s_field", uint64s: [5, 6] }
				Sint32Field{ field: "sint32_field", sint32: -7 }
				Sint32SField:     []int32{-8, -9},                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          // { field: "sint32s_field", sint32s: [-8, -9] }
				Sint64Field{ field: "sint64_field", sint64: -10 }
				Sint64SField:     []int64{-11, -12}{ field: "sint64s_field", sint64s: [-11, -12] }
				Fixed32Field{ field: "fixed32_field", fixed32: 10 }
				Fixed32SField:    []uint32{11, 12}{ field: "fixed32s_field", fixed32s: [11, 12] }
				Fixed64Field{ field: "fixed64_field", fixed64: 13 }
				Fixed64SField:    []uint64{14, 15}{ field: "fixed64s_field", fixed64s: [14, 15] }
				Sfixed32Field:    -14,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      // { field: "sfixed32_field", sfixed32: -14 }
				Sfixed32SField:   []int32{-15, -16}{ field: "sfixed32s_field", sfixed32s: [-15, -16] }
				Sfixed64Field:    -17,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      // { field: "sfixed64_field", sfixed64: -17 }
				Sfixed64SField:   []int64{-18, -19},                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        // { field: "sfixed64s_field", sfixed64s: [-18, -19] }
				BoolField:        true{ field: "bool_field", bool: true }
				BoolsField:       []bool{true, false}{ field: "bools_field", bools: [true, false] }
				StringField:      "foo{ field: "string_field", string: "foo" }
				StringsField:     []string{"hello", "world"}{ field: "strings_field", strings: ["hello", "world"] }
				ByteStringField:  []byte{102, 111, 111},                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    // { field: "byte_string_field", byte_string: "foo" }
				ByteStringsField: [][]byte{[]byte{102, 111, 111}, []byte{98, 97, 114}},                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     // { field: "byte_strings_field", byte_strings: ["foo", "bar"] }
				EnumField:        content.ContentType{ field: "enum_field", enum: "content.CONTENT_TYPE_1" }
				EnumsField:       []content.ContentType{content.ContentType_CONTENT_TYPE_2, content.ContentType_CONTENT_TYPE_3}{ field: "enums_field", enums: ["content.CONTENT_TYPE_2", "content.CONTENT_TYPE_3"] }
				EnvField:         grpcfed.Getenv("foo{ field: "env_field", env: "foo" }
				EnvsField:        []string{grpcfed.Getenv("foo"), grpcfed.Getenv("bar")}{ field: "envs_field", envs: ["foo", "bar"] }
				MessageField:     &content.Content{DoubleField: 1.23, DoublesField: []float64{4.56, 7.89}, FloatField: 4.56, FloatsField: []float32{7.89, 1.23}, Int32Field: -1, Int32SField: []int32{-2, -3}, Int64Field: -4, Int64SField: []int64{-5, -6}, Uint32Field: 1, Uint32SField: []uint32{2, 3}, Uint64Field: 4, Uint64SField: []uint64{5, 6}, Sint32Field: -7, Sint32SField: []int32{-8, -9}, Sint64Field: -10, Sint64SField: []int64{-11, -12}, Fixed32Field: 10, Fixed32SField: []uint32{11, 12}, Fixed64Field: 13, Fixed64SField: []uint64{14, 15}, Sfixed32Field: -14, Sfixed32SField: []int32{-15, -16}, Sfixed64Field: -17, Sfixed64SField: []int64{-18, -19}, BoolField: true, BoolsField: []bool{true, false}, StringField: "foo", StringsField: []string{"hello", "world"}, ByteStringField: []byte{102, 111, 111}, ByteStringsField: [][]byte{[]byte{102, 111, 111}, []byte{98, 97, 114}}, EnumField: content.ContentType_CONTENT_TYPE_1, EnumsField: []content.ContentType{content.ContentType_CONTENT_TYPE_2, content.ContentType_CONTENT_TYPE_3}, EnvField: grpcfed.Getenv("foo"), EnvsField: []string{grpcfed.Getenv("foo"), grpcfed.Getenv("bar")}, MessageField: &content.Content{}, MessagesField: []*content.Content{&content.Content{}, &content.Content{}}}, // { field: "message_field", message: { name: "content.Content", fields: [{ field: "bool_field", bool: true }, { field: "bools_field", bools: [true, false] }, { field: "byte_string_field", byte_string: "foo" }, { field: "byte_strings_field", byte_strings: ["foo", "bar"] }, { field: "double_field", double: 1.23 }, { field: "doubles_field", doubles: [4.56, 7.89] }, { field: "enum_field", enum: "content.CONTENT_TYPE_1" }, { field: "enums_field", enums: ["content.CONTENT_TYPE_2", "content.CONTENT_TYPE_3"] }, { field: "env_field", env: "foo" }, { field: "envs_field", envs: ["foo", "bar"] }, { field: "fixed32_field", fixed32: 10 }, { field: "fixed32s_field", fixed32s: [11, 12] }, { field: "fixed64_field", fixed64: 13 }, { field: "fixed64s_field", fixed64s: [14, 15] }, { field: "float_field", float: 4.56 }, { field: "floats_field", floats: [7.89, 1.23] }, { field: "int32_field", int32: -1 }, { field: "int32s_field", int32s: [-2, -3] }, { field: "int64_field", int64: -4 }, { field: "int64s_field", int64s: [-5, -6] }, { field: "message_field", message: { name: "content.Content", fields: [] } }, { field: "messages_field", messages: [{ name: "content.Content", fields: [] }, { name: "content.Content", fields: [] }] }, { field: "sfixed32_field", sfixed32: -14 }, { field: "sfixed32s_field", sfixed32s: [-15, -16] }, { field: "sfixed64_field", sfixed64: -17 }, { field: "sfixed64s_field", sfixed64s: [-18, -19] }, { field: "sint32_field", sint32: -7 }, { field: "sint32s_field", sint32s: [-8, -9] }, { field: "sint64_field", sint64: -10 }, { field: "sint64s_field", sint64s: [-11, -12] }, { field: "string_field", string: "foo" }, { field: "strings_field", strings: ["hello", "world"] }, { field: "uint32_field", uint32: 1 }, { field: "uint32s_field", uint32s: [2, 3] }, { field: "uint64_field", uint64: 4 }, { field: "uint64s_field", uint64s: [5, 6] }] } }
				MessagesField:    []*content.Content{&content.Content{}, &content.Content{}}{ field: "messages_field", messages: [{ name: "content.Content", fields: [] }, { name: "content.Content", fields: [] }] }
			}
			// { field: "by_field", by: "$.id" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
				Value:             value,
				Expr:              `$.id`,
				UseContextLibrary: false,
				CacheIndex:        1,
				Setter: func(v string) error {
					args.ByField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			grpcfed.Logger(ctx).DebugContext(ctx, "call content.ContentService/GetContent", slog.Any("content.GetContentRequest", s.logvalue_Content_GetContentRequest(args)))
			return s.client.Content_ContentServiceClient.GetContent(ctx, args)
		},
	}); err != nil {
		if err := s.errorHandler(ctx, FederationService_DependentMethod_Content_ContentService_GetContent, err); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	}

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "content"
	     by: "res.content"
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*content.Content, *localValueType]{
		Name: `content`,
		Type: grpcfed.CELObjectType("content.Content"),
		Setter: func(value *localValueType, v *content.Content) error {
			value.vars.content = v
			return nil
		},
		By:                  `res.content`,
		ByUseContextLibrary: false,
		ByCacheIndex:        2,
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Content = value.vars.content
	req.Res = value.vars.res

	// create a message value to be returned.
	ret := &GetResponse{}

	// field binding section.
	// (grpc.federation.field).by = "content"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*content.Content]{
		Value:             value,
		Expr:              `content`,
		UseContextLibrary: false,
		CacheIndex:        3,
		Setter: func(v *content.Content) error {
			contentValue, err := s.cast_Content_Content__to__Org_Federation_Content(v)
			if err != nil {
				return err
			}
			ret.Content = contentValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "content.int32_field + content.sint32_field"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
		Value:             value,
		Expr:              `content.int32_field + content.sint32_field`,
		UseContextLibrary: false,
		CacheIndex:        4,
		Setter: func(v int64) error {
			ret.CelExpr = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.GetResponse", slog.Any("org.federation.GetResponse", s.logvalue_Org_Federation_GetResponse(ret)))
	return ret, nil
}

// cast_Content_ContentType__to__Org_Federation_ContentType cast from "content.ContentType" to "org.federation.ContentType".
func (s *FederationService) cast_Content_ContentType__to__Org_Federation_ContentType(from content.ContentType) (ContentType, error) {
	switch from {
	case content.ContentType_CONTENT_TYPE_1:
		return ContentType_CONTENT_TYPE_1, nil
	case content.ContentType_CONTENT_TYPE_2:
		return ContentType_CONTENT_TYPE_2, nil
	case content.ContentType_CONTENT_TYPE_3:
		return ContentType_CONTENT_TYPE_3, nil
	default:
		return 0, nil
	}
}

// cast_Content_Content__to__Org_Federation_Content cast from "content.Content" to "org.federation.Content".
func (s *FederationService) cast_Content_Content__to__Org_Federation_Content(from *content.Content) (*Content, error) {
	if from == nil {
		return nil, nil
	}

	byFieldValue := from.GetByField()
	doubleFieldValue := from.GetDoubleField()
	doublesFieldValue := from.GetDoublesField()
	floatFieldValue := from.GetFloatField()
	floatsFieldValue := from.GetFloatsField()
	int32FieldValue := from.GetInt32Field()
	int32SFieldValue := from.GetInt32SField()
	int64FieldValue := from.GetInt64Field()
	int64SFieldValue := from.GetInt64SField()
	uint32FieldValue := from.GetUint32Field()
	uint32SFieldValue := from.GetUint32SField()
	uint64FieldValue := from.GetUint64Field()
	uint64SFieldValue := from.GetUint64SField()
	sint32FieldValue := from.GetSint32Field()
	sint32SFieldValue := from.GetSint32SField()
	sint64FieldValue := from.GetSint64Field()
	sint64SFieldValue := from.GetSint64SField()
	fixed32FieldValue := from.GetFixed32Field()
	fixed32SFieldValue := from.GetFixed32SField()
	fixed64FieldValue := from.GetFixed64Field()
	fixed64SFieldValue := from.GetFixed64SField()
	sfixed32FieldValue := from.GetSfixed32Field()
	sfixed32SFieldValue := from.GetSfixed32SField()
	sfixed64FieldValue := from.GetSfixed64Field()
	sfixed64SFieldValue := from.GetSfixed64SField()
	boolFieldValue := from.GetBoolField()
	boolsFieldValue := from.GetBoolsField()
	stringFieldValue := from.GetStringField()
	stringsFieldValue := from.GetStringsField()
	byteStringFieldValue := from.GetByteStringField()
	byteStringsFieldValue := from.GetByteStringsField()
	enumFieldValue, err := s.cast_Content_ContentType__to__Org_Federation_ContentType(from.GetEnumField())
	if err != nil {
		return nil, err
	}
	enumsFieldValue, err := s.cast_repeated_Content_ContentType__to__repeated_Org_Federation_ContentType(from.GetEnumsField())
	if err != nil {
		return nil, err
	}
	envFieldValue := from.GetEnvField()
	envsFieldValue := from.GetEnvsField()
	messageFieldValue, err := s.cast_Content_Content__to__Org_Federation_Content(from.GetMessageField())
	if err != nil {
		return nil, err
	}
	messagesFieldValue, err := s.cast_repeated_Content_Content__to__repeated_Org_Federation_Content(from.GetMessagesField())
	if err != nil {
		return nil, err
	}

	return &Content{
		ByField:          byFieldValue,
		DoubleField:      doubleFieldValue,
		DoublesField:     doublesFieldValue,
		FloatField:       floatFieldValue,
		FloatsField:      floatsFieldValue,
		Int32Field:       int32FieldValue,
		Int32SField:      int32SFieldValue,
		Int64Field:       int64FieldValue,
		Int64SField:      int64SFieldValue,
		Uint32Field:      uint32FieldValue,
		Uint32SField:     uint32SFieldValue,
		Uint64Field:      uint64FieldValue,
		Uint64SField:     uint64SFieldValue,
		Sint32Field:      sint32FieldValue,
		Sint32SField:     sint32SFieldValue,
		Sint64Field:      sint64FieldValue,
		Sint64SField:     sint64SFieldValue,
		Fixed32Field:     fixed32FieldValue,
		Fixed32SField:    fixed32SFieldValue,
		Fixed64Field:     fixed64FieldValue,
		Fixed64SField:    fixed64SFieldValue,
		Sfixed32Field:    sfixed32FieldValue,
		Sfixed32SField:   sfixed32SFieldValue,
		Sfixed64Field:    sfixed64FieldValue,
		Sfixed64SField:   sfixed64SFieldValue,
		BoolField:        boolFieldValue,
		BoolsField:       boolsFieldValue,
		StringField:      stringFieldValue,
		StringsField:     stringsFieldValue,
		ByteStringField:  byteStringFieldValue,
		ByteStringsField: byteStringsFieldValue,
		EnumField:        enumFieldValue,
		EnumsField:       enumsFieldValue,
		EnvField:         envFieldValue,
		EnvsField:        envsFieldValue,
		MessageField:     messageFieldValue,
		MessagesField:    messagesFieldValue,
	}, nil
}

// cast_repeated_Content_ContentType__to__repeated_Org_Federation_ContentType cast from "repeated content.ContentType" to "repeated org.federation.ContentType".
func (s *FederationService) cast_repeated_Content_ContentType__to__repeated_Org_Federation_ContentType(from []content.ContentType) ([]ContentType, error) {
	ret := make([]ContentType, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_Content_ContentType__to__Org_Federation_ContentType(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_repeated_Content_Content__to__repeated_Org_Federation_Content cast from "repeated content.Content" to "repeated org.federation.Content".
func (s *FederationService) cast_repeated_Content_Content__to__repeated_Org_Federation_Content(from []*content.Content) ([]*Content, error) {
	ret := make([]*Content, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_Content_Content__to__Org_Federation_Content(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

func (s *FederationService) logvalue_Content_Content(v *content.Content) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("by_field", v.GetByField()),
		slog.Float64("double_field", v.GetDoubleField()),
		slog.Any("doubles_field", v.GetDoublesField()),
		slog.Float64("float_field", float64(v.GetFloatField())),
		slog.Any("floats_field", v.GetFloatsField()),
		slog.Int64("int32_field", int64(v.GetInt32Field())),
		slog.Any("int32s_field", v.GetInt32SField()),
		slog.Int64("int64_field", v.GetInt64Field()),
		slog.Any("int64s_field", v.GetInt64SField()),
		slog.Uint64("uint32_field", uint64(v.GetUint32Field())),
		slog.Any("uint32s_field", v.GetUint32SField()),
		slog.Uint64("uint64_field", v.GetUint64Field()),
		slog.Any("uint64s_field", v.GetUint64SField()),
		slog.Int64("sint32_field", int64(v.GetSint32Field())),
		slog.Any("sint32s_field", v.GetSint32SField()),
		slog.Int64("sint64_field", v.GetSint64Field()),
		slog.Any("sint64s_field", v.GetSint64SField()),
		slog.Uint64("fixed32_field", uint64(v.GetFixed32Field())),
		slog.Any("fixed32s_field", v.GetFixed32SField()),
		slog.Uint64("fixed64_field", v.GetFixed64Field()),
		slog.Any("fixed64s_field", v.GetFixed64SField()),
		slog.Int64("sfixed32_field", int64(v.GetSfixed32Field())),
		slog.Any("sfixed32s_field", v.GetSfixed32SField()),
		slog.Int64("sfixed64_field", v.GetSfixed64Field()),
		slog.Any("sfixed64s_field", v.GetSfixed64SField()),
		slog.Bool("bool_field", v.GetBoolField()),
		slog.Any("bools_field", v.GetBoolsField()),
		slog.String("string_field", v.GetStringField()),
		slog.Any("strings_field", v.GetStringsField()),
		slog.String("byte_string_field", string(v.GetByteStringField())),
		slog.Any("byte_strings_field", v.GetByteStringsField()),
		slog.String("enum_field", s.logvalue_Content_ContentType(v.GetEnumField()).String()),
		slog.Any("enums_field", s.logvalue_repeated_Content_ContentType(v.GetEnumsField())),
		slog.String("env_field", v.GetEnvField()),
		slog.Any("envs_field", v.GetEnvsField()),
		slog.Any("message_field", s.logvalue_Content_Content(v.GetMessageField())),
		slog.Any("messages_field", s.logvalue_repeated_Content_Content(v.GetMessagesField())),
	)
}

func (s *FederationService) logvalue_Content_ContentType(v content.ContentType) slog.Value {
	switch v {
	case content.ContentType_CONTENT_TYPE_1:
		return slog.StringValue("CONTENT_TYPE_1")
	case content.ContentType_CONTENT_TYPE_2:
		return slog.StringValue("CONTENT_TYPE_2")
	case content.ContentType_CONTENT_TYPE_3:
		return slog.StringValue("CONTENT_TYPE_3")
	}
	return slog.StringValue("")
}

func (s *FederationService) logvalue_Content_GetContentRequest(v *content.GetContentRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("by_field", v.GetByField()),
		slog.Float64("double_field", v.GetDoubleField()),
		slog.Any("doubles_field", v.GetDoublesField()),
		slog.Float64("float_field", float64(v.GetFloatField())),
		slog.Any("floats_field", v.GetFloatsField()),
		slog.Int64("int32_field", int64(v.GetInt32Field())),
		slog.Any("int32s_field", v.GetInt32SField()),
		slog.Int64("int64_field", v.GetInt64Field()),
		slog.Any("int64s_field", v.GetInt64SField()),
		slog.Uint64("uint32_field", uint64(v.GetUint32Field())),
		slog.Any("uint32s_field", v.GetUint32SField()),
		slog.Uint64("uint64_field", v.GetUint64Field()),
		slog.Any("uint64s_field", v.GetUint64SField()),
		slog.Int64("sint32_field", int64(v.GetSint32Field())),
		slog.Any("sint32s_field", v.GetSint32SField()),
		slog.Int64("sint64_field", v.GetSint64Field()),
		slog.Any("sint64s_field", v.GetSint64SField()),
		slog.Uint64("fixed32_field", uint64(v.GetFixed32Field())),
		slog.Any("fixed32s_field", v.GetFixed32SField()),
		slog.Uint64("fixed64_field", v.GetFixed64Field()),
		slog.Any("fixed64s_field", v.GetFixed64SField()),
		slog.Int64("sfixed32_field", int64(v.GetSfixed32Field())),
		slog.Any("sfixed32s_field", v.GetSfixed32SField()),
		slog.Int64("sfixed64_field", v.GetSfixed64Field()),
		slog.Any("sfixed64s_field", v.GetSfixed64SField()),
		slog.Bool("bool_field", v.GetBoolField()),
		slog.Any("bools_field", v.GetBoolsField()),
		slog.String("string_field", v.GetStringField()),
		slog.Any("strings_field", v.GetStringsField()),
		slog.String("byte_string_field", string(v.GetByteStringField())),
		slog.Any("byte_strings_field", v.GetByteStringsField()),
		slog.String("enum_field", s.logvalue_Content_ContentType(v.GetEnumField()).String()),
		slog.Any("enums_field", s.logvalue_repeated_Content_ContentType(v.GetEnumsField())),
		slog.String("env_field", v.GetEnvField()),
		slog.Any("envs_field", v.GetEnvsField()),
		slog.Any("message_field", s.logvalue_Content_Content(v.GetMessageField())),
		slog.Any("messages_field", s.logvalue_repeated_Content_Content(v.GetMessagesField())),
	)
}

func (s *FederationService) logvalue_Org_Federation_Content(v *Content) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("by_field", v.GetByField()),
		slog.Float64("double_field", v.GetDoubleField()),
		slog.Any("doubles_field", v.GetDoublesField()),
		slog.Float64("float_field", float64(v.GetFloatField())),
		slog.Any("floats_field", v.GetFloatsField()),
		slog.Int64("int32_field", int64(v.GetInt32Field())),
		slog.Any("int32s_field", v.GetInt32SField()),
		slog.Int64("int64_field", v.GetInt64Field()),
		slog.Any("int64s_field", v.GetInt64SField()),
		slog.Uint64("uint32_field", uint64(v.GetUint32Field())),
		slog.Any("uint32s_field", v.GetUint32SField()),
		slog.Uint64("uint64_field", v.GetUint64Field()),
		slog.Any("uint64s_field", v.GetUint64SField()),
		slog.Int64("sint32_field", int64(v.GetSint32Field())),
		slog.Any("sint32s_field", v.GetSint32SField()),
		slog.Int64("sint64_field", v.GetSint64Field()),
		slog.Any("sint64s_field", v.GetSint64SField()),
		slog.Uint64("fixed32_field", uint64(v.GetFixed32Field())),
		slog.Any("fixed32s_field", v.GetFixed32SField()),
		slog.Uint64("fixed64_field", v.GetFixed64Field()),
		slog.Any("fixed64s_field", v.GetFixed64SField()),
		slog.Int64("sfixed32_field", int64(v.GetSfixed32Field())),
		slog.Any("sfixed32s_field", v.GetSfixed32SField()),
		slog.Int64("sfixed64_field", v.GetSfixed64Field()),
		slog.Any("sfixed64s_field", v.GetSfixed64SField()),
		slog.Bool("bool_field", v.GetBoolField()),
		slog.Any("bools_field", v.GetBoolsField()),
		slog.String("string_field", v.GetStringField()),
		slog.Any("strings_field", v.GetStringsField()),
		slog.String("byte_string_field", string(v.GetByteStringField())),
		slog.Any("byte_strings_field", v.GetByteStringsField()),
		slog.String("enum_field", s.logvalue_Org_Federation_ContentType(v.GetEnumField()).String()),
		slog.Any("enums_field", s.logvalue_repeated_Org_Federation_ContentType(v.GetEnumsField())),
		slog.String("env_field", v.GetEnvField()),
		slog.Any("envs_field", v.GetEnvsField()),
		slog.Any("message_field", s.logvalue_Org_Federation_Content(v.GetMessageField())),
		slog.Any("messages_field", s.logvalue_repeated_Org_Federation_Content(v.GetMessagesField())),
	)
}

func (s *FederationService) logvalue_Org_Federation_ContentType(v ContentType) slog.Value {
	switch v {
	case ContentType_CONTENT_TYPE_1:
		return slog.StringValue("CONTENT_TYPE_1")
	case ContentType_CONTENT_TYPE_2:
		return slog.StringValue("CONTENT_TYPE_2")
	case ContentType_CONTENT_TYPE_3:
		return slog.StringValue("CONTENT_TYPE_3")
	}
	return slog.StringValue("")
}

func (s *FederationService) logvalue_Org_Federation_GetResponse(v *GetResponse) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("content", s.logvalue_Org_Federation_Content(v.GetContent())),
		slog.Int64("cel_expr", v.GetCelExpr()),
	)
}

func (s *FederationService) logvalue_Org_Federation_GetResponseArgument(v *Org_Federation_GetResponseArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.Id),
	)
}

func (s *FederationService) logvalue_repeated_Content_Content(v []*content.Content) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(idx),
			Value: s.logvalue_Content_Content(vv),
		})
	}
	return slog.GroupValue(attrs...)
}

func (s *FederationService) logvalue_repeated_Content_ContentType(v []content.ContentType) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(idx),
			Value: s.logvalue_Content_ContentType(vv),
		})
	}
	return slog.GroupValue(attrs...)
}

func (s *FederationService) logvalue_repeated_Org_Federation_Content(v []*Content) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(idx),
			Value: s.logvalue_Org_Federation_Content(vv),
		})
	}
	return slog.GroupValue(attrs...)
}

func (s *FederationService) logvalue_repeated_Org_Federation_ContentType(v []ContentType) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(idx),
			Value: s.logvalue_Org_Federation_ContentType(vv),
		})
	}
	return slog.GroupValue(attrs...)
}
