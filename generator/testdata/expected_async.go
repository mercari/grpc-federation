// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
// versions:
//
//	protoc-gen-grpc-federation: dev
//
// source: async.proto
package federation

import (
	"context"
	"io"
	"log/slog"
	"reflect"

	grpcfed "github.com/mercari/grpc-federation/grpc/federation"
	grpcfedcel "github.com/mercari/grpc-federation/grpc/federation/cel"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"
)

var (
	_ = reflect.Invalid // to avoid "imported and not used error"
)

// Org_Federation_AAArgument is argument for "org.federation.AA" message.
type Org_Federation_AAArgument struct {
}

// Org_Federation_AArgument is argument for "org.federation.A" message.
type Org_Federation_AArgument struct {
}

// Org_Federation_ABArgument is argument for "org.federation.AB" message.
type Org_Federation_ABArgument struct {
}

// Org_Federation_BArgument is argument for "org.federation.B" message.
type Org_Federation_BArgument struct {
}

// Org_Federation_CArgument is argument for "org.federation.C" message.
type Org_Federation_CArgument struct {
	A string
}

// Org_Federation_DArgument is argument for "org.federation.D" message.
type Org_Federation_DArgument struct {
	B string
}

// Org_Federation_EArgument is argument for "org.federation.E" message.
type Org_Federation_EArgument struct {
	C string
	D string
}

// Org_Federation_FArgument is argument for "org.federation.F" message.
type Org_Federation_FArgument struct {
	C string
	D string
}

// Org_Federation_GArgument is argument for "org.federation.G" message.
type Org_Federation_GArgument struct {
}

// Org_Federation_GetResponseArgument is argument for "org.federation.GetResponse" message.
type Org_Federation_GetResponseArgument struct {
	A *A
	B *B
	C *C
	D *D
	E *E
	F *F
	G *G
	H *H
	I *I
	J *J
}

// Org_Federation_HArgument is argument for "org.federation.H" message.
type Org_Federation_HArgument struct {
	E string
	F string
	G string
}

// Org_Federation_IArgument is argument for "org.federation.I" message.
type Org_Federation_IArgument struct {
}

// Org_Federation_JArgument is argument for "org.federation.J" message.
type Org_Federation_JArgument struct {
	I string
}

// FederationServiceConfig configuration required to initialize the service that use GRPC Federation.
type FederationServiceConfig struct {
	// ErrorHandler Federation Service often needs to convert errors received from downstream services.
	// If an error occurs during method execution in the Federation Service, this error handler is called and the returned error is treated as a final error.
	ErrorHandler grpcfed.ErrorHandler
	// Logger sets the logger used to output Debug/Info/Error information.
	Logger *slog.Logger
}

// FederationServiceClientFactory provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
type FederationServiceClientFactory interface {
}

// FederationServiceClientConfig helper to create gRPC client.
// Hints for creating a gRPC Client.
type FederationServiceClientConfig struct {
	// Service FQDN ( `<package-name>.<service-name>` ) of the service on Protocol Buffers.
	Service string
}

// FederationServiceDependentClientSet has a gRPC client for all services on which the federation service depends.
// This is provided as an argument when implementing the custom resolver.
type FederationServiceDependentClientSet struct {
}

// FederationServiceResolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
type FederationServiceResolver interface {
}

// FederationServiceCELPluginWasmConfig type alias for grpcfedcel.WasmConfig.
type FederationServiceCELPluginWasmConfig = grpcfedcel.WasmConfig

// FederationServiceCELPluginConfig hints for loading a WebAssembly based plugin.
type FederationServiceCELPluginConfig struct {
}

// FederationServiceUnimplementedResolver a structure implemented to satisfy the Resolver interface.
// An Unimplemented error is always returned.
// This is intended for use when there are many Resolver interfaces that do not need to be implemented,
// by embedding them in a resolver structure that you have created.
type FederationServiceUnimplementedResolver struct{}

// FederationService represents Federation Service.
type FederationService struct {
	*UnimplementedFederationServiceServer
	cfg           FederationServiceConfig
	logger        *slog.Logger
	errorHandler  grpcfed.ErrorHandler
	celCacheMap   *grpcfed.CELCacheMap
	tracer        trace.Tracer
	celTypeHelper *grpcfed.CELTypeHelper
	celEnvOpts    []grpcfed.CELEnvOption
	celPlugins    []*grpcfedcel.CELPlugin
	client        *FederationServiceDependentClientSet
}

// NewFederationService creates FederationService instance by FederationServiceConfig.
func NewFederationService(cfg FederationServiceConfig) (*FederationService, error) {
	logger := cfg.Logger
	if logger == nil {
		logger = slog.New(slog.NewJSONHandler(io.Discard, nil))
	}
	errorHandler := cfg.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(ctx context.Context, methodName string, err error) error { return err }
	}
	celTypeHelperFieldMap := grpcfed.CELTypeHelperFieldMap{
		"grpc.federation.private.AAArgument": {},
		"grpc.federation.private.AArgument":  {},
		"grpc.federation.private.ABArgument": {},
		"grpc.federation.private.BArgument":  {},
		"grpc.federation.private.CArgument": {
			"a": grpcfed.NewCELFieldType(grpcfed.CELStringType, "A"),
		},
		"grpc.federation.private.DArgument": {
			"b": grpcfed.NewCELFieldType(grpcfed.CELStringType, "B"),
		},
		"grpc.federation.private.EArgument": {
			"c": grpcfed.NewCELFieldType(grpcfed.CELStringType, "C"),
			"d": grpcfed.NewCELFieldType(grpcfed.CELStringType, "D"),
		},
		"grpc.federation.private.FArgument": {
			"c": grpcfed.NewCELFieldType(grpcfed.CELStringType, "C"),
			"d": grpcfed.NewCELFieldType(grpcfed.CELStringType, "D"),
		},
		"grpc.federation.private.GArgument":           {},
		"grpc.federation.private.GetResponseArgument": {},
		"grpc.federation.private.HArgument": {
			"e": grpcfed.NewCELFieldType(grpcfed.CELStringType, "E"),
			"f": grpcfed.NewCELFieldType(grpcfed.CELStringType, "F"),
			"g": grpcfed.NewCELFieldType(grpcfed.CELStringType, "G"),
		},
		"grpc.federation.private.IArgument": {},
		"grpc.federation.private.JArgument": {
			"i": grpcfed.NewCELFieldType(grpcfed.CELStringType, "I"),
		},
	}
	celTypeHelper := grpcfed.NewCELTypeHelper(celTypeHelperFieldMap)
	var celEnvOpts []grpcfed.CELEnvOption
	celEnvOpts = append(celEnvOpts, grpcfed.NewDefaultEnvOptions(celTypeHelper)...)
	return &FederationService{
		cfg:           cfg,
		logger:        logger,
		errorHandler:  errorHandler,
		celEnvOpts:    celEnvOpts,
		celTypeHelper: celTypeHelper,
		celCacheMap:   grpcfed.NewCELCacheMap(),
		tracer:        otel.Tracer("org.federation.FederationService"),
		client:        &FederationServiceDependentClientSet{},
	}, nil
}

// Get implements "org.federation.FederationService/Get" method.
func (s *FederationService) Get(ctx context.Context, req *GetRequest) (res *GetResponse, e error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.FederationService/Get")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, grpcfed.StackTrace())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Org_Federation_GetResponse(ctx, &Org_Federation_GetResponseArgument{})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// resolve_Org_Federation_A resolve "org.federation.A" message.
func (s *FederationService) resolve_Org_Federation_A(ctx context.Context, req *Org_Federation_AArgument) (*A, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.A")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.A", slog.Any("message_args", s.logvalue_Org_Federation_AArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			aa *AA
			ab *AB
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.AArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()
	// A tree view of message dependencies is shown below.
	/*
	   aa ─┐
	   ab ─┤
	*/
	eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "aa"
		     message {
		       name: "AA"
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*AA, *localValueType]{
			Name: `aa`,
			Type: grpcfed.CELObjectType("org.federation.AA"),
			Setter: func(value *localValueType, v *AA) error {
				value.vars.aa = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Org_Federation_AAArgument{}
				return s.resolve_Org_Federation_AA(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "ab"
		     message {
		       name: "AB"
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*AB, *localValueType]{
			Name: `ab`,
			Type: grpcfed.CELObjectType("org.federation.AB"),
			Setter: func(value *localValueType, v *AB) error {
				value.vars.ab = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Org_Federation_ABArgument{}
				return s.resolve_Org_Federation_AB(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	if err := eg.Wait(); err != nil {
		return nil, err
	}

	// create a message value to be returned.
	ret := &A{}

	// field binding section.
	// (grpc.federation.field).by = "'a'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `'a'`,
		UseContextLibrary: false,
		CacheIndex:        1,
		Setter: func(v string) error {
			ret.Name = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.A", slog.Any("org.federation.A", s.logvalue_Org_Federation_A(ret)))
	return ret, nil
}

// resolve_Org_Federation_AA resolve "org.federation.AA" message.
func (s *FederationService) resolve_Org_Federation_AA(ctx context.Context, req *Org_Federation_AAArgument) (*AA, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.AA")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.AA", slog.Any("message_args", s.logvalue_Org_Federation_AAArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.AAArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// create a message value to be returned.
	ret := &AA{}

	// field binding section.
	// (grpc.federation.field).by = "'aa'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `'aa'`,
		UseContextLibrary: false,
		CacheIndex:        2,
		Setter: func(v string) error {
			ret.Name = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.AA", slog.Any("org.federation.AA", s.logvalue_Org_Federation_AA(ret)))
	return ret, nil
}

// resolve_Org_Federation_AB resolve "org.federation.AB" message.
func (s *FederationService) resolve_Org_Federation_AB(ctx context.Context, req *Org_Federation_ABArgument) (*AB, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.AB")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.AB", slog.Any("message_args", s.logvalue_Org_Federation_ABArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.ABArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// create a message value to be returned.
	ret := &AB{}

	// field binding section.
	// (grpc.federation.field).by = "'ab'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `'ab'`,
		UseContextLibrary: false,
		CacheIndex:        3,
		Setter: func(v string) error {
			ret.Name = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.AB", slog.Any("org.federation.AB", s.logvalue_Org_Federation_AB(ret)))
	return ret, nil
}

// resolve_Org_Federation_B resolve "org.federation.B" message.
func (s *FederationService) resolve_Org_Federation_B(ctx context.Context, req *Org_Federation_BArgument) (*B, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.B")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.B", slog.Any("message_args", s.logvalue_Org_Federation_BArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.BArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// create a message value to be returned.
	ret := &B{}

	// field binding section.
	// (grpc.federation.field).by = "'b'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `'b'`,
		UseContextLibrary: false,
		CacheIndex:        4,
		Setter: func(v string) error {
			ret.Name = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.B", slog.Any("org.federation.B", s.logvalue_Org_Federation_B(ret)))
	return ret, nil
}

// resolve_Org_Federation_C resolve "org.federation.C" message.
func (s *FederationService) resolve_Org_Federation_C(ctx context.Context, req *Org_Federation_CArgument) (*C, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.C")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.C", slog.Any("message_args", s.logvalue_Org_Federation_CArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.CArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// create a message value to be returned.
	ret := &C{}

	// field binding section.
	// (grpc.federation.field).by = "'c'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `'c'`,
		UseContextLibrary: false,
		CacheIndex:        5,
		Setter: func(v string) error {
			ret.Name = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.C", slog.Any("org.federation.C", s.logvalue_Org_Federation_C(ret)))
	return ret, nil
}

// resolve_Org_Federation_D resolve "org.federation.D" message.
func (s *FederationService) resolve_Org_Federation_D(ctx context.Context, req *Org_Federation_DArgument) (*D, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.D")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.D", slog.Any("message_args", s.logvalue_Org_Federation_DArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.DArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// create a message value to be returned.
	ret := &D{}

	// field binding section.
	// (grpc.federation.field).by = "'d'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `'d'`,
		UseContextLibrary: false,
		CacheIndex:        6,
		Setter: func(v string) error {
			ret.Name = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.D", slog.Any("org.federation.D", s.logvalue_Org_Federation_D(ret)))
	return ret, nil
}

// resolve_Org_Federation_E resolve "org.federation.E" message.
func (s *FederationService) resolve_Org_Federation_E(ctx context.Context, req *Org_Federation_EArgument) (*E, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.E")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.E", slog.Any("message_args", s.logvalue_Org_Federation_EArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.EArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// create a message value to be returned.
	ret := &E{}

	// field binding section.
	// (grpc.federation.field).by = "'e'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `'e'`,
		UseContextLibrary: false,
		CacheIndex:        7,
		Setter: func(v string) error {
			ret.Name = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.E", slog.Any("org.federation.E", s.logvalue_Org_Federation_E(ret)))
	return ret, nil
}

// resolve_Org_Federation_F resolve "org.federation.F" message.
func (s *FederationService) resolve_Org_Federation_F(ctx context.Context, req *Org_Federation_FArgument) (*F, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.F")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.F", slog.Any("message_args", s.logvalue_Org_Federation_FArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.FArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// create a message value to be returned.
	ret := &F{}

	// field binding section.
	// (grpc.federation.field).by = "'f'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `'f'`,
		UseContextLibrary: false,
		CacheIndex:        8,
		Setter: func(v string) error {
			ret.Name = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.F", slog.Any("org.federation.F", s.logvalue_Org_Federation_F(ret)))
	return ret, nil
}

// resolve_Org_Federation_G resolve "org.federation.G" message.
func (s *FederationService) resolve_Org_Federation_G(ctx context.Context, req *Org_Federation_GArgument) (*G, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.G")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.G", slog.Any("message_args", s.logvalue_Org_Federation_GArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.GArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// create a message value to be returned.
	ret := &G{}

	// field binding section.
	// (grpc.federation.field).by = "'g'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `'g'`,
		UseContextLibrary: false,
		CacheIndex:        9,
		Setter: func(v string) error {
			ret.Name = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.G", slog.Any("org.federation.G", s.logvalue_Org_Federation_G(ret)))
	return ret, nil
}

// resolve_Org_Federation_GetResponse resolve "org.federation.GetResponse" message.
func (s *FederationService) resolve_Org_Federation_GetResponse(ctx context.Context, req *Org_Federation_GetResponseArgument) (*GetResponse, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.GetResponse")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.GetResponse", slog.Any("message_args", s.logvalue_Org_Federation_GetResponseArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			a *A
			b *B
			c *C
			d *D
			e *E
			f *F
			g *G
			h *H
			i *I
			j *J
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.GetResponseArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()
	// A tree view of message dependencies is shown below.
	/*
	   a ─┐
	      c ─┐
	   b ─┐  │
	      d ─┤
	         e ─┐
	   a ─┐     │
	      c ─┐  │
	   b ─┐  │  │
	      d ─┤  │
	         f ─┤
	         g ─┤
	            h ─┐
	         i ─┐  │
	            j ─┤
	*/
	eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)

	grpcfed.GoWithRecover(eg, func() (any, error) {
		eg, ctx2 := grpcfed.ErrorGroupWithContext(ctx1)
		grpcfed.GoWithRecover(eg, func() (any, error) {
			eg, ctx3 := grpcfed.ErrorGroupWithContext(ctx2)
			grpcfed.GoWithRecover(eg, func() (any, error) {

				// This section's codes are generated by the following proto definition.
				/*
				   def {
				     name: "a"
				     message {
				       name: "A"
				     }
				   }
				*/
				if err := grpcfed.EvalDef(ctx3, value, grpcfed.Def[*A, *localValueType]{
					Name: `a`,
					Type: grpcfed.CELObjectType("org.federation.A"),
					Setter: func(value *localValueType, v *A) error {
						value.vars.a = v
						return nil
					},
					Message: func(ctx context.Context, value *localValueType) (any, error) {
						args := &Org_Federation_AArgument{}
						return s.resolve_Org_Federation_A(ctx, args)
					},
				}); err != nil {
					grpcfed.RecordErrorToSpan(ctx3, err)
					return nil, err
				}

				// This section's codes are generated by the following proto definition.
				/*
				   def {
				     name: "c"
				     message {
				       name: "C"
				       args { name: "a", by: "a.name" }
				     }
				   }
				*/
				if err := grpcfed.EvalDef(ctx3, value, grpcfed.Def[*C, *localValueType]{
					Name: `c`,
					Type: grpcfed.CELObjectType("org.federation.C"),
					Setter: func(value *localValueType, v *C) error {
						value.vars.c = v
						return nil
					},
					Message: func(ctx context.Context, value *localValueType) (any, error) {
						args := &Org_Federation_CArgument{}
						// { name: "a", by: "a.name" }
						if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
							Value:             value,
							Expr:              `a.name`,
							UseContextLibrary: false,
							CacheIndex:        10,
							Setter: func(v string) error {
								args.A = v
								return nil
							},
						}); err != nil {
							return nil, err
						}
						return s.resolve_Org_Federation_C(ctx, args)
					},
				}); err != nil {
					grpcfed.RecordErrorToSpan(ctx3, err)
					return nil, err
				}
				return nil, nil
			})
			grpcfed.GoWithRecover(eg, func() (any, error) {

				// This section's codes are generated by the following proto definition.
				/*
				   def {
				     name: "b"
				     message {
				       name: "B"
				     }
				   }
				*/
				if err := grpcfed.EvalDef(ctx3, value, grpcfed.Def[*B, *localValueType]{
					Name: `b`,
					Type: grpcfed.CELObjectType("org.federation.B"),
					Setter: func(value *localValueType, v *B) error {
						value.vars.b = v
						return nil
					},
					Message: func(ctx context.Context, value *localValueType) (any, error) {
						args := &Org_Federation_BArgument{}
						return s.resolve_Org_Federation_B(ctx, args)
					},
				}); err != nil {
					grpcfed.RecordErrorToSpan(ctx3, err)
					return nil, err
				}

				// This section's codes are generated by the following proto definition.
				/*
				   def {
				     name: "d"
				     message {
				       name: "D"
				       args { name: "b", by: "b.name" }
				     }
				   }
				*/
				if err := grpcfed.EvalDef(ctx3, value, grpcfed.Def[*D, *localValueType]{
					Name: `d`,
					Type: grpcfed.CELObjectType("org.federation.D"),
					Setter: func(value *localValueType, v *D) error {
						value.vars.d = v
						return nil
					},
					Message: func(ctx context.Context, value *localValueType) (any, error) {
						args := &Org_Federation_DArgument{}
						// { name: "b", by: "b.name" }
						if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
							Value:             value,
							Expr:              `b.name`,
							UseContextLibrary: false,
							CacheIndex:        11,
							Setter: func(v string) error {
								args.B = v
								return nil
							},
						}); err != nil {
							return nil, err
						}
						return s.resolve_Org_Federation_D(ctx, args)
					},
				}); err != nil {
					grpcfed.RecordErrorToSpan(ctx3, err)
					return nil, err
				}
				return nil, nil
			})
			if err := eg.Wait(); err != nil {
				return nil, err
			}

			// This section's codes are generated by the following proto definition.
			/*
			   def {
			     name: "e"
			     message {
			       name: "E"
			       args: [
			         { name: "c", by: "c.name" },
			         { name: "d", by: "d.name" }
			       ]
			     }
			   }
			*/
			if err := grpcfed.EvalDef(ctx2, value, grpcfed.Def[*E, *localValueType]{
				Name: `e`,
				Type: grpcfed.CELObjectType("org.federation.E"),
				Setter: func(value *localValueType, v *E) error {
					value.vars.e = v
					return nil
				},
				Message: func(ctx context.Context, value *localValueType) (any, error) {
					args := &Org_Federation_EArgument{}
					// { name: "c", by: "c.name" }
					if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
						Value:             value,
						Expr:              `c.name`,
						UseContextLibrary: false,
						CacheIndex:        12,
						Setter: func(v string) error {
							args.C = v
							return nil
						},
					}); err != nil {
						return nil, err
					}
					// { name: "d", by: "d.name" }
					if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
						Value:             value,
						Expr:              `d.name`,
						UseContextLibrary: false,
						CacheIndex:        13,
						Setter: func(v string) error {
							args.D = v
							return nil
						},
					}); err != nil {
						return nil, err
					}
					return s.resolve_Org_Federation_E(ctx, args)
				},
			}); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			return nil, nil
		})
		grpcfed.GoWithRecover(eg, func() (any, error) {
			eg, ctx3 := grpcfed.ErrorGroupWithContext(ctx2)
			grpcfed.GoWithRecover(eg, func() (any, error) {

				// This section's codes are generated by the following proto definition.
				/*
				   def {
				     name: "a"
				     message {
				       name: "A"
				     }
				   }
				*/
				if err := grpcfed.EvalDef(ctx3, value, grpcfed.Def[*A, *localValueType]{
					Name: `a`,
					Type: grpcfed.CELObjectType("org.federation.A"),
					Setter: func(value *localValueType, v *A) error {
						value.vars.a = v
						return nil
					},
					Message: func(ctx context.Context, value *localValueType) (any, error) {
						args := &Org_Federation_AArgument{}
						return s.resolve_Org_Federation_A(ctx, args)
					},
				}); err != nil {
					grpcfed.RecordErrorToSpan(ctx3, err)
					return nil, err
				}

				// This section's codes are generated by the following proto definition.
				/*
				   def {
				     name: "c"
				     message {
				       name: "C"
				       args { name: "a", by: "a.name" }
				     }
				   }
				*/
				if err := grpcfed.EvalDef(ctx3, value, grpcfed.Def[*C, *localValueType]{
					Name: `c`,
					Type: grpcfed.CELObjectType("org.federation.C"),
					Setter: func(value *localValueType, v *C) error {
						value.vars.c = v
						return nil
					},
					Message: func(ctx context.Context, value *localValueType) (any, error) {
						args := &Org_Federation_CArgument{}
						// { name: "a", by: "a.name" }
						if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
							Value:             value,
							Expr:              `a.name`,
							UseContextLibrary: false,
							CacheIndex:        14,
							Setter: func(v string) error {
								args.A = v
								return nil
							},
						}); err != nil {
							return nil, err
						}
						return s.resolve_Org_Federation_C(ctx, args)
					},
				}); err != nil {
					grpcfed.RecordErrorToSpan(ctx3, err)
					return nil, err
				}
				return nil, nil
			})
			grpcfed.GoWithRecover(eg, func() (any, error) {

				// This section's codes are generated by the following proto definition.
				/*
				   def {
				     name: "b"
				     message {
				       name: "B"
				     }
				   }
				*/
				if err := grpcfed.EvalDef(ctx3, value, grpcfed.Def[*B, *localValueType]{
					Name: `b`,
					Type: grpcfed.CELObjectType("org.federation.B"),
					Setter: func(value *localValueType, v *B) error {
						value.vars.b = v
						return nil
					},
					Message: func(ctx context.Context, value *localValueType) (any, error) {
						args := &Org_Federation_BArgument{}
						return s.resolve_Org_Federation_B(ctx, args)
					},
				}); err != nil {
					grpcfed.RecordErrorToSpan(ctx3, err)
					return nil, err
				}

				// This section's codes are generated by the following proto definition.
				/*
				   def {
				     name: "d"
				     message {
				       name: "D"
				       args { name: "b", by: "b.name" }
				     }
				   }
				*/
				if err := grpcfed.EvalDef(ctx3, value, grpcfed.Def[*D, *localValueType]{
					Name: `d`,
					Type: grpcfed.CELObjectType("org.federation.D"),
					Setter: func(value *localValueType, v *D) error {
						value.vars.d = v
						return nil
					},
					Message: func(ctx context.Context, value *localValueType) (any, error) {
						args := &Org_Federation_DArgument{}
						// { name: "b", by: "b.name" }
						if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
							Value:             value,
							Expr:              `b.name`,
							UseContextLibrary: false,
							CacheIndex:        15,
							Setter: func(v string) error {
								args.B = v
								return nil
							},
						}); err != nil {
							return nil, err
						}
						return s.resolve_Org_Federation_D(ctx, args)
					},
				}); err != nil {
					grpcfed.RecordErrorToSpan(ctx3, err)
					return nil, err
				}
				return nil, nil
			})
			if err := eg.Wait(); err != nil {
				return nil, err
			}

			// This section's codes are generated by the following proto definition.
			/*
			   def {
			     name: "f"
			     message {
			       name: "F"
			       args: [
			         { name: "c", by: "c.name" },
			         { name: "d", by: "d.name" }
			       ]
			     }
			   }
			*/
			if err := grpcfed.EvalDef(ctx2, value, grpcfed.Def[*F, *localValueType]{
				Name: `f`,
				Type: grpcfed.CELObjectType("org.federation.F"),
				Setter: func(value *localValueType, v *F) error {
					value.vars.f = v
					return nil
				},
				Message: func(ctx context.Context, value *localValueType) (any, error) {
					args := &Org_Federation_FArgument{}
					// { name: "c", by: "c.name" }
					if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
						Value:             value,
						Expr:              `c.name`,
						UseContextLibrary: false,
						CacheIndex:        16,
						Setter: func(v string) error {
							args.C = v
							return nil
						},
					}); err != nil {
						return nil, err
					}
					// { name: "d", by: "d.name" }
					if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
						Value:             value,
						Expr:              `d.name`,
						UseContextLibrary: false,
						CacheIndex:        17,
						Setter: func(v string) error {
							args.D = v
							return nil
						},
					}); err != nil {
						return nil, err
					}
					return s.resolve_Org_Federation_F(ctx, args)
				},
			}); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			return nil, nil
		})
		grpcfed.GoWithRecover(eg, func() (any, error) {

			// This section's codes are generated by the following proto definition.
			/*
			   def {
			     name: "g"
			     message {
			       name: "G"
			     }
			   }
			*/
			if err := grpcfed.EvalDef(ctx2, value, grpcfed.Def[*G, *localValueType]{
				Name: `g`,
				Type: grpcfed.CELObjectType("org.federation.G"),
				Setter: func(value *localValueType, v *G) error {
					value.vars.g = v
					return nil
				},
				Message: func(ctx context.Context, value *localValueType) (any, error) {
					args := &Org_Federation_GArgument{}
					return s.resolve_Org_Federation_G(ctx, args)
				},
			}); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			return nil, nil
		})
		if err := eg.Wait(); err != nil {
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "h"
		     message {
		       name: "H"
		       args: [
		         { name: "e", by: "e.name" },
		         { name: "f", by: "f.name" },
		         { name: "g", by: "g.name" }
		       ]
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*H, *localValueType]{
			Name: `h`,
			Type: grpcfed.CELObjectType("org.federation.H"),
			Setter: func(value *localValueType, v *H) error {
				value.vars.h = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Org_Federation_HArgument{}
				// { name: "e", by: "e.name" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:             value,
					Expr:              `e.name`,
					UseContextLibrary: false,
					CacheIndex:        18,
					Setter: func(v string) error {
						args.E = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				// { name: "f", by: "f.name" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:             value,
					Expr:              `f.name`,
					UseContextLibrary: false,
					CacheIndex:        19,
					Setter: func(v string) error {
						args.F = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				// { name: "g", by: "g.name" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:             value,
					Expr:              `g.name`,
					UseContextLibrary: false,
					CacheIndex:        20,
					Setter: func(v string) error {
						args.G = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Org_Federation_H(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "i"
		     message {
		       name: "I"
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*I, *localValueType]{
			Name: `i`,
			Type: grpcfed.CELObjectType("org.federation.I"),
			Setter: func(value *localValueType, v *I) error {
				value.vars.i = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Org_Federation_IArgument{}
				return s.resolve_Org_Federation_I(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "j"
		     message {
		       name: "J"
		       args { name: "i", by: "i.name" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*J, *localValueType]{
			Name: `j`,
			Type: grpcfed.CELObjectType("org.federation.J"),
			Setter: func(value *localValueType, v *J) error {
				value.vars.j = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Org_Federation_JArgument{}
				// { name: "i", by: "i.name" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:             value,
					Expr:              `i.name`,
					UseContextLibrary: false,
					CacheIndex:        21,
					Setter: func(v string) error {
						args.I = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Org_Federation_J(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	if err := eg.Wait(); err != nil {
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.A = value.vars.a
	req.B = value.vars.b
	req.C = value.vars.c
	req.D = value.vars.d
	req.E = value.vars.e
	req.F = value.vars.f
	req.G = value.vars.g
	req.H = value.vars.h
	req.I = value.vars.i
	req.J = value.vars.j

	// create a message value to be returned.
	ret := &GetResponse{}

	// field binding section.
	// (grpc.federation.field).by = "h.name"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `h.name`,
		UseContextLibrary: false,
		CacheIndex:        22,
		Setter: func(v string) error {
			ret.Hname = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "j.name"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `j.name`,
		UseContextLibrary: false,
		CacheIndex:        23,
		Setter: func(v string) error {
			ret.Jname = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.GetResponse", slog.Any("org.federation.GetResponse", s.logvalue_Org_Federation_GetResponse(ret)))
	return ret, nil
}

// resolve_Org_Federation_H resolve "org.federation.H" message.
func (s *FederationService) resolve_Org_Federation_H(ctx context.Context, req *Org_Federation_HArgument) (*H, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.H")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.H", slog.Any("message_args", s.logvalue_Org_Federation_HArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.HArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// create a message value to be returned.
	ret := &H{}

	// field binding section.
	// (grpc.federation.field).by = "'h'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `'h'`,
		UseContextLibrary: false,
		CacheIndex:        24,
		Setter: func(v string) error {
			ret.Name = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.H", slog.Any("org.federation.H", s.logvalue_Org_Federation_H(ret)))
	return ret, nil
}

// resolve_Org_Federation_I resolve "org.federation.I" message.
func (s *FederationService) resolve_Org_Federation_I(ctx context.Context, req *Org_Federation_IArgument) (*I, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.I")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.I", slog.Any("message_args", s.logvalue_Org_Federation_IArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.IArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// create a message value to be returned.
	ret := &I{}

	// field binding section.
	// (grpc.federation.field).by = "'i'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `'i'`,
		UseContextLibrary: false,
		CacheIndex:        25,
		Setter: func(v string) error {
			ret.Name = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.I", slog.Any("org.federation.I", s.logvalue_Org_Federation_I(ret)))
	return ret, nil
}

// resolve_Org_Federation_J resolve "org.federation.J" message.
func (s *FederationService) resolve_Org_Federation_J(ctx context.Context, req *Org_Federation_JArgument) (*J, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.J")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.J", slog.Any("message_args", s.logvalue_Org_Federation_JArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.JArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// create a message value to be returned.
	ret := &J{}

	// field binding section.
	// (grpc.federation.field).by = "'j'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `'j'`,
		UseContextLibrary: false,
		CacheIndex:        26,
		Setter: func(v string) error {
			ret.Name = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.J", slog.Any("org.federation.J", s.logvalue_Org_Federation_J(ret)))
	return ret, nil
}

func (s *FederationService) logvalue_Org_Federation_A(v *A) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("name", v.GetName()),
	)
}

func (s *FederationService) logvalue_Org_Federation_AA(v *AA) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("name", v.GetName()),
	)
}

func (s *FederationService) logvalue_Org_Federation_AAArgument(v *Org_Federation_AAArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Org_Federation_AArgument(v *Org_Federation_AArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Org_Federation_AB(v *AB) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("name", v.GetName()),
	)
}

func (s *FederationService) logvalue_Org_Federation_ABArgument(v *Org_Federation_ABArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Org_Federation_B(v *B) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("name", v.GetName()),
	)
}

func (s *FederationService) logvalue_Org_Federation_BArgument(v *Org_Federation_BArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Org_Federation_C(v *C) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("name", v.GetName()),
	)
}

func (s *FederationService) logvalue_Org_Federation_CArgument(v *Org_Federation_CArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("a", v.A),
	)
}

func (s *FederationService) logvalue_Org_Federation_D(v *D) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("name", v.GetName()),
	)
}

func (s *FederationService) logvalue_Org_Federation_DArgument(v *Org_Federation_DArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("b", v.B),
	)
}

func (s *FederationService) logvalue_Org_Federation_E(v *E) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("name", v.GetName()),
	)
}

func (s *FederationService) logvalue_Org_Federation_EArgument(v *Org_Federation_EArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("c", v.C),
		slog.String("d", v.D),
	)
}

func (s *FederationService) logvalue_Org_Federation_F(v *F) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("name", v.GetName()),
	)
}

func (s *FederationService) logvalue_Org_Federation_FArgument(v *Org_Federation_FArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("c", v.C),
		slog.String("d", v.D),
	)
}

func (s *FederationService) logvalue_Org_Federation_G(v *G) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("name", v.GetName()),
	)
}

func (s *FederationService) logvalue_Org_Federation_GArgument(v *Org_Federation_GArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Org_Federation_GetResponse(v *GetResponse) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("hname", v.GetHname()),
		slog.String("jname", v.GetJname()),
	)
}

func (s *FederationService) logvalue_Org_Federation_GetResponseArgument(v *Org_Federation_GetResponseArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Org_Federation_H(v *H) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("name", v.GetName()),
	)
}

func (s *FederationService) logvalue_Org_Federation_HArgument(v *Org_Federation_HArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("e", v.E),
		slog.String("f", v.F),
		slog.String("g", v.G),
	)
}

func (s *FederationService) logvalue_Org_Federation_I(v *I) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("name", v.GetName()),
	)
}

func (s *FederationService) logvalue_Org_Federation_IArgument(v *Org_Federation_IArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Org_Federation_J(v *J) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("name", v.GetName()),
	)
}

func (s *FederationService) logvalue_Org_Federation_JArgument(v *Org_Federation_JArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("i", v.I),
	)
}
