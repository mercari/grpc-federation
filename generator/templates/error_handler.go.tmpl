{{- define "errorHandler" }}
{{- $def := .Definition }}
{{- if $def.HasErrorHandler }}
{{- $grpcErrors := $def.GRPCErrors }}
{{- if $grpcErrors }}
grpcfed.SetGRPCError(ctx, value, err)
type localStatusType struct {
	status *grpcfed.Status
	logLevel slog.Level
}
stat, handleErr := func() (*localStatusType, error) {
	var stat *grpcfed.Status
	{{- range $grpcErrors }}
	{{- $logLevel := .LogLevelValue }}
	{{- if .VariableDefinitionSet }}
	{{- template "evalDefSet" .VariableDefinitionSet }}
	{{- end }}
	if err := grpcfed.If(ctx, &grpcfed.IfParam[*localValueType]{
		Value: value,
		Expr: `{{ .If.Expr }}`,
		CacheIndex: {{ $def.CELCacheIndex }},
		Body: func(value *localValueType) error {
			{{- if .Ignore }}
			stat = grpcfed.NewGRPCStatus(grpcfed.OKCode, "ignore error")
			return nil
			{{- else if .IgnoreAndResponse }}
			stat = grpcfed.NewGRPCStatus(grpcfed.OKCode, "ignore error")
			if err := grpcfed.IgnoreAndResponse(ctx, value, grpcfed.Def[{{ $def.Type }}, *localValueType]{
				Name: "{{ $def.Key }}",
				Type: {{ $def.CELType }},
				Setter: func(value *localValueType, v {{ $def.Type }}) error {
					ret = v // assign customized response to the result value.
					return nil
				},
				By: `{{ .IgnoreAndResponse.Expr }}`,
				ByCacheIndex: {{ $def.CELCacheIndex }},
			}); err != nil {
				grpcfed.Logger(ctx).ErrorContext(ctx, "failed to set response when ignored", slog.String("error", err.Error()))
				return nil
			}
			return nil
			{{- else }}

			{{- if .Message }}
			errmsg, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
				Value: value,
				Expr: `{{ .Message.Expr }}`,
				OutType: reflect.TypeOf(""),
				CacheIndex: {{ $def.CELCacheIndex }},
			})
			if err != nil {
				return err
			}
			errorMessage := errmsg.(string)
			{{- else }}
			errorMessage := "error"
			{{- end }}

			{{- $details := .Details }}
			{{- if $details }}
			var details       []grpcfed.ProtoMessage
			{{- range $details }}
			{{- if .VariableDefinitionSet }}
			if _, err := func() (any, error){
				{{- template "evalDefSet" .VariableDefinitionSet }}
				return nil, nil
			}(); err != nil {
				return err
			}
			{{- end }}
			if err := grpcfed.If(ctx, &grpcfed.IfParam[*localValueType]{
				Value: value,
				Expr: `{{ .If.Expr }}`,
				CacheIndex: {{ $def.CELCacheIndex }},
				Body: func(value *localValueType) error {
					{{- if .MessageSet }}
					if _, err := func() (any, error){
						{{- template "evalDefSet" .MessageSet }}
						return nil, nil
					}(); err != nil {
						return err
					}
					{{- range $idx, $def := .MessageSet.Definitions }}
					if detail := grpcfed.CustomMessage(ctx, &grpcfed.CustomMessageParam{
						Value: value,
						MessageValueName: "{{ $def.Name }}",
						CacheIndex: {{ $def.CELCacheIndex }},
						MessageIndex: {{ $idx }},
					}); detail != nil {
						details = append(details, detail)
					}
					{{- end }}
					{{- end }}

					{{- range .By }}
					{
						detail, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
							Value: value,
							Expr: `{{ .Expr }}`,
							OutType: reflect.TypeOf({{ .Type }}),
							CacheIndex: {{ $def.CELCacheIndex }},
						})
						if err != nil {
							grpcfed.Logger(ctx).ErrorContext(ctx, "failed setting error details", slog.String("error", err.Error()))
						}
						if detail != nil {
							details = append(details, detail.(grpcfed.ProtoMessage))
						}
					}
					{{- end }}

					{{- range .PreconditionFailures }}
					{{- template "preconditionFailure" . }}
					{{- end }}
					{{- range .BadRequests }}
					{{- template "badRequest" . }}
					{{- end }}
					{{- range .LocalizedMessages }}
					{{- template "localizedMessage" . }}
					{{- end }}
					return nil
				},
			}); err != nil {
				return err
			}
			{{- end }}
			{{- end }}

			{{- if $details }}
			status := grpcfed.NewGRPCStatus(grpcfed.{{ .GoGRPCStatusCode }}, errorMessage)
			statusWithDetails, err := status.WithDetails(details...)
			if err != nil {
				grpcfed.Logger(ctx).ErrorContext(ctx, "failed setting error details", slog.String("error", err.Error()))
				stat = status
			} else {
				stat = statusWithDetails
			}
			{{- else }}
			stat = grpcfed.NewGRPCStatus(grpcfed.{{ .GoGRPCStatusCode }}, errorMessage)
			{{- end }}
			return nil
			{{- end }}
		},
	}); err != nil {
		return nil, err
	}
	if stat != nil {
		return &localStatusType{status: stat, logLevel: {{ $logLevel }}}, nil
	}
	{{- end }}
	return nil, nil
}()
if handleErr != nil {
	grpcfed.Logger(ctx).ErrorContext(ctx, "failed to handle error", slog.String("error", handleErr.Error()))
	// If it fails during error handling, return the original error.
	if err := s.errorHandler(ctx, {{ $def.ServiceName }}_DependentMethod_{{ $def.DependentMethodName }}, err); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, grpcfed.NewErrorWithLogAttrs(err, slog.LevelError, grpcfed.LogAttrs(ctx))
	}
} else if stat != nil {
	if err := s.errorHandler(ctx, {{ $def.ServiceName }}_DependentMethod_{{ $def.DependentMethodName }}, stat.status.Err()); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, grpcfed.NewErrorWithLogAttrs(err, stat.logLevel, grpcfed.LogAttrs(ctx))
	}
} else {
	if err := s.errorHandler(ctx, {{ $def.ServiceName }}_DependentMethod_{{ $def.DependentMethodName }}, err); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, grpcfed.NewErrorWithLogAttrs(err, slog.LevelError, grpcfed.LogAttrs(ctx))
	}
}
{{- else }}
if err := s.errorHandler(ctx, {{ $def.ServiceName }}_DependentMethod_{{ $def.DependentMethodName }}, err); err != nil {
	grpcfed.RecordErrorToSpan(ctx, err)
	return nil, grpcfed.NewErrorWithLogAttrs(err, slog.LevelError, grpcfed.LogAttrs(ctx))
}
{{- end }}
{{- else }}
return nil, err
{{- end }}
{{- end }}

{{- define "detailMessages" }}
{{- $defGroups := .VariableDefinitionGroups }}
{{- $defGroupsLen := len $defGroups }}
{{- if gt $defGroupsLen 0 }}
func(){
	_, err := func() (any, error) {
		{{- if eq $defGroupsLen 1 }}
		{{- template "evalDefGroup" (map "Level" 1 "Definition" (index $defGroups 0)) }}
		{{- else }}
		{{- if . }}
		eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)
		{{- end }}
		{{- range $defGroups }}
		grpcfed.GoWithRecover(eg, func() (any, error) {
		{{- template "evalDefGroup" (map "Level" 2 "Definition" .) }}
			return nil, nil
		})
		{{- end }}
		{{- if $defGroups }}
		if err := eg.Wait(); err != nil {
			return nil, err
		}
		{{- end }}
		{{- end }}
		return nil, nil
	}()
	if err != nil {
		grpcfed.Logger(ctx).ErrorContext(ctx, "failed resolving messages", slog.String("error", err.Error()))
		return
	}
	{{- range $i, $message := .Messages.Defs }}
	if detail := grpcfed.CustomMessage(ctx, &grpcfed.CustomMessageParam{
		Value: value,
		MessageValueName: "{{ $message.Name }}",
		CacheIndex: {{ $message.CELCacheIndex }},
		MessageIndex: {{ $i }},
	}); detail != nil {
		details = append(details, detail)
	}
	{{- end }}
}()
{{- end }}
{{- end }}

{{- define "preconditionFailure" }}
if detail := grpcfed.PreconditionFailure(ctx, value, []*grpcfed.PreconditionFailureViolation{
	{{- range .Violations }}
	{
		Type:    `{{ .Type.Expr }}`,
		Subject: `{{ .Subject.Expr }}`,
		Desc:    `{{ .Description.Expr }}`,
		TypeCacheIndex: {{ .CELCacheIndex }},
		SubjectCacheIndex: {{ .CELCacheIndex }},
		DescCacheIndex: {{ .CELCacheIndex }},
	},
	{{- end }}
}); detail != nil {
	details = append(details, detail)
}
{{- end }}

{{- define "badRequest" }}
if detail := grpcfed.BadRequest(ctx, value, []*grpcfed.BadRequestFieldViolation{
	{{- range .FieldViolations }}
	{
		Field: `{{ .Field.Expr }}`,
		Desc:  `{{ .Description.Expr }}`,
		FieldCacheIndex: {{ .CELCacheIndex }},
		DescCacheIndex: {{ .CELCacheIndex }},
	},
	{{- end }}
}); detail != nil {
	details = append(details, detail)
}
{{- end }}

{{- define "localizedMessage" }}
if detail := grpcfed.LocalizedMessage(ctx, &grpcfed.LocalizedMessageParam{
	Value: value,
	Locale: "{{ .Locale }}",
	Message: `{{ .Message.Expr }}`,
	CacheIndex: {{ .CELCacheIndex }},
}); detail != nil {
	details = append(details, detail)
}
{{- end }}
