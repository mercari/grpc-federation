{{- define "castRepeated" }}
ret := make({{ .ReturnType }}, 0, len(from))
for _, v := range from {
	{{- if .ElemRequiredCast }}
	casted, err := s.{{ .ElemCastName }}(v)
	if err != nil {
		return nil, err
	}
	ret = append(ret, casted)
	{{- else }}
	ret = append(ret, v)
	{{- end }}
}
{{- $wrapper := .CastOneofWrapper }}
{{- if $wrapper }}
return &{{ $wrapper.Name }}{
	{{ $wrapper.FieldName }}: ret,
}, nil
{{- else }}
return ret, nil
{{- end }}
{{- end }}

{{- define "castMessage" }}
if from == nil {
	return nil, nil
}
{{- range .Fields }}
{{- $fieldName := toLocalVariable .ToFieldName }}
{{- if .RequiredCast }}
{{ $fieldName }}, err := s.{{ .CastName }}(from.Get{{ .FromFieldName }}())
if err != nil {
	return nil, err
}
{{- else }}
{{ $fieldName }} := from.Get{{ .FromFieldName }}()
{{- end }}
{{- end }}
ret := &{{ .Name }}{
	{{- range .Fields }}
	{{ .ToFieldName }}: {{ toLocalVariable .ToFieldName }},
	{{- end }}
}


{{ $oneofs := .Oneofs }}
{{- if $oneofs }}
{{- range $oneofs }}
switch x := from.{{ .Name }}.(type) {
	{{ $name := .Name }}
	{{- $localName := toLocalVariable $name }}
	{{- range .Fields }}
	case {{ .FromType }}:
	{{- if .RequiredCast }}
	{{ $localName }}, err := s.{{ .CastName }}(x)
	if err != nil {
		return nil, err
	}
	{{- else }}
	{{ $localName }} := x
	{{- end }}
	ret.{{ $name }} = {{ $localName }}
	{{- end }}
}
{{- end }}
{{- end }}
{{- $wrapper := .CastOneofWrapper }}
{{- if $wrapper }}
return &{{ $wrapper.Name }}{
	{{ $wrapper.FieldName }}: ret,
}, nil
{{- else }}
return ret, nil
{{- end }}

{{- end }}

{{- define "castOneof" }}
if from == nil {
	return nil, nil
}
{{ $fieldName := toLocalVariable .ToFieldName }}
{{- if .RequiredCast }}
{{ $fieldName }}, err := s.{{ .CastName }}(from.{{ .FromFieldName }})
if err != nil {
	return nil, err
}
{{- else }}
{{ $fieldName }} := from.{{ .FromFieldName }}
{{- end }}
return &{{ .Name }}{ {{ .ToFieldName }}: {{ $fieldName }} }, nil
{{- end }}

{{- define "castEnum" }}
var ret {{ .ReturnType }}
switch from {
	{{- range .FromValues }}
	case {{ .FromValue }}:
		ret = {{ .ToValue }}
	{{- end }}
	{{- if .DefaultValue }}
	default:
		ret = {{ .DefaultValue }}
	{{- end }}
}
{{- $wrapper := .CastOneofWrapper }}
{{- if $wrapper }}
return &{{ $wrapper.Name }}{
	{{ $wrapper.FieldName }}: ret,
}, nil
{{- else }}
return ret, nil
{{- end }}
{{- end }}

{{- define "castMap" }}
ret := {{ .ReturnType }}{}
for k, v := range from {
	{{- if .KeyRequiredCast }}
	key, err := s.{{ .KeyCastName }}(k)
	if err != nil {
		return nil, err
	}
	{{- else }}
	key := k
	{{- end }}
	{{- if .ValueRequiredCast }}
	val, err := s.{{ .ValueCastName }}(v)
	if err != nil {
	return nil, err
	}
	{{- else }}
	val := v
	{{- end }}
	ret[key] = val
}
{{- $wrapper := .CastOneofWrapper }}
{{- if $wrapper }}
return &{{ $wrapper.Name }}{
	{{ $wrapper.FieldName }}: ret,
}, nil
{{- else }}
return ret, nil
{{- end }}
{{- end }}

{{- define "castEnumAndNumber" }}
{{- $wrapper := .CastOneofWrapper }}
{{- if $wrapper }}
return &{{ $wrapper.Name }}{
	{{ $wrapper.FieldName }}: {{ .ReturnType }}(from),
}, nil
{{- else }}
return {{ .ReturnType }}(from), nil
{{- end }}
{{- end }}

{{- define "castRequiredValidationNumber" }}
ret, err := grpcfed.{{ .CastWithValidationName }}(from)
{{- $wrapper := .CastOneofWrapper }}
{{- if $wrapper }}
if err != nil {
	return nil, err
}
return &{{ $wrapper.Name }}{
	{{ $wrapper.FieldName }}: ret,
}, nil
{{- else }}
if err != nil {
	return ret, err
}
return ret, nil
{{- end }}
{{- end }}

{{- define "castDefault" }}
{{- $wrapper := .CastOneofWrapper }}
{{- if $wrapper }}
return &{{ $wrapper.Name }}{
	{{ $wrapper.FieldName }}: {{ .ReturnType }}(from),
}, nil
{{- else }}
return {{ .ReturnType }}(from), nil
{{- end }}
{{- end }}
