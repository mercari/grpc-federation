{{- define "declDef" }}
{{- $def := . }}
/*
{{ .ProtoComment }}
*/
def_{{ .Key }} := func(ctx context.Context) error {
	{{- if .IsMap -}}
	{{- $mapResolver := .MapResolver -}}
	return grpcfed.EvalDefMap(ctx, value, grpcfed.DefMap[{{ .Type }}, {{ $mapResolver.IteratorSourceType }}, *localValueType]{
		{{- if .UseIf }}
		If: `{{ .If }}`,
		IfCacheIndex: {{ .CELCacheIndex }},
		{{- end }}
		Name:   `{{ .Key }}`,
		Type:   {{ .CELType }},
		{{- if $mapResolver.IsEnum }}
		Setter: func(value *localValueType, v {{ .Type }}) error {
			dst, err := {{ .EnumCastFunc }}
			if err != nil {
				return err
			}
			value.vars.{{ .Key }} = dst
			return nil
		},
		{{- else }}
		Setter: func(value *localValueType, v {{ .Type }}) error {
			value.vars.{{ .Key }} = v
			return nil
		},
		{{- end }}
		IteratorName: `{{ $mapResolver.IteratorName }}`,
		IteratorType: {{ $mapResolver.IteratorCELType }},
		IteratorSource: func(value *localValueType) []{{ $mapResolver.IteratorSourceType }}{ return {{ $mapResolver.IteratorSource }} },
		Iterator: func(ctx context.Context, value *grpcfed.MapIteratorValue) (any, error) {
			{{- if $mapResolver.IsBy }}
			{{- $by := $mapResolver.MapExpr.Expr.By }}
			return grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
				Value: value,
				Expr: `{{ $by.Expr }}`,
				OutType: reflect.TypeOf({{ $mapResolver.IteratorZeroValue }}),
				CacheIndex: {{ .CELCacheIndex }},
			})
			{{- else if $mapResolver.IsEnum }}
			{{- $enumExpr := $mapResolver.MapExpr.Expr.Enum }}
			return grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
				Value: value,
				Expr: `{{ $enumExpr.By.Expr }}`,
				OutType: reflect.TypeOf({{ $mapResolver.IteratorZeroValue }}),
				CacheIndex: {{ .CELCacheIndex }},
			})
			{{- else if $mapResolver.IsMessage }}
			{{- $arguments := $mapResolver.Arguments }}
			args := &{{ $mapResolver.Service.ServiceName }}_{{ $mapResolver.RequestType }}{
				{{- range $arguments }}
				{{- if not .CEL }}
				{{ .Name }}: {{ .Value }}, {{ .ProtoComment }}
				{{- end }}
				{{- end }}
			}
			{{- range $arguments }}
			{{- template "setCELArgument" (map "Argument" . "Definition" $def) }}
			{{- end }}
			return s.{{ $mapResolver.Caller }}(ctx, args)
			{{- end }}
		},
	})
	{{- else -}}
	return grpcfed.EvalDef(ctx, value, grpcfed.Def[{{ .Type }}, *localValueType]{
		{{- if .UseIf }}
		If: `{{ .If }}`,
		IfCacheIndex: {{ .CELCacheIndex }},
		{{- end }}
		Name:   `{{ .Key }}`,
		Type:   {{ .CELType }},
		{{- if .IsEnum }}
		Setter: func(value *localValueType, v {{ .Type }}) error {
			dst, err := {{ .EnumCastFunc }}
			if err != nil {
				return err
			}
			value.vars.{{ .Key }} = dst
			return nil
		},
		{{- else }}
		Setter: func(value *localValueType, v {{ .Type }}) error {
			value.vars.{{ .Key }} = v
			return nil
		},
		{{- end }}
		{{- if .IsBy }}
		By:     `{{ .By.Expr }}`,
		ByCacheIndex: {{ .CELCacheIndex }},
		{{- else if .IsEnum }}
		By: `{{ .Enum.By.Expr }}`,
		ByCacheIndex: {{ .CELCacheIndex }},
		{{- else if .IsValidation }}
		Validation:  func(ctx context.Context, value *localValueType) error {
			{{- template "messageValidation" (map "Ctx" "ctx" "Error" .ValidationError) }}
		},
		{{- else }}
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			{{- $arguments := .Arguments }}
			{{- if .UseArgs }}
			args := &{{ .RequestType }}{
				{{- range $arguments }}
				{{- if not .CEL }}
				{{ .Name }}: {{ .Value }}, {{ .ProtoComment }}
				{{- end }}
				{{- end }}
			}
			{{- end }}
			{{- range $arguments }}
			{{- template "setCELArgument" (map "Argument" . "Definition" $def) }}
			{{- end }}
			{{- if .IsCall }}
			grpcfed.Logger(ctx).DebugContext(ctx, "call {{ .MethodFQDN }}", slog.Any("{{ .RequestTypeFQDN }}", s.logvalue_{{ .LogValueRequestType }}(args)))
			{{- end }}
			{{- if .UseTimeout }}
			ret, err := grpcfed.WithTimeout[{{ .ReturnType }}](ctx, "{{ .MethodFQDN }}", {{ .Timeout }}, func(ctx context.Context) (*{{ .ReturnType }}, error) {
				{{- if .UseRetry }}
				{{- template "retry" (map "Retry" .Retry) }}
				return grpcfed.WithRetry(ctx, &grpcfed.RetryParam[{{ .ReturnType }}]{
					Value: value,
					If: `{{ .Retry.If.Expr }}`,
					CacheIndex: {{ .CELCacheIndex }},
					BackOff: b,
					Body: func() (*{{ .ReturnType }}, error) {
						return s.{{ .Caller }}(ctx, args)
					},
				})
				{{- else }}
				return s.{{ .Caller }}(ctx, args)
				{{- end }}
			})
			{{- else if .UseRetry }}
			{{- template "retry" (map "Retry" .Retry) }}
			ret, err := grpcfed.WithRetry(ctx, &grpcfed.RetryParam[{{ .ReturnType }}]{
				Value: value,
				If: `{{ .Retry.If.Expr }}`,
				CacheIndex: {{ .CELCacheIndex }},
				BackOff: b,
				Body: func() (*{{ .ReturnType }}, error) {
					return s.{{ .Caller }}(ctx, args)
				},
			})
			{{- else }}
			ret, err := s.{{ .Caller }}(ctx, args)
			{{- end }}
			if err != nil {
				{{- template "errorHandler" (map "Definition" .) }}
			}
			return ret, nil
		},
		{{- end }}
	})
	{{- end }}
}
{{- end }}

{{- define "evalMessageDef" }}
if err := def_{{ .Definition.Key }}({{ .Ctx }}); err != nil {
	grpcfed.RecordErrorToSpan({{ .Ctx }}, err)
	return nil, err
}
{{- end }}

{{- define "evalDefGroup" }}
{{- if .Definition.IsConcurrent }}
eg, {{ printf "ctx%d" .Level }} := grpcfed.ErrorGroupWithContext({{ parentCtx .Level }})
{{- range .Definition.Starts }}
grpcfed.GoWithRecover(eg, func() (any, error) {
	{{- template "evalDefGroup" (map "Level" (add $.Level 1) "Definition" .) }}
	return nil, nil
})
{{- end }}
if err := eg.Wait(); err != nil {
	return nil, err
}
{{- if .Definition.ExistsEnd }}
{{- template "evalMessageDef" (map "Ctx" (parentCtx .Level) "Definition" .Definition.End) }}
{{- end -}}

{{- else -}}

{{- if .Definition.ExistsStart }}
{{- template "evalDefGroup" (map "Level" .Level "Definition" .Definition.Start) }}
{{- end -}}

{{- if .Definition.ExistsEnd }}
{{- template "evalMessageDef" (map "Ctx" (parentCtx .Level) "Definition" .Definition.End) }}
{{- end -}}

{{- end -}}
{{- end }}

{{- define "evalDefSet" -}}

{{ range .Definitions }}
{{- template "declDef" . }}
{{ end }}
{{- $depGraph := .DependencyGraph }}
{{- if $depGraph }}
// A tree view of message dependencies is shown below.
/*
{{ $depGraph }}*/
{{- end }}
{{- $defGroups := .VariableDefinitionGroups }}
{{- $defGroupsLen := len $defGroups }}
{{- if eq $defGroupsLen 1 }}
{{- template "evalDefGroup" (map "Level" 1 "Definition" (index $defGroups 0)) }}
{{- else }}
{{- if $defGroups }}
eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)
{{- end }}
{{ range $defGroups }}
grpcfed.GoWithRecover(eg, func() (any, error) {
	{{- template "evalDefGroup" (map "Level" 2 "Definition" .) }}
	return nil, nil
})
{{ end }}
{{- if $defGroups }}
if err := eg.Wait(); err != nil {
	return nil, err
}
{{- end }}
{{- end }}

{{- end }}

{{- define "setCELArgument" -}}
{{- $def := .Definition }}
{{- $arg := .Argument }}

{{- if $arg.CEL }}
{{- if $arg.If }}
{{ $arg.ProtoComment }}
if err := grpcfed.If(ctx, &grpcfed.IfParam[*localValueType]{
	Value: value,
	Expr: `{{ $arg.If.Expr }}`,
	CacheIndex: {{ $def.CELCacheIndex }},
	Body: func(value *localValueType) error {
		return grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[{{ $arg.Type }}]{
			Value: value,
			Expr: `{{ $arg.CEL.Expr }}`,
			CacheIndex: {{ $def.CELCacheIndex }},
			Setter: func(v {{ $arg.Type }}) error {
				{{- template "setArgumentBySetter" $arg }}
			},
		})
	},
}); err != nil {
	return nil, err
}
{{- else }}
{{ $arg.ProtoComment }}
if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[{{ $arg.Type }}]{
	Value: value,
	Expr: `{{ $arg.CEL.Expr }}`,
	CacheIndex: {{ $def.CELCacheIndex }},
	Setter: func(v {{ $arg.Type }}) error {
		{{- template "setArgumentBySetter" $arg }}
	},
}); err != nil {
	return nil, err
}
{{- end }}
{{- end }}

{{- end }}

{{- define "setCELValue" -}}
{{- $def := .Definition }}
{{- $arg := .Argument }}

if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[{{ $arg.Type }}]{
	Value: value,
	Expr: `{{ $arg.CEL.Expr }}`,
	CacheIndex: {{ $def.CELCacheIndex }},
	Setter: func(v {{ $arg.Type }}) error {
		{{- template "setArgumentBySetter" $arg }}
	},
}); err != nil {
	return err
}
{{- end }}

{{- define "setArgumentBySetter" -}}

{{- if ne (len .InlineFields) 0 }}
{{- range .InlineFields }}
{{- template "setArgument" . }}
{{- end }}
{{- else }}
{{- template "setArgument" . }}
{{- end }}
return nil

{{- end }}

{{- define "setArgument" -}}

{{- if .OneofName }}
{{- if .RequiredCast }}
{{ toLocalVariable .Name }}, err := {{ .Value }}
if err != nil {
	return err
}
args.{{ .OneofName }} = &{{ .OneofFieldName }}{
	{{ .Name }}: {{ toLocalVariable .Name }},
}
{{- else }}
args.{{ .OneofName }} = &{{ .OneofFieldName }}{
	{{ .Name }}: {{ .Value }},
}
{{- end }}

{{- else }}

{{- if .RequiredCast }}
{{ toLocalVariable .Name }}, err := {{ .Value }}
if err != nil {
	return err
}
args.{{ .Name }} = {{ toLocalVariable .Name }}
{{- else }}
args.{{ .Name }} = {{ .Value }}
{{- end }}

{{- end }}

{{- end }}
