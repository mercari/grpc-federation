{{- define "plugin" }}
{{- range . }}
{{ $pluginName := .PluginName }}
{{ $pluginFunctions := .PluginFunctions }}
type {{ $pluginName }} interface {
	{{- range $pluginFunctions }}
	{{ .GoName }}(context.Context, {{- range .Args }}{{ .Type }},{{- end }}) ({{- .Return.Type }}, error)
	{{- end }}
}

{{- if .Capability.Network }}

func init() {
	http.DefaultTransport = grpcfednet.DefaultTransport()
}

{{- end }}

func Register{{ $pluginName }}(plug {{ $pluginName }}) {
	grpcfed.PluginMainLoop(
		grpcfed.CELPluginVersionSchema{
			ProtocolVersion:   grpcfed.CELPluginProtocolVersion,
			FederationVersion: "{{ .FederationVersion }}",
			Functions: []string{
				{{- range $pluginFunctions }}
				"{{ .ExportName }}",
				{{- end }}
			},
		},
		func(ctx context.Context, req *grpcfed.CELPluginRequest) (*grpcfed.CELPluginResponse, error) {
			switch req.GetMethod() {
			{{- range $pluginFunctions }}
			case "{{ .ExportName }}":
				{{- $argLen := len .Args }}
				if len(req.GetArgs()) != {{ $argLen }} {
					return nil, fmt.Errorf("%s: invalid argument number: %d. expected number is %d", req.GetMethod(), len(req.GetArgs()), {{ $argLen }})
				}
				{{- range $idx, $arg := .Args }}
				arg{{ $idx }}, err := grpcfed.{{ $arg.Converter }}(req.GetArgs()[{{ $idx }}])
				if err != nil {
					return nil, err
				}
				{{- end }}
				ret, err := plug.{{ .GoName }}(ctx, {{- range $idx, $arg := .Args }}arg{{ $idx }},{{- end }})
				if err != nil {
					return nil, err
				}
				return grpcfed.{{ .Return.Converter }}(ret)
			{{- end }}
			}
			return nil, fmt.Errorf("unexpected method name: %s", req.GetMethod())
		},
	)
}
{{- end }}
{{- end }}
