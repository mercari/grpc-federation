{{- define "plugin" }}
{{- range . }}
{{ $pluginName := .PluginName }}
{{ $pluginFunctions := .PluginFunctions }}
type {{ $pluginName }} interface {
	{{- range $pluginFunctions }}
	{{ .GoName }}(context.Context, {{- range .Args }}{{ .Type }},{{- end }}) ({{- .Return.Type }}, error)
	{{- end }}
}

{{- if .Capability.Network }}

func init() {
	http.DefaultTransport = grpcfednet.DefaultTransport()
}

func Register{{ $pluginName }}(plug {{ $pluginName }}) {
	ln, err := grpcfednet.Listen("tcp", ":0")
	if err != nil {
		panic(err)
	}

	addr := ln.Addr().String()

	mux := http.NewServeMux()
	mux.HandleFunc("/version", func(w http.ResponseWriter, r *http.Request) {
		_, _ = grpcfednet.ReadRequestBody(r)
		b, _ := grpcfed.EncodeCELPluginVersion(grpcfed.CELPluginVersionSchema{
			ProtocolVersion:   grpcfed.CELPluginProtocolVersion,
			FederationVersion: "{{ .FederationVersion }}",
			Functions: []string{
				{{- range $pluginFunctions }}
				"{{ .ExportName }}",
				{{- end }}
			},
		})
		w.Write(b)
	})

	block := make(chan struct{})

	mux.HandleFunc("/exit", func(w http.ResponseWriter, r *http.Request) {
		_, _ = grpcfednet.ReadRequestBody(r)
		w.WriteHeader(http.StatusOK)
		block <- struct{}{}
	})

	mux.HandleFunc("/gc", func(w http.ResponseWriter, r *http.Request) {
		_, _ = grpcfednet.ReadRequestBody(r)
		runtime.GC()
		w.WriteHeader(http.StatusOK)
	})

	mux.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		b, err := grpcfednet.ReadRequestBody(r)
		if err != nil {
			grpcfednet.Error(w, err)
			return
		}
		res, err := handle{{ $pluginName }}(b, plug)
		if err != nil {
			res = grpcfed.ToErrorCELPluginResponse(err)
		}
		encoded, err := grpcfed.EncodeCELPluginResponse(res)
		if err != nil {
			grpcfednet.Error(w, err)
			return
		}
		w.WriteHeader(http.StatusOK)
		w.Write(encoded)
	})

	go func() {
		if err := http.Serve(ln, mux); err != nil {
			panic(err)
		}
	}()

	grpcfednet.WaitForReadyPluginServer(addr)

	<-block
}

{{- else }}
func Register{{ $pluginName }}(plug {{ $pluginName }}) {
	reader := bufio.NewReader(os.Stdin)
	for {
		content, err := reader.ReadString('\n')
		if err != nil {
			continue
		}
		if content == "" {
			continue
		}
		if content == "exit\n" {
			return
		}
		if content == "gc\n" {
			runtime.GC()
			continue
		}
		if content == "version\n" {
			b, _ := grpcfed.EncodeCELPluginVersion(grpcfed.CELPluginVersionSchema{
				ProtocolVersion:   grpcfed.CELPluginProtocolVersion,
				FederationVersion: "{{ .FederationVersion }}",
				Functions: []string{
					{{- range $pluginFunctions }}
					"{{ .ExportName }}",
					{{- end }}
				},
			})
			_, _ = os.Stdout.Write(append(b, '\n'))
			continue
		}
		res, err := handle{{ $pluginName }}([]byte(content), plug)
		if err != nil {
			res = grpcfed.ToErrorCELPluginResponse(err)
		}
		encoded, err := grpcfed.EncodeCELPluginResponse(res)
		if err != nil {
			fmt.Fprintf(os.Stderr, "fatal error: failed to encode cel plugin response: %s\n", err.Error())
			os.Exit(1)
		}
		_, _ = os.Stdout.Write(append(encoded, '\n'))
	}
}
{{- end }}

func handle{{ $pluginName }}(content []byte, plug {{ $pluginName }}) (res *grpcfed.CELPluginResponse, e error) {
	defer func() {
		if e := recover(); e != nil {
			res = grpcfed.ToErrorCELPluginResponse(errors.New(fmt.Sprintf("%v", e)))
		}
	}()

	req, err := grpcfed.DecodeCELPluginRequest(content)
	if err != nil {
		return nil, err
	}
	md := make(metadata.MD)
	for _, m := range req.GetMetadata() {
		md[m.GetKey()] = m.GetValues()
	}
	ctx := metadata.NewIncomingContext(context.Background(), md)
	switch req.GetMethod() {
	{{- range $pluginFunctions }}
	case "{{ .ExportName }}":
		{{- $argLen := len .Args }}
		if len(req.GetArgs()) != {{ $argLen }} {
			return nil, fmt.Errorf("%s: invalid argument number: %d. expected number is %d", req.GetMethod(), len(req.GetArgs()), {{ $argLen }})
		}
		{{- range $idx, $arg := .Args }}
		arg{{ $idx }}, err := grpcfed.{{ $arg.Converter }}(req.GetArgs()[{{ $idx }}])
		if err != nil {
			return nil, err
		}
		{{- end }}
		ret, err := plug.{{ .GoName }}(ctx, {{- range $idx, $arg := .Args }}arg{{ $idx }},{{- end }})
		if err != nil {
			return nil, err
		}
		return grpcfed.{{ .Return.Converter }}(ret)
	{{- end }}
	}
	return nil, fmt.Errorf("unexpected method name: %s", req.GetMethod())
}
{{- end }}
{{- end }}
