// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
// versions:
//     protoc-gen-grpc-federation: {{ .Version }}
// source: {{ .Source }}
package {{ .GoPackage.Name }}

import (
	{{- range .StandardImports }}
	"{{ .Path }}"
	{{- end }}
	{{ range .DefaultImports }}
	{{- if .Alias }}
	{{ .Alias }} "{{ .Path }}"
	{{- else }}
	"{{ .Path }}"
	{{- end }}
	{{- end }}

	{{ range .Imports }}
	{{ .Alias }} "{{ .Path }}"
	{{- end }}
)

var (
	_ = reflect.Invalid // to avoid "imported and not used error"
)

{{- range .Types }}

// {{ .Desc }}.
type {{ .Name }} struct {
	{{- range .Fields }}
	{{- if .Name }}
	{{ .Name }} {{ .Type }}
	{{- else }}
	{{ .Type }}
	{{- end }}
	{{- end }}
}

{{- end }}

{{- $enums := .Enums }}

{{- range .Services }}

{{- $serviceName := .ServiceName }}
{{- $serviceDependencies := .ServiceDependencies }}
{{- $customResolvers := .CustomResolvers }}
{{- $types := .Types }}
{{- $oneofTypes := .OneofTypes }}
{{- $celPlugins := .CELPlugins }}
{{- $env := .Env }}

// {{ $serviceName }}Config configuration required to initialize the service that use GRPC Federation.
type {{ $serviceName }}Config struct {
	{{- if $serviceDependencies }}
	// Client provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
	// If this interface is not provided, an error is returned during initialization.
	Client {{ $serviceName }}ClientFactory // required
	{{- end }}
	{{- if $customResolvers }}
	// Resolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
	// If this interface is not provided, an error is returned during initialization.
	Resolver {{ $serviceName }}Resolver // required
	{{- end }}
	{{- if $celPlugins }}
	// CELPlugin If you use the plugin feature to extend the CEL API,
	// you must write a plugin and output WebAssembly.
	// In this field, configure to load wasm with the path to the WebAssembly file and the sha256 value.
	CELPlugin *{{ $serviceName }}CELPluginConfig
	{{- end }}
	// ErrorHandler Federation Service often needs to convert errors received from downstream services.
	// If an error occurs during method execution in the Federation Service, this error handler is called and the returned error is treated as a final error.
	ErrorHandler grpcfed.ErrorHandler
	// Logger sets the logger used to output Debug/Info/Error information.
	Logger *slog.Logger
}

// {{ $serviceName }}ClientFactory provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
type {{ $serviceName }}ClientFactory interface {
	{{- range $serviceDependencies }}
	// {{ .ClientName }} create a gRPC Client to be used to call methods in {{ .ServiceName }}.
	{{ .ClientName }}({{ $serviceName }}ClientConfig) ({{ .ClientType }}, error)
	{{- end }}
}

// {{ $serviceName }}ClientConfig helper to create gRPC client.
// Hints for creating a gRPC Client.
type {{ $serviceName }}ClientConfig struct {
	// Service FQDN ( `<package-name>.<service-name>` ) of the service on Protocol Buffers.
	Service string
}

// {{ $serviceName }}DependentClientSet has a gRPC client for all services on which the federation service depends.
// This is provided as an argument when implementing the custom resolver.
type {{ $serviceName }}DependentClientSet struct {
	{{- range $serviceDependencies }}
	{{ .ClientName }} {{ .ClientType }}
	{{- end }}
}

// {{ $serviceName }}Resolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
type {{ $serviceName }}Resolver interface {
	{{- range $customResolvers }}
	// {{ .Name }} implements resolver for "{{ .ProtoFQDN }}".
	{{ .Name }}(context.Context, *{{ .RequestType }}) ({{ .ReturnType }}, error)
	{{- end }}
}

// {{ $serviceName }}CELPluginWasmConfig type alias for grpcfedcel.WasmConfig.
type {{ $serviceName }}CELPluginWasmConfig = grpcfedcel.WasmConfig

// {{ $serviceName }}CELPluginConfig hints for loading a WebAssembly based plugin.
type {{ $serviceName }}CELPluginConfig struct {
	{{- range $celPlugins }}
	{{ .FieldName }} {{ $serviceName }}CELPluginWasmConfig
	{{- end }}
}

{{- if $env }}
// {{ $serviceName }}Env keeps the values read from environment variables.
type {{ $serviceName }}Env struct {
	{{- range $env.Vars }}
	{{ .Name }} {{ .Type }} {{- if .Tag }}`{{ .Tag }}`{{- end }}
	{{- end }}
}

type key{{ $serviceName }}Env struct{}

// Get{{ $serviceName }}Env gets environment variables.
func Get{{ $serviceName }}Env(ctx context.Context) *{{ $serviceName }}Env {
	value := ctx.Value(key{{ $serviceName }}Env{})
	if value == nil {
		return nil
	}
	return value.(*{{ $serviceName }}Env)
}

func with{{ $serviceName }}Env(ctx context.Context, env *{{ $serviceName }}Env) context.Context {
	return context.WithValue(ctx, key{{ $serviceName }}Env{}, env)
}
{{- end }}

// {{ $serviceName }}UnimplementedResolver a structure implemented to satisfy the Resolver interface.
// An Unimplemented error is always returned.
// This is intended for use when there are many Resolver interfaces that do not need to be implemented,
// by embedding them in a resolver structure that you have created.
type {{ $serviceName }}UnimplementedResolver struct {}

{{- range $customResolvers }}
// {{ .Name }} resolve "{{ .ProtoFQDN }}".
// This method always returns Unimplemented error.
func ({{ $serviceName }}UnimplementedResolver) {{ .Name }}(context.Context, *{{ .RequestType }}) (ret {{ .ReturnType }}, e error) {
	e = grpcfed.GRPCErrorf(grpcfed.UnimplementedCode, "method {{ .Name }} not implemented")
	return
}
{{- end }}

{{- $dependentMethods := .DependentMethods }}
{{- if $dependentMethods }}
const (
	{{- range $dependentMethods }}
	{{ $serviceName }}_DependentMethod_{{ .Name }} = "{{ .FQDN }}"
	{{- end }}
)
{{- end }}

// {{ $serviceName }} represents Federation Service.
type {{ $serviceName }} struct {
	*Unimplemented{{ $serviceName }}Server
	cfg {{ $serviceName }}Config
	logger *slog.Logger
	errorHandler grpcfed.ErrorHandler
	celCacheMap *grpcfed.CELCacheMap
	tracer trace.Tracer
	{{- if $env }}
	env *{{ $serviceName }}Env
	{{- end }}
	{{- if $customResolvers }}
	resolver {{ $serviceName }}Resolver
	{{- end }}
	celTypeHelper *grpcfed.CELTypeHelper
	celEnvOpts []grpcfed.CELEnvOption
	celPlugins []*grpcfedcel.CELPlugin
	client *{{ $serviceName }}DependentClientSet
}

// New{{ $serviceName }} creates {{ $serviceName }} instance by {{ $serviceName }}Config.
func New{{ $serviceName }}(cfg {{ $serviceName }}Config) (*{{ $serviceName }}, error) {
	{{- if $serviceDependencies }}
	if cfg.Client == nil {
		return nil, grpcfed.ErrClientConfig
	}
	{{- end }}
	{{- if $customResolvers }}
	if cfg.Resolver == nil {
		return nil, grpcfed.ErrResolverConfig
	}
	{{- end }}
	{{- if $celPlugins }}
	if cfg.CELPlugin == nil {
		return nil, grpcfed.ErrCELPluginConfig
	}
	{{- end }}
	{{- range $serviceDependencies }}
	{{ .ClientName }}, err := cfg.Client.{{ .ClientName }}({{ $serviceName }}ClientConfig{
		Service: "{{ .ServiceName }}",
	})
	if err != nil {
		return nil, err
	}
	{{- end }}
	logger := cfg.Logger
	if logger == nil {
		logger = slog.New(slog.NewJSONHandler(io.Discard, nil))
	}
	errorHandler := cfg.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(ctx context.Context, methodName string, err error) error { return err }
	}
	celTypeHelperFieldMap := grpcfed.CELTypeHelperFieldMap{
		{{- range $types }}
		{{- if .ProtoFQDN }}
		"{{ .ProtoFQDN }}": {
			{{- if .ProtoFields }}
			{{- range .ProtoFields }}
			"{{ .Name }}": grpcfed.NewCELFieldType({{ .TypeDeclare }}, "{{ .FieldName }}"),
			{{- end }}
			{{- end }}
		},
		{{- end }}
		{{- end }}

		{{- range $oneofTypes }}
		"{{ .MessageProtoFQDN }}": {
			"{{ .Name }}": grpcfed.NewOneofSelectorFieldType(
				{{ .TypeDeclare }}, "{{ .FieldName }}",
				[]reflect.Type{ {{- range .FieldZeroValues }}reflect.TypeOf({{ . }}),{{- end }} },
				[]string{ {{- range .FieldGetterNames }}"{{ . }}",{{- end }} },
				reflect.Zero(reflect.TypeOf({{ .ReturnZeroValue }})),
			),
		},
		{{- end }}

		{{- if $env }}
		"grpc.federation.private.Env": {
			{{- range $env.Vars }}
			"{{ .ProtoName }}": grpcfed.NewCELFieldType({{ .CELType }}, "{{ .Name }}"),
			{{- end }}
		},
		{{- end }}
	}
	celTypeHelper := grpcfed.NewCELTypeHelper(celTypeHelperFieldMap)
	var celEnvOpts []grpcfed.CELEnvOption
	celEnvOpts = append(celEnvOpts, grpcfed.NewDefaultEnvOptions(celTypeHelper)...)
	{{- range $enums }}
	celEnvOpts = append(celEnvOpts, grpcfed.EnumAccessorOptions("{{ .ProtoName }}", {{ .GoName }}_value, {{ .GoName }}_name)...)
	{{- end }}
	{{- if $env }}
	celEnvOpts = append(celEnvOpts, grpcfed.CELVariable("grpc.federation.env", grpcfed.CELObjectType("grpc.federation.private.Env")))
	{{- end }}
	{{- if $celPlugins }}
	var celPlugins []*grpcfedcel.CELPlugin
	{{- end }}
	{{- range $celPlugins }}
	{
		plugin, err := grpcfedcel.NewCELPlugin(context.Background(), grpcfedcel.CELPluginConfig{
			Name: "{{ .Name }}",
			Wasm: cfg.CELPlugin.{{ .FieldName }},
			Functions: []*grpcfedcel.CELFunction{
				{{- range .Functions }}
				{
					Name: "{{ .CELFunction.Name }}",
					ID: "{{ .ID }}",
					Args: []*grpcfed.CELTypeDeclare{
						{{- range .Args }}
						{{ .CELType }},
						{{- end }}
					},
					Return: {{ .Return.CELType }},
					IsMethod: {{ .IsMethod }},
				},
				{{- end }}
			},
		})
		if err != nil {
			return nil, err
		}
		if err := func() error {
			ctx := context.Background()
			instance := plugin.CreateInstance(ctx, celTypeHelper.CELRegistry())
			defer instance.Close(ctx)
			return instance.ValidatePlugin(ctx)
		}(); err != nil {
			return nil, err
		}
		celPlugins = append(celPlugins, plugin)
	}
	{{- end }}
	{{- if $env }}
	var env {{ $serviceName }}Env
	if err := grpcfed.LoadEnv("", &env); err != nil {
		return nil, err
	}
	{{- end }}
	return &{{ $serviceName }}{
		cfg: cfg,
		logger: logger,
		errorHandler: errorHandler,
		celEnvOpts: celEnvOpts,
		celTypeHelper: celTypeHelper,
		celCacheMap: grpcfed.NewCELCacheMap(),
		tracer: otel.Tracer("{{ .FQDN }}"),
		{{- if $env }}
		env: &env,
		{{- end }}
		{{- if $customResolvers }}
		resolver: cfg.Resolver,
		{{- end }}
		{{- if $celPlugins }}
		celPlugins: celPlugins,
		{{- end }}
		client: &{{ $serviceName}}DependentClientSet{
			{{- range $serviceDependencies }}
			{{ .ClientName }}: {{ .ClientName }},
			{{- end }}
		},
	}, nil
}

{{- range .Methods }}

// {{ .Name }} implements "{{ .ProtoFQDN }}" method.
func (s *{{ $serviceName }}) {{ .Name }}(ctx context.Context, req {{ .RequestType }}) (res {{ .ReturnType }}, e error) {
	ctx, span := s.tracer.Start(ctx, "{{ .ProtoFQDN }}")
	defer span.End()

	{{- if $env }}
	ctx = with{{ $serviceName }}Env(ctx, s.env)
	{{- end }}
	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, grpcfed.StackTrace())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	{{- if .UseTimeout }}
	res, err := grpcfed.WithTimeout[{{ .ReturnTypeWithoutPtr }}](ctx, "{{ .ProtoFQDN }}", {{ .Timeout }}, func(ctx context.Context) ({{ .ReturnType }}, error) {
		return s.{{ .ResolverName }}(ctx, &{{ .ArgumentName }}{
			{{- range .ReturnTypeArguments }}
			{{ . }}: req.Get{{ . }}(),
			{{- end }}
		})
	})
	{{- else }}
	res, err := s.{{ .ResolverName }}(ctx, &{{ .ArgumentName }}{
		{{- range .ReturnTypeArguments }}
		{{ . }}: req.Get{{ . }}(),
		{{- end }}
	})
	{{- end }}
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

{{- end }}

{{- range .Messages }}
{{- $msg := . }}
{{- $hasCELValue := .HasCELValue }}
{{ if .HasRule }}
// {{ .ResolverName }} resolve "{{ .ProtoFQDN }}" message.
func (s *{{ $serviceName }}) {{ .ResolverName }}(ctx context.Context, req *{{ .RequestType }}) (*{{ .ReturnType }}, error) {
	ctx, span := s.tracer.Start(ctx, "{{ .ProtoFQDN }}")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve {{ .ProtoFQDN }}", slog.Any("message_args", s.logvalue_{{ .RequestType }}(req)))
	{{- if .IsDeclVariables }}
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			{{- range .DeclVariables }}
			{{ .Name }} {{ .Type }}
			{{- end }}
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "{{ .RequestProtoType }}", req)}
	{{- if $env }}
	value.AddEnv(s.env)
	{{- end }}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()
	{{- end }}
	{{- template "evalDefSet" .VariableDefinitionSet }}

	{{- $customResolverArguments := .CustomResolverArguments }}
	{{- if $customResolverArguments }}

	// assign named parameters to message arguments to pass to the custom resolver.
	{{- end }}
	{{- range $customResolverArguments }}
	req.{{ .Name }} = {{ .Value }}
	{{- end }}

	// create a message value to be returned.
	{{- $hasMsgCustomResolver := .HasCustomResolver }}
	{{- if $hasMsgCustomResolver }}
	// `custom_resolver = true` in "grpc.federation.message" option.
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx))  // create a new reference to logger.
	ret, err := s.resolver.{{ .CustomResolverName }}(ctx, req)
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	{{- else }}
	ret := &{{ .ReturnType }}{}
	{{- end }}

	{{- $returnFields := .ReturnFields }}
	{{- if $returnFields }}

	// field binding section.
	{{- end }}
	{{- range $returnFields }}
	{{- if .CustomResolver }}
	{{- template "setReturnValueByFieldCustomResolver" (map "HasMsgCustomResolver" $hasMsgCustomResolver "Value" .CustomResolver) }}
	{{- else if .Oneof }}
	{{- template "setReturnValueByOneofFields" (map "Message" $msg "Value" .Oneof) }}
	{{- else if .CEL }}
	{{- template "setReturnValueByCEL" (map "Message" $msg "Value" .CEL) }}
	{{- else }}
	{{- template "setReturnValueByAutoBind" .AutoBind }}
	{{- end }}
	{{- end }}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved {{ .ProtoFQDN }}", slog.Any("{{ .ProtoFQDN }}", s.logvalue_{{ .LogValueReturnType }}(ret)))
	return ret, nil
}
{{ end }}
{{- end }}
{{ range .CastFields }}
// {{ .Name }} cast from "{{ .RequestProtoFQDN }}" to "{{ .ResponseProtoFQDN }}".
func (s *{{ $serviceName }}) {{ .Name }}(from {{ .RequestType }}) ({{ .ResponseType }}, error) {
	{{- if .IsSlice }}
	{{- template "castRepeated" .ToSlice }}
	{{- else if .IsMap }}
	{{- template "castMap" .ToMap }}
	{{- else if .IsOneof }}
	{{- template "castOneof" .ToOneof }}
	{{- else if .IsStruct }}
	{{- template "castMessage" .ToStruct }}
	{{- else if .IsEnumToNumber }}
	return {{ .ResponseType }}(from), nil
	{{- else if .IsNumberToEnum }}
	return {{ .ResponseType }}(from), nil
	{{- else if .IsEnum }}
	{{- template "castEnum" .ToEnum }}
	{{- else if .IsRequiredValidationNumber }}
	return grpcfed.{{ .CastWithValidationName }}(from)
	{{- else }}
	return {{ .ResponseType }}(from), nil
	{{- end }}
}
{{ end }}
{{ range .LogValues }}
{{- if .IsRepeated }}
func (s *{{ $serviceName }}) {{ .Name }}(v {{ .ValueType }}) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key: grpcfed.ToLogAttrKey(idx),
			Value: s.{{ .Value }}(vv),
		})
	}
	return slog.GroupValue(attrs...)
}
{{- else if .IsMap }}
func (s *{{ $serviceName }}) {{ .Name }}(v {{ .ValueType }}) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for key, value := range v {
		attrs = append(attrs, slog.Attr{
			Key: grpcfed.ToLogAttrKey(key),
			Value: {{ .Value }},
		})
	}
	return slog.GroupValue(attrs...)
}
{{- else if .IsMessage }}
func (s *{{ $serviceName }}) {{ .Name }}(v {{ .ValueType }}) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		{{- range .Attrs }}
		slog.{{ .Type }}("{{ .Key }}", {{ .Value }}),
		{{- end }}
	)
}
{{- else }}
func (s *{{ $serviceName }}) {{ .Name }}(v {{ .ValueType }}) slog.Value {
	switch v {
	{{- range .Attrs }}
	case {{ .Value }}:
	return slog.StringValue("{{ .Key }}")
	{{- end }}
	}
	return slog.StringValue("")
}
{{- end }}
{{ end }}

{{- end }}

{{- template "plugin" .CELPlugins }}

{{- define "setReturnValueByFieldCustomResolver" -}}
{{- $hasMsgCustomResolver := .HasMsgCustomResolver }}
{{- $value := .Value }}
{
	// (grpc.federation.field).custom_resolver = true
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx)) // create a new reference to logger.
	var err error
	ret.{{ $value.Name }}, err = s.resolver.{{ $value.ResolverName }}(ctx, &{{ $value.RequestType }}{
		{{ $value.MessageArgumentName }}: req,
		{{- if $hasMsgCustomResolver }}
		{{ $value.MessageName }}: ret,
		{{- end }}
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
}
{{- end }}

{{- define "setReturnValueByOneofFields" }}
{{- $msg := .Message }}
{{- $value := .Value }}
{{- $name := $value.Name }}
{{- $oneofFields := $value.OneofCaseFields }}
{{- $defaultOneofField := $value.OneofDefaultField }}
{{- if $value.HasFieldOneofRule }}
{{- range $oneofFields }}
oneof_{{ .Name }}, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
	Value: value,
	Expr: `{{ .Expr }}`,
	UseContextLibrary: {{ .ExprUseContextLibrary }},
	OutType: reflect.TypeOf(true),
	CacheIndex: {{ $msg.CELCacheIndex }},
})
if err != nil {
	grpcfed.RecordErrorToSpan(ctx, err)
	return nil, err
}
{{- end }}
{{- end }}
switch {
	{{- range $oneofFields }}
case {{ .Condition }}:
	{{- template "setReturnValueByOneofField" (map "Message" $msg "Name" $name "Value" . ) }}
	{{- end }}
	{{- if $defaultOneofField }}
default:
	{{- template "setReturnValueByOneofField" (map "Message" $msg "Value" $defaultOneofField ) }}
	{{- end }}
}
{{- end }}

{{- define "setReturnValueByOneofField" -}}
{{- $msg := .Message }}
{{- $value := .Value }}
{{- $name := .Name }}
{{- template "evalDefSet" $value.VariableDefinitionSet }}
{{- if $value.By }}
if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[{{ $value.Type }}]{
	Value: value,
	Expr: `{{ $value.By }}`,
	UseContextLibrary: {{ $value.ByUseContextLibrary }},
	CacheIndex: {{ $msg.CELCacheIndex }},
	Setter: func(v {{ $value.Type }}) error {
		{{- template "setReturnValueBySetter" $value.SetterParam }}
		return nil
	},
}); err != nil {
	grpcfed.RecordErrorToSpan(ctx, err)
	return nil, err
}
{{- else if $value.CastValue }}
{{ toLocalVariable $name }}, err := {{ $value.CastValue }}
if err != nil {
	return nil, err
}
ret.{{ $name }} = {{ toLocalVariable $name }}
{{- else }}
ret.{{ $name }} = {{ $value.Value }}
{{- end }}
{{- end }}

{{- define "setReturnValueByCEL" -}}
{{- $msg := .Message }}
{{- $value := .Value }}
{{ $value.ProtoComment }}
if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[{{ $value.Type }}]{
	Value: value,
	Expr: `{{ $value.CEL.Expr }}`,
	UseContextLibrary: {{ $value.CEL.UseContextLibrary }},
	CacheIndex: {{ $msg.CELCacheIndex }},
	Setter: func(v {{ $value.Type }}) error {
		{{- template "setReturnValueBySetter" $value.SetterParam }}
		return nil
	},
}); err != nil {
	grpcfed.RecordErrorToSpan(ctx, err)
	return nil, err
}
{{- end }}

{{- define "setReturnValueByAutoBind" -}}
{{- if .RequiredCast }}
{
	{{ toLocalVariable .Name }}, err := s.{{ .CastFunc }}({{ .Value }}) {{ .ProtoComment }}
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	ret.{{ .Name }} = {{ toLocalVariable .Name }}
}
{{- else }}
ret.{{ .Name }} = {{ .Value }} {{ .ProtoComment }}
{{- end }}
{{- end }}

{{- define "setReturnValueBySetter" -}}
{{- $name := .Name }}
{{- $v := .Value }}
{{- $enumSelector := .EnumSelector }}
{{- if $enumSelector }}
{{- template "setReturnValueByEnumSelector" (map "Name" $name "EnumSelector" $enumSelector ) }}
{{- else if .RequiredCast }}
{{ toLocalVariable $name }}, err := s.{{ .CastFunc }}({{ $v }})
if err != nil {
	return err
}
ret.{{ $name }} = {{ toLocalVariable $name }}
{{- else }}
ret.{{ $name }} = {{ $v }}
{{- end }}
{{- end -}}

{{- define "setReturnValueByEnumSelector" -}}
{{- $name := .Name }}
{{- $enumSelector := .EnumSelector }}
var {{ toLocalVariable $name }} {{ $enumSelector.Type }}
if v.GetCond() {
	{{- if $enumSelector.TrueEnumSelector }}
	if err := func(v *grpcfedcel.EnumSelector) error {
		{{- template "setReturnValueByEnumSelectorRecursive" (map "Name" $name "EnumSelector" $enumSelector.TrueEnumSelector ) }}
		return nil
	}(v.GetTrueSelector()); err != nil {
		return err
	}
	{{- else if $enumSelector.RequiredCastTrueType }}
	casted, err := s.{{ $enumSelector.CastTrueTypeFunc }}({{ $enumSelector.TrueType }}(v.GetTrueValue()))
	if err != nil {
		return err
	}
	{{ toLocalVariable $name }} = casted
	{{- else }}
	{{ toLocalVariable $name }} = {{ $enumSelector.TrueType }}(v.GetTrueValue())
	{{- end }}
} else {
	{{- if $enumSelector.FalseEnumSelector }}
	if err := func(v *grpcfedcel.EnumSelector) {
		{{- template "setReturnValueByEnumSelectorRecursive" (map "Name" $name "EnumSelector" $enumSelector.FalseEnumSelector ) }}
		return nil
	}(v.GetFalseSelector()); err != nil {
		return err
	}
	{{- else if $enumSelector.RequiredCastFalseType }}
	casted, err := s.{{ $enumSelector.CastFalseTypeFunc }}({{ $enumSelector.FalseType }}(v.GetFalseValue()))
	if err != nil {
		return err
	}
	{{ toLocalVariable $name }} = casted
	{{- else }}
	{{ toLocalVariable $name }} = {{ $enumSelector.FalseType }}(v.GetFalseValue())
	{{- end }}
}
ret.{{ $name }} = {{ toLocalVariable $name }}

{{- end -}}

{{- define "setReturnValueByEnumSelectorRecursive" -}}
{{- $name := .Name }}
{{- $enumSelector := .EnumSelector }}
if v.GetCond() {
	{{- if $enumSelector.TrueEnumSelector }}
	if err := func(v *grpcfedcel.EnumSelector) error {
		{{- template "setReturnValueByEnumSelectorRecursive" (map "Name" $name "EnumSelector" $enumSelector.TrueEnumSelector ) }}
		return nil
	}(v.GetTrueSelector()); err != nil {
		return err
	}
	{{- else if $enumSelector.RequiredCastTrueType }}
	casted, err := s.{{ $enumSelector.CastTrueTypeFunc }}({{ $enumSelector.TrueType }}(v.GetTrueValue()))
	if err != nil {
		return err
	}
	{{ toLocalVariable $name }} = casted
	{{- else }}
	{{ toLocalVariable $name }} = {{ $enumSelector.TrueType }}(v.GetTrueValue())
	{{- end }}
} else {
	{{- if $enumSelector.FalseEnumSelector }}
	if err := func(v *grpcfedcel.EnumSelector) {
		{{- template "setReturnValueByEnumSelectorRecursive" (map "Name" $name "EnumSelector" $enumSelector.FalseEnumSelector ) }}
		return nil
	}(v.GetFalseSelector()); err != nil {
		return err
	}
	{{- else if $enumSelector.RequiredCastFalseType }}
	casted, err := s.{{ $enumSelector.CastFalseTypeFunc }}({{ $enumSelector.FalseType }}(v.GetFalseValue()))
	if err != nil {
		return err
	}
	{{ toLocalVariable $name }} = casted
	{{- else }}
	{{ toLocalVariable $name }} = {{ $enumSelector.FalseType }}(v.GetFalseValue())
	{{- end }}
}
{{- end -}}
