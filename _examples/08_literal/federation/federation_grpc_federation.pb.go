// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
// versions:
//
//	protoc-gen-grpc-federation: dev
//
// source: federation/federation.proto
package federation

import (
	"context"
	"io"
	"log/slog"
	"reflect"

	grpcfed "github.com/mercari/grpc-federation/grpc/federation"
	grpcfedcel "github.com/mercari/grpc-federation/grpc/federation/cel"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"

	content "example/content"
)

var (
	_ = reflect.Invalid // to avoid "imported and not used error"
)

// Org_Federation_ContentArgument is argument for "org.federation.Content" message.
type Org_Federation_ContentArgument struct {
}

// Org_Federation_GetResponseArgument is argument for "org.federation.GetResponse" message.
type Org_Federation_GetResponseArgument struct {
	Content *content.Content
	Id      string
	Res     *content.GetContentResponse
}

// FederationServiceConfig configuration required to initialize the service that use GRPC Federation.
type FederationServiceConfig struct {
	// Client provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
	// If this interface is not provided, an error is returned during initialization.
	Client FederationServiceClientFactory // required
	// ErrorHandler Federation Service often needs to convert errors received from downstream services.
	// If an error occurs during method execution in the Federation Service, this error handler is called and the returned error is treated as a final error.
	ErrorHandler grpcfed.ErrorHandler
	// Logger sets the logger used to output Debug/Info/Error information.
	Logger *slog.Logger
}

// FederationServiceClientFactory provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
type FederationServiceClientFactory interface {
	// Content_ContentServiceClient create a gRPC Client to be used to call methods in content.ContentService.
	Content_ContentServiceClient(FederationServiceClientConfig) (content.ContentServiceClient, error)
}

// FederationServiceClientConfig helper to create gRPC client.
// Hints for creating a gRPC Client.
type FederationServiceClientConfig struct {
	// Service FQDN ( `<package-name>.<service-name>` ) of the service on Protocol Buffers.
	Service string
}

// FederationServiceDependentClientSet has a gRPC client for all services on which the federation service depends.
// This is provided as an argument when implementing the custom resolver.
type FederationServiceDependentClientSet struct {
	Content_ContentServiceClient content.ContentServiceClient
}

// FederationServiceResolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
type FederationServiceResolver interface {
}

// FederationServiceCELPluginWasmConfig type alias for grpcfedcel.WasmConfig.
type FederationServiceCELPluginWasmConfig = grpcfedcel.WasmConfig

// FederationServiceCELPluginConfig hints for loading a WebAssembly based plugin.
type FederationServiceCELPluginConfig struct {
}

// FederationServiceUnimplementedResolver a structure implemented to satisfy the Resolver interface.
// An Unimplemented error is always returned.
// This is intended for use when there are many Resolver interfaces that do not need to be implemented,
// by embedding them in a resolver structure that you have created.
type FederationServiceUnimplementedResolver struct{}

const (
	FederationService_DependentMethod_Content_ContentService_GetContent = "/content.ContentService/GetContent"
)

// FederationService represents Federation Service.
type FederationService struct {
	*UnimplementedFederationServiceServer
	cfg           FederationServiceConfig
	logger        *slog.Logger
	errorHandler  grpcfed.ErrorHandler
	celCacheMap   *grpcfed.CELCacheMap
	tracer        trace.Tracer
	celTypeHelper *grpcfed.CELTypeHelper
	celEnvOpts    []grpcfed.CELEnvOption
	celPlugins    []*grpcfedcel.CELPlugin
	client        *FederationServiceDependentClientSet
}

// NewFederationService creates FederationService instance by FederationServiceConfig.
func NewFederationService(cfg FederationServiceConfig) (*FederationService, error) {
	if cfg.Client == nil {
		return nil, grpcfed.ErrClientConfig
	}
	Content_ContentServiceClient, err := cfg.Client.Content_ContentServiceClient(FederationServiceClientConfig{
		Service: "content.ContentService",
	})
	if err != nil {
		return nil, err
	}
	logger := cfg.Logger
	if logger == nil {
		logger = slog.New(slog.NewJSONHandler(io.Discard, nil))
	}
	errorHandler := cfg.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(ctx context.Context, methodName string, err error) error { return err }
	}
	celTypeHelperFieldMap := grpcfed.CELTypeHelperFieldMap{
		"grpc.federation.private.GetResponseArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Id"),
		},
	}
	celTypeHelper := grpcfed.NewCELTypeHelper(celTypeHelperFieldMap)
	var celEnvOpts []grpcfed.CELEnvOption
	celEnvOpts = append(celEnvOpts, grpcfed.NewDefaultEnvOptions(celTypeHelper)...)
	celEnvOpts = append(celEnvOpts, grpcfed.EnumAccessorOptions("content.ContentType", content.ContentType_value, content.ContentType_name)...)
	celEnvOpts = append(celEnvOpts, grpcfed.EnumAccessorOptions("org.federation.ContentType", ContentType_value, ContentType_name)...)
	return &FederationService{
		cfg:           cfg,
		logger:        logger,
		errorHandler:  errorHandler,
		celEnvOpts:    celEnvOpts,
		celTypeHelper: celTypeHelper,
		celCacheMap:   grpcfed.NewCELCacheMap(),
		tracer:        otel.Tracer("org.federation.FederationService"),
		client: &FederationServiceDependentClientSet{
			Content_ContentServiceClient: Content_ContentServiceClient,
		},
	}, nil
}

// Get implements "org.federation.FederationService/Get" method.
func (s *FederationService) Get(ctx context.Context, req *GetRequest) (res *GetResponse, e error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.FederationService/Get")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, grpcfed.StackTrace())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Org_Federation_GetResponse(ctx, &Org_Federation_GetResponseArgument{
		Id: req.GetId(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// resolve_Org_Federation_GetResponse resolve "org.federation.GetResponse" message.
func (s *FederationService) resolve_Org_Federation_GetResponse(ctx context.Context, req *Org_Federation_GetResponseArgument) (*GetResponse, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.GetResponse")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.GetResponse", slog.Any("message_args", s.logvalue_Org_Federation_GetResponseArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			content *content.Content
			res     *content.GetContentResponse
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.GetResponseArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "res"
	     call {
	       method: "content.ContentService/GetContent"
	       request: [
	         { field: "by_field", by: "$.id" },
	         { field: "double_field", by: "1.23" },
	         { field: "doubles_field", by: "[4.56, 7.89]" },
	         { field: "float_field", by: "4.56" },
	         { field: "floats_field", by: "[7.89, 1.23]" },
	         { field: "int32_field", by: "-1" },
	         { field: "int32s_field", by: "[-2, -3]" },
	         { field: "int64_field", by: "-4" },
	         { field: "int64s_field", by: "[-5, -6]" },
	         { field: "uint32_field", by: "1u" },
	         { field: "uint32s_field", by: "[2u, 3u]" },
	         { field: "uint64_field", by: "4u" },
	         { field: "uint64s_field", by: "[5u, 6u]" },
	         { field: "sint32_field", by: "-7" },
	         { field: "sint32s_field", by: "[-8, -9]" },
	         { field: "sint64_field", by: "-10" },
	         { field: "sint64s_field", by: "[-11, -12]" },
	         { field: "fixed32_field", by: "10u" },
	         { field: "fixed32s_field", by: "[11u, 12u]" },
	         { field: "fixed64_field", by: "13u" },
	         { field: "fixed64s_field", by: "[14u, 15u]" },
	         { field: "sfixed32_field", by: "-14" },
	         { field: "sfixed32s_field", by: "[-15, -16]" },
	         { field: "sfixed64_field", by: "-17" },
	         { field: "sfixed64s_field", by: "[-18, -19]" },
	         { field: "bool_field", by: "true" },
	         { field: "bools_field", by: "[true, false]" },
	         { field: "string_field", by: "'foo'" },
	         { field: "strings_field", by: "['hello', 'world']" },
	         { field: "byte_string_field", by: "b'foo'" },
	         { field: "byte_strings_field", by: "[b'foo', b'bar']" },
	         { field: "enum_field", by: "content.ContentType.CONTENT_TYPE_1" },
	         { field: "enums_field", by: "[content.ContentType.CONTENT_TYPE_2, content.ContentType.CONTENT_TYPE_3]" },
	         { field: "message_field", by: "content.Content{double_field: 1.23, doubles_field: [4.56, 7.89]}" },
	         { field: "messages_field", by: "[content.Content{}, content.Content{}]" }
	       ]
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*content.GetContentResponse, *localValueType]{
		Name: `res`,
		Type: grpcfed.CELObjectType("content.GetContentResponse"),
		Setter: func(value *localValueType, v *content.GetContentResponse) error {
			value.vars.res = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &content.GetContentRequest{}
			// { field: "by_field", by: "$.id" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
				Value:             value,
				Expr:              `$.id`,
				UseContextLibrary: false,
				CacheIndex:        1,
				Setter: func(v string) error {
					args.ByField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "double_field", by: "1.23" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[float64]{
				Value:             value,
				Expr:              `1.23`,
				UseContextLibrary: false,
				CacheIndex:        2,
				Setter: func(v float64) error {
					args.DoubleField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "doubles_field", by: "[4.56, 7.89]" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]float64]{
				Value:             value,
				Expr:              `[4.56, 7.89]`,
				UseContextLibrary: false,
				CacheIndex:        3,
				Setter: func(v []float64) error {
					args.DoublesField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "float_field", by: "4.56" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[float32]{
				Value:             value,
				Expr:              `4.56`,
				UseContextLibrary: false,
				CacheIndex:        4,
				Setter: func(v float32) error {
					args.FloatField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "floats_field", by: "[7.89, 1.23]" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]float32]{
				Value:             value,
				Expr:              `[7.89, 1.23]`,
				UseContextLibrary: false,
				CacheIndex:        5,
				Setter: func(v []float32) error {
					args.FloatsField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "int32_field", by: "-1" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int32]{
				Value:             value,
				Expr:              `-1`,
				UseContextLibrary: false,
				CacheIndex:        6,
				Setter: func(v int32) error {
					args.Int32Field = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "int32s_field", by: "[-2, -3]" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int32]{
				Value:             value,
				Expr:              `[-2, -3]`,
				UseContextLibrary: false,
				CacheIndex:        7,
				Setter: func(v []int32) error {
					args.Int32SField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "int64_field", by: "-4" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
				Value:             value,
				Expr:              `-4`,
				UseContextLibrary: false,
				CacheIndex:        8,
				Setter: func(v int64) error {
					args.Int64Field = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "int64s_field", by: "[-5, -6]" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
				Value:             value,
				Expr:              `[-5, -6]`,
				UseContextLibrary: false,
				CacheIndex:        9,
				Setter: func(v []int64) error {
					args.Int64SField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "uint32_field", by: "1u" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[uint32]{
				Value:             value,
				Expr:              `1u`,
				UseContextLibrary: false,
				CacheIndex:        10,
				Setter: func(v uint32) error {
					args.Uint32Field = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "uint32s_field", by: "[2u, 3u]" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]uint32]{
				Value:             value,
				Expr:              `[2u, 3u]`,
				UseContextLibrary: false,
				CacheIndex:        11,
				Setter: func(v []uint32) error {
					args.Uint32SField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "uint64_field", by: "4u" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[uint64]{
				Value:             value,
				Expr:              `4u`,
				UseContextLibrary: false,
				CacheIndex:        12,
				Setter: func(v uint64) error {
					args.Uint64Field = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "uint64s_field", by: "[5u, 6u]" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]uint64]{
				Value:             value,
				Expr:              `[5u, 6u]`,
				UseContextLibrary: false,
				CacheIndex:        13,
				Setter: func(v []uint64) error {
					args.Uint64SField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "sint32_field", by: "-7" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int32]{
				Value:             value,
				Expr:              `-7`,
				UseContextLibrary: false,
				CacheIndex:        14,
				Setter: func(v int32) error {
					args.Sint32Field = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "sint32s_field", by: "[-8, -9]" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int32]{
				Value:             value,
				Expr:              `[-8, -9]`,
				UseContextLibrary: false,
				CacheIndex:        15,
				Setter: func(v []int32) error {
					args.Sint32SField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "sint64_field", by: "-10" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
				Value:             value,
				Expr:              `-10`,
				UseContextLibrary: false,
				CacheIndex:        16,
				Setter: func(v int64) error {
					args.Sint64Field = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "sint64s_field", by: "[-11, -12]" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
				Value:             value,
				Expr:              `[-11, -12]`,
				UseContextLibrary: false,
				CacheIndex:        17,
				Setter: func(v []int64) error {
					args.Sint64SField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "fixed32_field", by: "10u" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[uint32]{
				Value:             value,
				Expr:              `10u`,
				UseContextLibrary: false,
				CacheIndex:        18,
				Setter: func(v uint32) error {
					args.Fixed32Field = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "fixed32s_field", by: "[11u, 12u]" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]uint32]{
				Value:             value,
				Expr:              `[11u, 12u]`,
				UseContextLibrary: false,
				CacheIndex:        19,
				Setter: func(v []uint32) error {
					args.Fixed32SField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "fixed64_field", by: "13u" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[uint64]{
				Value:             value,
				Expr:              `13u`,
				UseContextLibrary: false,
				CacheIndex:        20,
				Setter: func(v uint64) error {
					args.Fixed64Field = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "fixed64s_field", by: "[14u, 15u]" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]uint64]{
				Value:             value,
				Expr:              `[14u, 15u]`,
				UseContextLibrary: false,
				CacheIndex:        21,
				Setter: func(v []uint64) error {
					args.Fixed64SField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "sfixed32_field", by: "-14" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int32]{
				Value:             value,
				Expr:              `-14`,
				UseContextLibrary: false,
				CacheIndex:        22,
				Setter: func(v int32) error {
					args.Sfixed32Field = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "sfixed32s_field", by: "[-15, -16]" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int32]{
				Value:             value,
				Expr:              `[-15, -16]`,
				UseContextLibrary: false,
				CacheIndex:        23,
				Setter: func(v []int32) error {
					args.Sfixed32SField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "sfixed64_field", by: "-17" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
				Value:             value,
				Expr:              `-17`,
				UseContextLibrary: false,
				CacheIndex:        24,
				Setter: func(v int64) error {
					args.Sfixed64Field = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "sfixed64s_field", by: "[-18, -19]" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
				Value:             value,
				Expr:              `[-18, -19]`,
				UseContextLibrary: false,
				CacheIndex:        25,
				Setter: func(v []int64) error {
					args.Sfixed64SField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "bool_field", by: "true" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[bool]{
				Value:             value,
				Expr:              `true`,
				UseContextLibrary: false,
				CacheIndex:        26,
				Setter: func(v bool) error {
					args.BoolField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "bools_field", by: "[true, false]" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]bool]{
				Value:             value,
				Expr:              `[true, false]`,
				UseContextLibrary: false,
				CacheIndex:        27,
				Setter: func(v []bool) error {
					args.BoolsField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "string_field", by: "'foo'" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
				Value:             value,
				Expr:              `'foo'`,
				UseContextLibrary: false,
				CacheIndex:        28,
				Setter: func(v string) error {
					args.StringField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "strings_field", by: "['hello', 'world']" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]string]{
				Value:             value,
				Expr:              `['hello', 'world']`,
				UseContextLibrary: false,
				CacheIndex:        29,
				Setter: func(v []string) error {
					args.StringsField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "byte_string_field", by: "b'foo'" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]byte]{
				Value:             value,
				Expr:              `b'foo'`,
				UseContextLibrary: false,
				CacheIndex:        30,
				Setter: func(v []byte) error {
					args.ByteStringField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "byte_strings_field", by: "[b'foo', b'bar']" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[][]byte]{
				Value:             value,
				Expr:              `[b'foo', b'bar']`,
				UseContextLibrary: false,
				CacheIndex:        31,
				Setter: func(v [][]byte) error {
					args.ByteStringsField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "enum_field", by: "content.ContentType.CONTENT_TYPE_1" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[content.ContentType]{
				Value:             value,
				Expr:              `content.ContentType.CONTENT_TYPE_1`,
				UseContextLibrary: false,
				CacheIndex:        32,
				Setter: func(v content.ContentType) error {
					args.EnumField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "enums_field", by: "[content.ContentType.CONTENT_TYPE_2, content.ContentType.CONTENT_TYPE_3]" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]content.ContentType]{
				Value:             value,
				Expr:              `[content.ContentType.CONTENT_TYPE_2, content.ContentType.CONTENT_TYPE_3]`,
				UseContextLibrary: false,
				CacheIndex:        33,
				Setter: func(v []content.ContentType) error {
					args.EnumsField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "message_field", by: "content.Content{double_field: 1.23, doubles_field: [4.56, 7.89]}" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*content.Content]{
				Value:             value,
				Expr:              `content.Content{double_field: 1.23, doubles_field: [4.56, 7.89]}`,
				UseContextLibrary: false,
				CacheIndex:        34,
				Setter: func(v *content.Content) error {
					args.MessageField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "messages_field", by: "[content.Content{}, content.Content{}]" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*content.Content]{
				Value:             value,
				Expr:              `[content.Content{}, content.Content{}]`,
				UseContextLibrary: false,
				CacheIndex:        35,
				Setter: func(v []*content.Content) error {
					args.MessagesField = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			grpcfed.Logger(ctx).DebugContext(ctx, "call content.ContentService/GetContent", slog.Any("content.GetContentRequest", s.logvalue_Content_GetContentRequest(args)))
			return s.client.Content_ContentServiceClient.GetContent(ctx, args)
		},
	}); err != nil {
		if err := s.errorHandler(ctx, FederationService_DependentMethod_Content_ContentService_GetContent, err); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	}

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "content"
	     by: "res.content"
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*content.Content, *localValueType]{
		Name: `content`,
		Type: grpcfed.CELObjectType("content.Content"),
		Setter: func(value *localValueType, v *content.Content) error {
			value.vars.content = v
			return nil
		},
		By:                  `res.content`,
		ByUseContextLibrary: false,
		ByCacheIndex:        36,
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Content = value.vars.content
	req.Res = value.vars.res

	// create a message value to be returned.
	ret := &GetResponse{}

	// field binding section.
	// (grpc.federation.field).by = "content"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*content.Content]{
		Value:             value,
		Expr:              `content`,
		UseContextLibrary: false,
		CacheIndex:        37,
		Setter: func(v *content.Content) error {
			contentValue, err := s.cast_Content_Content__to__Org_Federation_Content(v)
			if err != nil {
				return err
			}
			ret.Content = contentValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "content.int32_field + content.sint32_field"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
		Value:             value,
		Expr:              `content.int32_field + content.sint32_field`,
		UseContextLibrary: false,
		CacheIndex:        38,
		Setter: func(v int64) error {
			ret.CelExpr = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.GetResponse", slog.Any("org.federation.GetResponse", s.logvalue_Org_Federation_GetResponse(ret)))
	return ret, nil
}

// cast_Content_ContentType__to__Org_Federation_ContentType cast from "content.ContentType" to "org.federation.ContentType".
func (s *FederationService) cast_Content_ContentType__to__Org_Federation_ContentType(from content.ContentType) (ContentType, error) {
	switch from {
	case content.ContentType_CONTENT_TYPE_1:
		return ContentType_CONTENT_TYPE_1, nil
	case content.ContentType_CONTENT_TYPE_2:
		return ContentType_CONTENT_TYPE_2, nil
	case content.ContentType_CONTENT_TYPE_3:
		return ContentType_CONTENT_TYPE_3, nil
	default:
		return 0, nil
	}
}

// cast_Content_Content__to__Org_Federation_Content cast from "content.Content" to "org.federation.Content".
func (s *FederationService) cast_Content_Content__to__Org_Federation_Content(from *content.Content) (*Content, error) {
	if from == nil {
		return nil, nil
	}

	byFieldValue := from.GetByField()
	doubleFieldValue := from.GetDoubleField()
	doublesFieldValue := from.GetDoublesField()
	floatFieldValue := from.GetFloatField()
	floatsFieldValue := from.GetFloatsField()
	int32FieldValue := from.GetInt32Field()
	int32SFieldValue := from.GetInt32SField()
	int64FieldValue := from.GetInt64Field()
	int64SFieldValue := from.GetInt64SField()
	uint32FieldValue := from.GetUint32Field()
	uint32SFieldValue := from.GetUint32SField()
	uint64FieldValue := from.GetUint64Field()
	uint64SFieldValue := from.GetUint64SField()
	sint32FieldValue := from.GetSint32Field()
	sint32SFieldValue := from.GetSint32SField()
	sint64FieldValue := from.GetSint64Field()
	sint64SFieldValue := from.GetSint64SField()
	fixed32FieldValue := from.GetFixed32Field()
	fixed32SFieldValue := from.GetFixed32SField()
	fixed64FieldValue := from.GetFixed64Field()
	fixed64SFieldValue := from.GetFixed64SField()
	sfixed32FieldValue := from.GetSfixed32Field()
	sfixed32SFieldValue := from.GetSfixed32SField()
	sfixed64FieldValue := from.GetSfixed64Field()
	sfixed64SFieldValue := from.GetSfixed64SField()
	boolFieldValue := from.GetBoolField()
	boolsFieldValue := from.GetBoolsField()
	stringFieldValue := from.GetStringField()
	stringsFieldValue := from.GetStringsField()
	byteStringFieldValue := from.GetByteStringField()
	byteStringsFieldValue := from.GetByteStringsField()
	enumFieldValue, err := s.cast_Content_ContentType__to__Org_Federation_ContentType(from.GetEnumField())
	if err != nil {
		return nil, err
	}
	enumsFieldValue, err := s.cast_repeated_Content_ContentType__to__repeated_Org_Federation_ContentType(from.GetEnumsField())
	if err != nil {
		return nil, err
	}
	envFieldValue := from.GetEnvField()
	envsFieldValue := from.GetEnvsField()
	messageFieldValue, err := s.cast_Content_Content__to__Org_Federation_Content(from.GetMessageField())
	if err != nil {
		return nil, err
	}
	messagesFieldValue, err := s.cast_repeated_Content_Content__to__repeated_Org_Federation_Content(from.GetMessagesField())
	if err != nil {
		return nil, err
	}

	return &Content{
		ByField:          byFieldValue,
		DoubleField:      doubleFieldValue,
		DoublesField:     doublesFieldValue,
		FloatField:       floatFieldValue,
		FloatsField:      floatsFieldValue,
		Int32Field:       int32FieldValue,
		Int32SField:      int32SFieldValue,
		Int64Field:       int64FieldValue,
		Int64SField:      int64SFieldValue,
		Uint32Field:      uint32FieldValue,
		Uint32SField:     uint32SFieldValue,
		Uint64Field:      uint64FieldValue,
		Uint64SField:     uint64SFieldValue,
		Sint32Field:      sint32FieldValue,
		Sint32SField:     sint32SFieldValue,
		Sint64Field:      sint64FieldValue,
		Sint64SField:     sint64SFieldValue,
		Fixed32Field:     fixed32FieldValue,
		Fixed32SField:    fixed32SFieldValue,
		Fixed64Field:     fixed64FieldValue,
		Fixed64SField:    fixed64SFieldValue,
		Sfixed32Field:    sfixed32FieldValue,
		Sfixed32SField:   sfixed32SFieldValue,
		Sfixed64Field:    sfixed64FieldValue,
		Sfixed64SField:   sfixed64SFieldValue,
		BoolField:        boolFieldValue,
		BoolsField:       boolsFieldValue,
		StringField:      stringFieldValue,
		StringsField:     stringsFieldValue,
		ByteStringField:  byteStringFieldValue,
		ByteStringsField: byteStringsFieldValue,
		EnumField:        enumFieldValue,
		EnumsField:       enumsFieldValue,
		EnvField:         envFieldValue,
		EnvsField:        envsFieldValue,
		MessageField:     messageFieldValue,
		MessagesField:    messagesFieldValue,
	}, nil
}

// cast_float64__to__float32 cast from "double" to "float".
func (s *FederationService) cast_float64__to__float32(from float64) (float32, error) {
	return float32(from), nil
}

// cast_int64__to__Content_ContentType cast from "int64" to "content.ContentType".
func (s *FederationService) cast_int64__to__Content_ContentType(from int64) (content.ContentType, error) {
	return content.ContentType(from), nil
}

// cast_int64__to__int32 cast from "int64" to "sint32".
func (s *FederationService) cast_int64__to__int32(from int64) (int32, error) {
	return int32(from), nil
}

// cast_int64__to__int64 cast from "int64" to "sint64".
func (s *FederationService) cast_int64__to__int64(from int64) (int64, error) {
	return int64(from), nil
}

// cast_repeated_Content_ContentType__to__repeated_Org_Federation_ContentType cast from "repeated content.ContentType" to "repeated org.federation.ContentType".
func (s *FederationService) cast_repeated_Content_ContentType__to__repeated_Org_Federation_ContentType(from []content.ContentType) ([]ContentType, error) {
	ret := make([]ContentType, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_Content_ContentType__to__Org_Federation_ContentType(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_repeated_Content_Content__to__repeated_Org_Federation_Content cast from "repeated content.Content" to "repeated org.federation.Content".
func (s *FederationService) cast_repeated_Content_Content__to__repeated_Org_Federation_Content(from []*content.Content) ([]*Content, error) {
	ret := make([]*Content, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_Content_Content__to__Org_Federation_Content(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_repeated_float64__to__repeated_float32 cast from "repeated double" to "repeated float".
func (s *FederationService) cast_repeated_float64__to__repeated_float32(from []float64) ([]float32, error) {
	ret := make([]float32, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_float64__to__float32(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_repeated_int64__to__repeated_Content_ContentType cast from "repeated int64" to "repeated content.ContentType".
func (s *FederationService) cast_repeated_int64__to__repeated_Content_ContentType(from []int64) ([]content.ContentType, error) {
	ret := make([]content.ContentType, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_int64__to__Content_ContentType(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_repeated_int64__to__repeated_int32 cast from "repeated int64" to "repeated sint32".
func (s *FederationService) cast_repeated_int64__to__repeated_int32(from []int64) ([]int32, error) {
	ret := make([]int32, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_int64__to__int32(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_repeated_int64__to__repeated_int64 cast from "repeated int64" to "repeated sint64".
func (s *FederationService) cast_repeated_int64__to__repeated_int64(from []int64) ([]int64, error) {
	ret := make([]int64, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_int64__to__int64(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_repeated_uint64__to__repeated_uint32 cast from "repeated uint64" to "repeated uint32".
func (s *FederationService) cast_repeated_uint64__to__repeated_uint32(from []uint64) ([]uint32, error) {
	ret := make([]uint32, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_uint64__to__uint32(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_repeated_uint64__to__repeated_uint64 cast from "repeated uint64" to "repeated fixed64".
func (s *FederationService) cast_repeated_uint64__to__repeated_uint64(from []uint64) ([]uint64, error) {
	ret := make([]uint64, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_uint64__to__uint64(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_uint64__to__uint32 cast from "uint64" to "uint32".
func (s *FederationService) cast_uint64__to__uint32(from uint64) (uint32, error) {
	return grpcfed.Uint64ToUint32(from)
}

// cast_uint64__to__uint64 cast from "uint64" to "fixed64".
func (s *FederationService) cast_uint64__to__uint64(from uint64) (uint64, error) {
	return uint64(from), nil
}

func (s *FederationService) logvalue_Content_Content(v *content.Content) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("by_field", v.GetByField()),
		slog.Float64("double_field", v.GetDoubleField()),
		slog.Any("doubles_field", v.GetDoublesField()),
		slog.Float64("float_field", float64(v.GetFloatField())),
		slog.Any("floats_field", v.GetFloatsField()),
		slog.Int64("int32_field", int64(v.GetInt32Field())),
		slog.Any("int32s_field", v.GetInt32SField()),
		slog.Int64("int64_field", v.GetInt64Field()),
		slog.Any("int64s_field", v.GetInt64SField()),
		slog.Uint64("uint32_field", uint64(v.GetUint32Field())),
		slog.Any("uint32s_field", v.GetUint32SField()),
		slog.Uint64("uint64_field", v.GetUint64Field()),
		slog.Any("uint64s_field", v.GetUint64SField()),
		slog.Int64("sint32_field", int64(v.GetSint32Field())),
		slog.Any("sint32s_field", v.GetSint32SField()),
		slog.Int64("sint64_field", v.GetSint64Field()),
		slog.Any("sint64s_field", v.GetSint64SField()),
		slog.Uint64("fixed32_field", uint64(v.GetFixed32Field())),
		slog.Any("fixed32s_field", v.GetFixed32SField()),
		slog.Uint64("fixed64_field", v.GetFixed64Field()),
		slog.Any("fixed64s_field", v.GetFixed64SField()),
		slog.Int64("sfixed32_field", int64(v.GetSfixed32Field())),
		slog.Any("sfixed32s_field", v.GetSfixed32SField()),
		slog.Int64("sfixed64_field", v.GetSfixed64Field()),
		slog.Any("sfixed64s_field", v.GetSfixed64SField()),
		slog.Bool("bool_field", v.GetBoolField()),
		slog.Any("bools_field", v.GetBoolsField()),
		slog.String("string_field", v.GetStringField()),
		slog.Any("strings_field", v.GetStringsField()),
		slog.String("byte_string_field", string(v.GetByteStringField())),
		slog.Any("byte_strings_field", v.GetByteStringsField()),
		slog.String("enum_field", s.logvalue_Content_ContentType(v.GetEnumField()).String()),
		slog.Any("enums_field", s.logvalue_repeated_Content_ContentType(v.GetEnumsField())),
		slog.String("env_field", v.GetEnvField()),
		slog.Any("envs_field", v.GetEnvsField()),
		slog.Any("message_field", s.logvalue_Content_Content(v.GetMessageField())),
		slog.Any("messages_field", s.logvalue_repeated_Content_Content(v.GetMessagesField())),
	)
}

func (s *FederationService) logvalue_Content_ContentType(v content.ContentType) slog.Value {
	switch v {
	case content.ContentType_CONTENT_TYPE_1:
		return slog.StringValue("CONTENT_TYPE_1")
	case content.ContentType_CONTENT_TYPE_2:
		return slog.StringValue("CONTENT_TYPE_2")
	case content.ContentType_CONTENT_TYPE_3:
		return slog.StringValue("CONTENT_TYPE_3")
	}
	return slog.StringValue("")
}

func (s *FederationService) logvalue_Content_GetContentRequest(v *content.GetContentRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("by_field", v.GetByField()),
		slog.Float64("double_field", v.GetDoubleField()),
		slog.Any("doubles_field", v.GetDoublesField()),
		slog.Float64("float_field", float64(v.GetFloatField())),
		slog.Any("floats_field", v.GetFloatsField()),
		slog.Int64("int32_field", int64(v.GetInt32Field())),
		slog.Any("int32s_field", v.GetInt32SField()),
		slog.Int64("int64_field", v.GetInt64Field()),
		slog.Any("int64s_field", v.GetInt64SField()),
		slog.Uint64("uint32_field", uint64(v.GetUint32Field())),
		slog.Any("uint32s_field", v.GetUint32SField()),
		slog.Uint64("uint64_field", v.GetUint64Field()),
		slog.Any("uint64s_field", v.GetUint64SField()),
		slog.Int64("sint32_field", int64(v.GetSint32Field())),
		slog.Any("sint32s_field", v.GetSint32SField()),
		slog.Int64("sint64_field", v.GetSint64Field()),
		slog.Any("sint64s_field", v.GetSint64SField()),
		slog.Uint64("fixed32_field", uint64(v.GetFixed32Field())),
		slog.Any("fixed32s_field", v.GetFixed32SField()),
		slog.Uint64("fixed64_field", v.GetFixed64Field()),
		slog.Any("fixed64s_field", v.GetFixed64SField()),
		slog.Int64("sfixed32_field", int64(v.GetSfixed32Field())),
		slog.Any("sfixed32s_field", v.GetSfixed32SField()),
		slog.Int64("sfixed64_field", v.GetSfixed64Field()),
		slog.Any("sfixed64s_field", v.GetSfixed64SField()),
		slog.Bool("bool_field", v.GetBoolField()),
		slog.Any("bools_field", v.GetBoolsField()),
		slog.String("string_field", v.GetStringField()),
		slog.Any("strings_field", v.GetStringsField()),
		slog.String("byte_string_field", string(v.GetByteStringField())),
		slog.Any("byte_strings_field", v.GetByteStringsField()),
		slog.String("enum_field", s.logvalue_Content_ContentType(v.GetEnumField()).String()),
		slog.Any("enums_field", s.logvalue_repeated_Content_ContentType(v.GetEnumsField())),
		slog.String("env_field", v.GetEnvField()),
		slog.Any("envs_field", v.GetEnvsField()),
		slog.Any("message_field", s.logvalue_Content_Content(v.GetMessageField())),
		slog.Any("messages_field", s.logvalue_repeated_Content_Content(v.GetMessagesField())),
	)
}

func (s *FederationService) logvalue_Org_Federation_Content(v *Content) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("by_field", v.GetByField()),
		slog.Float64("double_field", v.GetDoubleField()),
		slog.Any("doubles_field", v.GetDoublesField()),
		slog.Float64("float_field", float64(v.GetFloatField())),
		slog.Any("floats_field", v.GetFloatsField()),
		slog.Int64("int32_field", int64(v.GetInt32Field())),
		slog.Any("int32s_field", v.GetInt32SField()),
		slog.Int64("int64_field", v.GetInt64Field()),
		slog.Any("int64s_field", v.GetInt64SField()),
		slog.Uint64("uint32_field", uint64(v.GetUint32Field())),
		slog.Any("uint32s_field", v.GetUint32SField()),
		slog.Uint64("uint64_field", v.GetUint64Field()),
		slog.Any("uint64s_field", v.GetUint64SField()),
		slog.Int64("sint32_field", int64(v.GetSint32Field())),
		slog.Any("sint32s_field", v.GetSint32SField()),
		slog.Int64("sint64_field", v.GetSint64Field()),
		slog.Any("sint64s_field", v.GetSint64SField()),
		slog.Uint64("fixed32_field", uint64(v.GetFixed32Field())),
		slog.Any("fixed32s_field", v.GetFixed32SField()),
		slog.Uint64("fixed64_field", v.GetFixed64Field()),
		slog.Any("fixed64s_field", v.GetFixed64SField()),
		slog.Int64("sfixed32_field", int64(v.GetSfixed32Field())),
		slog.Any("sfixed32s_field", v.GetSfixed32SField()),
		slog.Int64("sfixed64_field", v.GetSfixed64Field()),
		slog.Any("sfixed64s_field", v.GetSfixed64SField()),
		slog.Bool("bool_field", v.GetBoolField()),
		slog.Any("bools_field", v.GetBoolsField()),
		slog.String("string_field", v.GetStringField()),
		slog.Any("strings_field", v.GetStringsField()),
		slog.String("byte_string_field", string(v.GetByteStringField())),
		slog.Any("byte_strings_field", v.GetByteStringsField()),
		slog.String("enum_field", s.logvalue_Org_Federation_ContentType(v.GetEnumField()).String()),
		slog.Any("enums_field", s.logvalue_repeated_Org_Federation_ContentType(v.GetEnumsField())),
		slog.String("env_field", v.GetEnvField()),
		slog.Any("envs_field", v.GetEnvsField()),
		slog.Any("message_field", s.logvalue_Org_Federation_Content(v.GetMessageField())),
		slog.Any("messages_field", s.logvalue_repeated_Org_Federation_Content(v.GetMessagesField())),
	)
}

func (s *FederationService) logvalue_Org_Federation_ContentType(v ContentType) slog.Value {
	switch v {
	case ContentType_CONTENT_TYPE_1:
		return slog.StringValue("CONTENT_TYPE_1")
	case ContentType_CONTENT_TYPE_2:
		return slog.StringValue("CONTENT_TYPE_2")
	case ContentType_CONTENT_TYPE_3:
		return slog.StringValue("CONTENT_TYPE_3")
	}
	return slog.StringValue("")
}

func (s *FederationService) logvalue_Org_Federation_GetResponse(v *GetResponse) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("content", s.logvalue_Org_Federation_Content(v.GetContent())),
		slog.Int64("cel_expr", v.GetCelExpr()),
	)
}

func (s *FederationService) logvalue_Org_Federation_GetResponseArgument(v *Org_Federation_GetResponseArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.Id),
	)
}

func (s *FederationService) logvalue_repeated_Content_Content(v []*content.Content) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(idx),
			Value: s.logvalue_Content_Content(vv),
		})
	}
	return slog.GroupValue(attrs...)
}

func (s *FederationService) logvalue_repeated_Content_ContentType(v []content.ContentType) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(idx),
			Value: s.logvalue_Content_ContentType(vv),
		})
	}
	return slog.GroupValue(attrs...)
}

func (s *FederationService) logvalue_repeated_Org_Federation_Content(v []*Content) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(idx),
			Value: s.logvalue_Org_Federation_Content(vv),
		})
	}
	return slog.GroupValue(attrs...)
}

func (s *FederationService) logvalue_repeated_Org_Federation_ContentType(v []ContentType) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(idx),
			Value: s.logvalue_Org_Federation_ContentType(vv),
		})
	}
	return slog.GroupValue(attrs...)
}
