// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
// versions:
//
//	protoc-gen-grpc-federation: (devel)
//
// source: federation/federation.proto
package federation

import (
	"context"
	"io"
	"log/slog"
	"reflect"

	grpcfed "github.com/mercari/grpc-federation/grpc/federation"
	grpcfedcel "github.com/mercari/grpc-federation/grpc/federation/cel"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"

	post "example/post"
)

var (
	_ = reflect.Invalid // to avoid "imported and not used error"
)

// Federation_GetPostResponseArgument is argument for "federation.GetPostResponse" message.
type FederationService_Federation_GetPostResponseArgument struct {
	Hdr     map[string][]string
	HdrKeys []string
	Id      string
	Res     *post.GetPostResponse
	Tlr     map[string][]string
	TlrKeys []string
}

// FederationServiceConfig configuration required to initialize the service that use GRPC Federation.
type FederationServiceConfig struct {
	// Client provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
	// If this interface is not provided, an error is returned during initialization.
	Client FederationServiceClientFactory // required
	// ErrorHandler Federation Service often needs to convert errors received from downstream services.
	// If an error occurs during method execution in the Federation Service, this error handler is called and the returned error is treated as a final error.
	ErrorHandler grpcfed.ErrorHandler
	// Logger sets the logger used to output Debug/Info/Error information.
	Logger *slog.Logger
}

// FederationServiceClientFactory provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
type FederationServiceClientFactory interface {
	// Post_PostServiceClient create a gRPC Client to be used to call methods in post.PostService.
	Post_PostServiceClient(FederationServiceClientConfig) (post.PostServiceClient, error)
}

// FederationServiceClientConfig helper to create gRPC client.
// Hints for creating a gRPC Client.
type FederationServiceClientConfig struct {
	// Service FQDN ( `<package-name>.<service-name>` ) of the service on Protocol Buffers.
	Service string
}

// FederationServiceDependentClientSet has a gRPC client for all services on which the federation service depends.
// This is provided as an argument when implementing the custom resolver.
type FederationServiceDependentClientSet struct {
	Post_PostServiceClient post.PostServiceClient
}

// FederationServiceResolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
type FederationServiceResolver interface {
}

// FederationServiceCELPluginWasmConfig type alias for grpcfedcel.WasmConfig.
type FederationServiceCELPluginWasmConfig = grpcfedcel.WasmConfig

// FederationServiceCELPluginConfig hints for loading a WebAssembly based plugin.
type FederationServiceCELPluginConfig struct {
	CacheDir string
}

// FederationServiceUnimplementedResolver a structure implemented to satisfy the Resolver interface.
// An Unimplemented error is always returned.
// This is intended for use when there are many Resolver interfaces that do not need to be implemented,
// by embedding them in a resolver structure that you have created.
type FederationServiceUnimplementedResolver struct{}

const (
	FederationService_DependentMethod_Post_PostService_GetPost = "/post.PostService/GetPost"
)

// FederationService represents Federation Service.
type FederationService struct {
	UnimplementedFederationServiceServer
	cfg                FederationServiceConfig
	logger             *slog.Logger
	errorHandler       grpcfed.ErrorHandler
	celCacheMap        *grpcfed.CELCacheMap
	tracer             trace.Tracer
	celTypeHelper      *grpcfed.CELTypeHelper
	celEnvOpts         []grpcfed.CELEnvOption
	celPluginInstances []*grpcfedcel.CELPluginInstance
	client             *FederationServiceDependentClientSet
}

// NewFederationService creates FederationService instance by FederationServiceConfig.
func NewFederationService(cfg FederationServiceConfig) (*FederationService, error) {
	if cfg.Client == nil {
		return nil, grpcfed.ErrClientConfig
	}
	Post_PostServiceClient, err := cfg.Client.Post_PostServiceClient(FederationServiceClientConfig{
		Service: "post.PostService",
	})
	if err != nil {
		return nil, err
	}
	logger := cfg.Logger
	if logger == nil {
		logger = slog.New(slog.NewJSONHandler(io.Discard, nil))
	}
	errorHandler := cfg.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(ctx context.Context, methodName string, err error) error { return err }
	}
	celTypeHelperFieldMap := grpcfed.CELTypeHelperFieldMap{
		"grpc.federation.private.federation.GetPostResponseArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Id"),
		},
	}
	celTypeHelper := grpcfed.NewCELTypeHelper("federation", celTypeHelperFieldMap)
	var celEnvOpts []grpcfed.CELEnvOption
	celEnvOpts = append(celEnvOpts, grpcfed.NewDefaultEnvOptions(celTypeHelper)...)
	svc := &FederationService{
		cfg:           cfg,
		logger:        logger,
		errorHandler:  errorHandler,
		celEnvOpts:    celEnvOpts,
		celTypeHelper: celTypeHelper,
		celCacheMap:   grpcfed.NewCELCacheMap(),
		tracer:        otel.Tracer("federation.FederationService"),
		client: &FederationServiceDependentClientSet{
			Post_PostServiceClient: Post_PostServiceClient,
		},
	}
	return svc, nil
}

// CleanupFederationService cleanup all resources to prevent goroutine leaks.
func CleanupFederationService(ctx context.Context, svc *FederationService) {
	svc.cleanup(ctx)
}

func (s *FederationService) cleanup(ctx context.Context) {
	for _, instance := range s.celPluginInstances {
		instance.Close(ctx)
	}
}

// GetPost implements "federation.FederationService/GetPost" method.
func (s *FederationService) GetPost(ctx context.Context, req *GetPostRequest) (res *GetPostResponse, e error) {
	ctx, span := s.tracer.Start(ctx, "federation.FederationService/GetPost")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, grpcfed.StackTrace())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()

	defer func() {
		// cleanup plugin instance memory.
		for _, instance := range s.celPluginInstances {
			instance.GC()
		}
	}()
	res, err := s.resolve_Federation_GetPostResponse(ctx, &FederationService_Federation_GetPostResponseArgument{
		Id: req.GetId(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// resolve_Federation_GetPostResponse resolve "federation.GetPostResponse" message.
func (s *FederationService) resolve_Federation_GetPostResponse(ctx context.Context, req *FederationService_Federation_GetPostResponseArgument) (*GetPostResponse, error) {
	ctx, span := s.tracer.Start(ctx, "federation.GetPostResponse")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve federation.GetPostResponse", slog.Any("message_args", s.logvalue_Federation_GetPostResponseArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			Hdr     map[string][]string
			HdrKeys []string
			Res     *post.GetPostResponse
			Tlr     map[string][]string
			TlrKeys []string
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.federation.GetPostResponseArgument", req)}
	/*
		def {
		  name: "hdr"
		  by: "grpc.federation.metadata.new()"
		}
	*/
	def_hdr := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[map[string][]string, *localValueType]{
			Name: `hdr`,
			Type: grpcfed.NewCELMapType(grpcfed.CELStringType, grpcfed.CELListType(grpcfed.CELStringType)),
			Setter: func(value *localValueType, v map[string][]string) error {
				value.vars.Hdr = v
				return nil
			},
			By:           `grpc.federation.metadata.new()`,
			ByCacheIndex: 1,
		})
	}

	/*
		def {
		  name: "tlr"
		  by: "grpc.federation.metadata.new()"
		}
	*/
	def_tlr := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[map[string][]string, *localValueType]{
			Name: `tlr`,
			Type: grpcfed.NewCELMapType(grpcfed.CELStringType, grpcfed.CELListType(grpcfed.CELStringType)),
			Setter: func(value *localValueType, v map[string][]string) error {
				value.vars.Tlr = v
				return nil
			},
			By:           `grpc.federation.metadata.new()`,
			ByCacheIndex: 2,
		})
	}

	/*
		def {
		  name: "res"
		  call {
		    method: "post.PostService/GetPost"
		    request { field: "id", by: "$.id" }
		  }
		}
	*/
	def_res := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*post.GetPostResponse, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("post.GetPostResponse"),
			Setter: func(value *localValueType, v *post.GetPostResponse) error {
				value.vars.Res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &post.GetPostRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:      value,
					Expr:       `$.id`,
					CacheIndex: 3,
					Setter: func(v string) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call post.PostService/GetPost", slog.Any("post.GetPostRequest", s.logvalue_Post_GetPostRequest(args)))
				md, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
					Value:      value,
					Expr:       `{'authorization': ['Bearer xxx']}`,
					OutType:    reflect.TypeOf(map[string][]string{}),
					CacheIndex: 4,
				})
				if err != nil {
					return nil, err
				}
				for k, v := range md.(map[string][]string) {
					for _, vv := range v {
						ctx = grpcfed.AppendToOutgoingContext(ctx, k, vv)
					}
				}

				var callOpts []grpcfed.CallOption
				var hdr grpcfed.GRPCMetadata
				callOpts = append(callOpts, grpcfed.GRPCCallOptionHeader(&hdr))
				var tlr grpcfed.GRPCMetadata
				callOpts = append(callOpts, grpcfed.GRPCCallOptionTrailer(&tlr))
				callOpts = append(callOpts, grpcfed.GRPCCallOptionMaxCallRecvMsgSize(100))
				callOpts = append(callOpts, grpcfed.GRPCCallOptionMaxCallSendMsgSize(100))
				callOpts = append(callOpts, grpcfed.GRPCCallOptionStaticMethod())
				callOpts = append(callOpts, grpcfed.GRPCCallOptionWaitForReady(true))

				ret, err := s.client.Post_PostServiceClient.GetPost(ctx, args, callOpts...)
				value.WithLock(func() {
					if value.vars.Hdr != nil {
						for k, v := range hdr {
							value.vars.Hdr[k] = v
						}
					}
					if value.vars.Tlr != nil {
						for k, v := range tlr {
							value.vars.Tlr[k] = v
						}
					}
				})
				if err != nil {
					if err := s.errorHandler(ctx, FederationService_DependentMethod_Post_PostService_GetPost, err); err != nil {
						return nil, grpcfed.NewErrorWithLogAttrs(err, slog.LevelError, grpcfed.LogAttrs(ctx))
					}
				}
				return ret, nil
			},
		})
	}

	/*
		def {
		  name: "hdr_keys"
		  if: "res != null"
		  by: "hdr.map(k, k)"
		}
	*/
	def_hdr_keys := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[[]string, *localValueType]{
			If:           `res != null`,
			IfCacheIndex: 5,
			Name:         `hdr_keys`,
			Type:         grpcfed.CELListType(grpcfed.CELStringType),
			Setter: func(value *localValueType, v []string) error {
				value.vars.HdrKeys = v
				return nil
			},
			By:           `hdr.map(k, k)`,
			ByCacheIndex: 6,
		})
	}

	/*
		def {
		  name: "tlr_keys"
		  if: "res != null"
		  by: "tlr.map(k, k)"
		}
	*/
	def_tlr_keys := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[[]string, *localValueType]{
			If:           `res != null`,
			IfCacheIndex: 7,
			Name:         `tlr_keys`,
			Type:         grpcfed.CELListType(grpcfed.CELStringType),
			Setter: func(value *localValueType, v []string) error {
				value.vars.TlrKeys = v
				return nil
			},
			By:           `tlr.map(k, k)`,
			ByCacheIndex: 8,
		})
	}

	// A tree view of message dependencies is shown below.
	/*
	        hdr ─┐
	   hdr ─┐    │
	   tlr ─┤    │
	        res ─┤
	             hdr_keys ─┐
	   hdr ─┐              │
	   tlr ─┤              │
	        res ─┐         │
	        tlr ─┤         │
	             tlr_keys ─┤
	*/
	eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)

	grpcfed.GoWithRecover(eg, func() (any, error) {
		eg, ctx2 := grpcfed.ErrorGroupWithContext(ctx1)
		grpcfed.GoWithRecover(eg, func() (any, error) {
			if err := def_hdr(ctx2); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			return nil, nil
		})
		grpcfed.GoWithRecover(eg, func() (any, error) {
			eg, ctx3 := grpcfed.ErrorGroupWithContext(ctx2)
			grpcfed.GoWithRecover(eg, func() (any, error) {
				if err := def_hdr(ctx3); err != nil {
					grpcfed.RecordErrorToSpan(ctx3, err)
					return nil, err
				}
				return nil, nil
			})
			grpcfed.GoWithRecover(eg, func() (any, error) {
				if err := def_tlr(ctx3); err != nil {
					grpcfed.RecordErrorToSpan(ctx3, err)
					return nil, err
				}
				return nil, nil
			})
			if err := eg.Wait(); err != nil {
				return nil, err
			}
			if err := def_res(ctx2); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			return nil, nil
		})
		if err := eg.Wait(); err != nil {
			return nil, err
		}
		if err := def_hdr_keys(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		eg, ctx2 := grpcfed.ErrorGroupWithContext(ctx1)
		grpcfed.GoWithRecover(eg, func() (any, error) {
			eg, ctx3 := grpcfed.ErrorGroupWithContext(ctx2)
			grpcfed.GoWithRecover(eg, func() (any, error) {
				if err := def_hdr(ctx3); err != nil {
					grpcfed.RecordErrorToSpan(ctx3, err)
					return nil, err
				}
				return nil, nil
			})
			grpcfed.GoWithRecover(eg, func() (any, error) {
				if err := def_tlr(ctx3); err != nil {
					grpcfed.RecordErrorToSpan(ctx3, err)
					return nil, err
				}
				return nil, nil
			})
			if err := eg.Wait(); err != nil {
				return nil, err
			}
			if err := def_res(ctx2); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			return nil, nil
		})
		grpcfed.GoWithRecover(eg, func() (any, error) {
			if err := def_tlr(ctx2); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			return nil, nil
		})
		if err := eg.Wait(); err != nil {
			return nil, err
		}
		if err := def_tlr_keys(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	if err := eg.Wait(); err != nil {
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Hdr = value.vars.Hdr
	req.HdrKeys = value.vars.HdrKeys
	req.Res = value.vars.Res
	req.Tlr = value.vars.Tlr
	req.TlrKeys = value.vars.TlrKeys

	// create a message value to be returned.
	ret := &GetPostResponse{}

	// field binding section.
	// (grpc.federation.field).by = "hdr_keys.sortAsc(v, v)"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]string]{
		Value:      value,
		Expr:       `hdr_keys.sortAsc(v, v)`,
		CacheIndex: 9,
		Setter: func(v []string) error {
			ret.Header = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "tlr_keys.sortAsc(v, v)"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]string]{
		Value:      value,
		Expr:       `tlr_keys.sortAsc(v, v)`,
		CacheIndex: 10,
		Setter: func(v []string) error {
			ret.Trailer = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved federation.GetPostResponse", slog.Any("federation.GetPostResponse", s.logvalue_Federation_GetPostResponse(ret)))
	return ret, nil
}

func (s *FederationService) logvalue_Federation_GetPostResponse(v *GetPostResponse) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("header", v.GetHeader()),
		slog.Any("trailer", v.GetTrailer()),
	)
}

func (s *FederationService) logvalue_Federation_GetPostResponseArgument(v *FederationService_Federation_GetPostResponseArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.Id),
	)
}

func (s *FederationService) logvalue_Post_GetPostRequest(v *post.GetPostRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.GetId()),
	)
}
