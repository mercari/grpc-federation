// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
// versions:
//
//	protoc-gen-grpc-federation: (devel)
//
// source: plugin/plugin.proto
package pluginpb

import (
	"context"
	"fmt"
	"reflect"

	grpcfed "github.com/mercari/grpc-federation/grpc/federation"
)

var (
	_ = reflect.Invalid // to avoid "imported and not used error"
)

type AccountPlugin interface {
	Example_Account_GetId(context.Context) (string, error)
	Example_Account_GetId2(context.Context, string) (string, error)
}

func RegisterAccountPlugin(plug AccountPlugin) {
	grpcfed.PluginMainLoop(
		grpcfed.CELPluginVersionSchema{
			ProtocolVersion:   grpcfed.CELPluginProtocolVersion,
			FederationVersion: "(devel)",
			Functions: []string{
				"example_account_get_id_string",
				"example_account_get_id_string_string",
			},
		},
		func(ctx context.Context, req *grpcfed.CELPluginRequest) (*grpcfed.CELPluginResponse, error) {
			switch req.GetMethod() {
			case "example_account_get_id_string":
				if len(req.GetArgs()) != 0 {
					return nil, fmt.Errorf("%s: invalid argument number: %d. expected number is %d", req.GetMethod(), len(req.GetArgs()), 0)
				}
				ret, err := plug.Example_Account_GetId(ctx)
				if err != nil {
					return nil, err
				}
				return grpcfed.ToStringCELPluginResponse(ret)
			case "example_account_get_id_string_string":
				if len(req.GetArgs()) != 1 {
					return nil, fmt.Errorf("%s: invalid argument number: %d. expected number is %d", req.GetMethod(), len(req.GetArgs()), 1)
				}
				arg0, err := grpcfed.ToString(req.GetArgs()[0])
				if err != nil {
					return nil, err
				}
				ret, err := plug.Example_Account_GetId2(ctx, arg0)
				if err != nil {
					return nil, err
				}
				return grpcfed.ToStringCELPluginResponse(ret)
			}
			return nil, fmt.Errorf("unexpected method name: %s", req.GetMethod())
		},
	)
}
