// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: grpc/federation/federation.proto

package federation

import (
	_ "github.com/mercari/grpc-federation/grpc/federation/cel"
	code "google.golang.org/genproto/googleapis/rpc/code"
	errdetails "google.golang.org/genproto/googleapis/rpc/errdetails"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TypeKind is primitive kind list.
type TypeKind int32

const (
	// UNKNOWN represents unexpected value.
	TypeKind_UNKNOWN TypeKind = 0
	// STRING is used to convert the input value to `string` type.
	TypeKind_STRING TypeKind = 1
	// BOOL is used to convert the input value to `bool` type.
	TypeKind_BOOL TypeKind = 2
	// INT64 is used to convert the input value to `int64` type.
	TypeKind_INT64 TypeKind = 3
	// UINT64 is used to convert the input value to `uint64` type.
	TypeKind_UINT64 TypeKind = 4
	// DOUBLE is used to convert the input value to `double` type.
	TypeKind_DOUBLE TypeKind = 5
	// DURATION is used to convert the input value to the `google.protobuf.Duration` type.
	TypeKind_DURATION TypeKind = 6
)

// Enum value maps for TypeKind.
var (
	TypeKind_name = map[int32]string{
		0: "UNKNOWN",
		1: "STRING",
		2: "BOOL",
		3: "INT64",
		4: "UINT64",
		5: "DOUBLE",
		6: "DURATION",
	}
	TypeKind_value = map[string]int32{
		"UNKNOWN":  0,
		"STRING":   1,
		"BOOL":     2,
		"INT64":    3,
		"UINT64":   4,
		"DOUBLE":   5,
		"DURATION": 6,
	}
)

func (x TypeKind) Enum() *TypeKind {
	p := new(TypeKind)
	*p = x
	return p
}

func (x TypeKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeKind) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_federation_federation_proto_enumTypes[0].Descriptor()
}

func (TypeKind) Type() protoreflect.EnumType {
	return &file_grpc_federation_federation_proto_enumTypes[0]
}

func (x TypeKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeKind.Descriptor instead.
func (TypeKind) EnumDescriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{0}
}

type FileRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plugin *CELPlugin `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`
}

func (x *FileRule) Reset() {
	*x = FileRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRule) ProtoMessage() {}

func (x *FileRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRule.ProtoReflect.Descriptor instead.
func (*FileRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{0}
}

func (x *FileRule) GetPlugin() *CELPlugin {
	if x != nil {
		return x.Plugin
	}
	return nil
}

type EnumRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// alias mapping between enums defined in other packages and enums defined on the federation service side.
	// The alias is the FQDN ( <package-name>.<enum-name> ) to the enum.
	// If this definition exists, type conversion is automatically performed before the enum value assignment operation.
	// If a enum with this option has a value that is not present in the enum specified by alias, and the alias option is not specified for that value, an error is occurred.
	// You can specify multiple aliases. In that case, only values common to all aliases will be considered.
	// Specifying a value that is not included in either alias will result in an error.
	Alias []string `protobuf:"bytes,1,rep,name=alias,proto3" json:"alias,omitempty"`
}

func (x *EnumRule) Reset() {
	*x = EnumRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumRule) ProtoMessage() {}

func (x *EnumRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumRule.ProtoReflect.Descriptor instead.
func (*EnumRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{1}
}

func (x *EnumRule) GetAlias() []string {
	if x != nil {
		return x.Alias
	}
	return nil
}

type EnumValueRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// specifies the default value of the enum.
	// All values other than those specified in alias will be default values.
	Default *bool `protobuf:"varint,1,opt,name=default,proto3,oneof" json:"default,omitempty"`
	// alias can be used when alias is specified in grpc.federation.enum option,
	// and specifies the value name to be referenced among the enums specified in alias of enum option.
	// multiple value names can be specified for alias.
	Alias []string `protobuf:"bytes,2,rep,name=alias,proto3" json:"alias,omitempty"`
}

func (x *EnumValueRule) Reset() {
	*x = EnumValueRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumValueRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumValueRule) ProtoMessage() {}

func (x *EnumValueRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumValueRule.ProtoReflect.Descriptor instead.
func (*EnumValueRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{2}
}

func (x *EnumValueRule) GetDefault() bool {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return false
}

func (x *EnumValueRule) GetAlias() []string {
	if x != nil {
		return x.Alias
	}
	return nil
}

type OneofRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OneofRule) Reset() {
	*x = OneofRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneofRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofRule) ProtoMessage() {}

func (x *OneofRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofRule.ProtoReflect.Descriptor instead.
func (*OneofRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{3}
}

// ServiceRule define gRPC Federation rules for the service.
type ServiceRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// env defines the environment variable.
	Env *Env `protobuf:"bytes,1,opt,name=env,proto3" json:"env,omitempty"`
}

func (x *ServiceRule) Reset() {
	*x = ServiceRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRule) ProtoMessage() {}

func (x *ServiceRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRule.ProtoReflect.Descriptor instead.
func (*ServiceRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{4}
}

func (x *ServiceRule) GetEnv() *Env {
	if x != nil {
		return x.Env
	}
	return nil
}

// Env is used when setting environment variables.
// There are two ways to configure it.
type Env struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// var is used to directly list environment variables.
	Var []*EnvVar `protobuf:"bytes,1,rep,name=var,proto3" json:"var,omitempty"`
	// message is used to reference an already defined Protocol Buffers' message for defining environment variables.
	// If you want to set detailed options for the fields of the message, use the `env` option in FieldRule.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Env) Reset() {
	*x = Env{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Env) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Env) ProtoMessage() {}

func (x *Env) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Env.ProtoReflect.Descriptor instead.
func (*Env) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{5}
}

func (x *Env) GetVar() []*EnvVar {
	if x != nil {
		return x.Var
	}
	return nil
}

func (x *Env) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// EnvVar represents an environment variable.
type EnvVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is an environment variable name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// type is an environment variable type.
	Type *EnvType `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// option is an additional option for parsing environment variable.
	Option *EnvVarOption `protobuf:"bytes,3,opt,name=option,proto3,oneof" json:"option,omitempty"`
}

func (x *EnvVar) Reset() {
	*x = EnvVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVar) ProtoMessage() {}

func (x *EnvVar) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVar.ProtoReflect.Descriptor instead.
func (*EnvVar) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{6}
}

func (x *EnvVar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvVar) GetType() *EnvType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EnvVar) GetOption() *EnvVarOption {
	if x != nil {
		return x.Option
	}
	return nil
}

// EnvType represents type information for environment variable.
type EnvType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*EnvType_Kind
	//	*EnvType_Repeated
	//	*EnvType_Map
	Type isEnvType_Type `protobuf_oneof:"type"`
}

func (x *EnvType) Reset() {
	*x = EnvType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvType) ProtoMessage() {}

func (x *EnvType) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvType.ProtoReflect.Descriptor instead.
func (*EnvType) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{7}
}

func (m *EnvType) GetType() isEnvType_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *EnvType) GetKind() TypeKind {
	if x, ok := x.GetType().(*EnvType_Kind); ok {
		return x.Kind
	}
	return TypeKind_UNKNOWN
}

func (x *EnvType) GetRepeated() *EnvType {
	if x, ok := x.GetType().(*EnvType_Repeated); ok {
		return x.Repeated
	}
	return nil
}

func (x *EnvType) GetMap() *EnvMapType {
	if x, ok := x.GetType().(*EnvType_Map); ok {
		return x.Map
	}
	return nil
}

type isEnvType_Type interface {
	isEnvType_Type()
}

type EnvType_Kind struct {
	// kind is used when the type is a primitive type.
	Kind TypeKind `protobuf:"varint,1,opt,name=kind,proto3,enum=grpc.federation.TypeKind,oneof"`
}

type EnvType_Repeated struct {
	// repeated is used when the type is a repeated type.
	Repeated *EnvType `protobuf:"bytes,2,opt,name=repeated,proto3,oneof"`
}

type EnvType_Map struct {
	// map is used when the type is a map type.
	Map *EnvMapType `protobuf:"bytes,3,opt,name=map,proto3,oneof"`
}

func (*EnvType_Kind) isEnvType_Type() {}

func (*EnvType_Repeated) isEnvType_Type() {}

func (*EnvType_Map) isEnvType_Type() {}

// EnvMapType represents map type.
type EnvMapType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key represents map's key type.
	Key *EnvType `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// value represents map's value type.
	Value *EnvType `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EnvMapType) Reset() {
	*x = EnvMapType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvMapType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvMapType) ProtoMessage() {}

func (x *EnvMapType) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvMapType.ProtoReflect.Descriptor instead.
func (*EnvMapType) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{8}
}

func (x *EnvMapType) GetKey() *EnvType {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EnvMapType) GetValue() *EnvType {
	if x != nil {
		return x.Value
	}
	return nil
}

// EnvVarOption represents additional option for environment variable.
// The option work with the `envconfig` library in Go language.
// For detailed specifications, please refer to the library's documentation ( https://pkg.go.dev/github.com/kelseyhightower/envconfig#section-readme ).
type EnvVarOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// alternate use this option if you want to use an environment variable with a different name than the value specified in `EnvVar.name`.
	Alternate *string `protobuf:"bytes,1,opt,name=alternate,proto3,oneof" json:"alternate,omitempty"`
	// default specify the value to use as a fallback if the specified environment variable is not found.
	Default *string `protobuf:"bytes,2,opt,name=default,proto3,oneof" json:"default,omitempty"`
	// required require the environment variable to exist.
	// If it does not exist, an error will occur at startup.
	Required *bool `protobuf:"varint,3,opt,name=required,proto3,oneof" json:"required,omitempty"`
	// ignored if ignored is true, it does nothing even if the environment variable exists.
	Ignored *bool `protobuf:"varint,4,opt,name=ignored,proto3,oneof" json:"ignored,omitempty"`
}

func (x *EnvVarOption) Reset() {
	*x = EnvVarOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvVarOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVarOption) ProtoMessage() {}

func (x *EnvVarOption) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVarOption.ProtoReflect.Descriptor instead.
func (*EnvVarOption) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{9}
}

func (x *EnvVarOption) GetAlternate() string {
	if x != nil && x.Alternate != nil {
		return *x.Alternate
	}
	return ""
}

func (x *EnvVarOption) GetDefault() string {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return ""
}

func (x *EnvVarOption) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

func (x *EnvVarOption) GetIgnored() bool {
	if x != nil && x.Ignored != nil {
		return *x.Ignored
	}
	return false
}

type MethodRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the time to timeout. If the specified time period elapses, DEADLINE_EXCEEDED status is returned.
	// If you want to handle this error, you need to implement a custom error handler in Go.
	// The format is the same as Go's time.Duration format. See https://pkg.go.dev/time#ParseDuration.
	Timeout *string `protobuf:"bytes,1,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
}

func (x *MethodRule) Reset() {
	*x = MethodRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodRule) ProtoMessage() {}

func (x *MethodRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodRule.ProtoReflect.Descriptor instead.
func (*MethodRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{10}
}

func (x *MethodRule) GetTimeout() string {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return ""
}

// MessageRule define gRPC Federation rules for the message.
type MessageRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// def specify variables to be used in field binding by `grpc.federation.field` option.
	Def []*VariableDefinition `protobuf:"bytes,1,rep,name=def,proto3" json:"def,omitempty"`
	// if custom_resolver is true, the resolver for this message is implemented by Go.
	// If there are any values retrieved by resolver or messages, they are passed as arguments for custom resolver.
	// Each field of the message returned by the custom resolver is automatically bound.
	// If you want to change the binding process for a particular field, set `custom_resolver=true` option for that field.
	CustomResolver *bool `protobuf:"varint,2,opt,name=custom_resolver,json=customResolver,proto3,oneof" json:"custom_resolver,omitempty"`
	// alias mapping between messages defined in other packages and messages defined on the federation service side.
	// The alias is the FQDN ( <package-name>.<message-name> ) to the message.
	// If this definition exists, type conversion is automatically performed before the field assignment operation.
	// If a message with this option has a field that is not present in the message specified by alias, and the alias option is not specified for that field, an error is occurred.
	// You can specify multiple aliases. In that case, only fields common to all aliases will be considered.
	// Specifying a field that is not included in either alias will result in an error.
	Alias []string `protobuf:"bytes,3,rep,name=alias,proto3" json:"alias,omitempty"`
}

func (x *MessageRule) Reset() {
	*x = MessageRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRule) ProtoMessage() {}

func (x *MessageRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRule.ProtoReflect.Descriptor instead.
func (*MessageRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{11}
}

func (x *MessageRule) GetDef() []*VariableDefinition {
	if x != nil {
		return x.Def
	}
	return nil
}

func (x *MessageRule) GetCustomResolver() bool {
	if x != nil && x.CustomResolver != nil {
		return *x.CustomResolver
	}
	return false
}

func (x *MessageRule) GetAlias() []string {
	if x != nil {
		return x.Alias
	}
	return nil
}

// VariableDefinition represents variable definition.
type VariableDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is a variable name.
	// This name can be referenced in all CELs defined after itself in the same message.
	// It can also be referenced in `grpc.federation.field` option.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// if specify the condition for evaluating expr.
	// this value evaluated by CEL and it must return a boolean value.
	// If the result of evaluation is `false`, the value assigned to name is the default value of the result of evaluation of `expr`.
	If *string `protobuf:"bytes,2,opt,name=if,proto3,oneof" json:"if,omitempty"`
	// autobind if the result value of `expr` is a message type,
	// the value of a field with the same name and type as the field name of its own message is automatically assigned to the value of the field in the message.
	// If multiple autobinds are used at the same message,
	// you must explicitly use the `grpc.federation.field` option to do the binding yourself, since duplicate field names cannot be correctly determined as one.
	Autobind *bool `protobuf:"varint,3,opt,name=autobind,proto3,oneof" json:"autobind,omitempty"`
	// expr specify the value to be assigned to name.
	//
	// Types that are assignable to Expr:
	//
	//	*VariableDefinition_By
	//	*VariableDefinition_Map
	//	*VariableDefinition_Message
	//	*VariableDefinition_Call
	//	*VariableDefinition_Validation
	Expr isVariableDefinition_Expr `protobuf_oneof:"expr"`
}

func (x *VariableDefinition) Reset() {
	*x = VariableDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableDefinition) ProtoMessage() {}

func (x *VariableDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableDefinition.ProtoReflect.Descriptor instead.
func (*VariableDefinition) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{12}
}

func (x *VariableDefinition) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *VariableDefinition) GetIf() string {
	if x != nil && x.If != nil {
		return *x.If
	}
	return ""
}

func (x *VariableDefinition) GetAutobind() bool {
	if x != nil && x.Autobind != nil {
		return *x.Autobind
	}
	return false
}

func (m *VariableDefinition) GetExpr() isVariableDefinition_Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (x *VariableDefinition) GetBy() string {
	if x, ok := x.GetExpr().(*VariableDefinition_By); ok {
		return x.By
	}
	return ""
}

func (x *VariableDefinition) GetMap() *MapExpr {
	if x, ok := x.GetExpr().(*VariableDefinition_Map); ok {
		return x.Map
	}
	return nil
}

func (x *VariableDefinition) GetMessage() *MessageExpr {
	if x, ok := x.GetExpr().(*VariableDefinition_Message); ok {
		return x.Message
	}
	return nil
}

func (x *VariableDefinition) GetCall() *CallExpr {
	if x, ok := x.GetExpr().(*VariableDefinition_Call); ok {
		return x.Call
	}
	return nil
}

func (x *VariableDefinition) GetValidation() *ValidationExpr {
	if x, ok := x.GetExpr().(*VariableDefinition_Validation); ok {
		return x.Validation
	}
	return nil
}

type isVariableDefinition_Expr interface {
	isVariableDefinition_Expr()
}

type VariableDefinition_By struct {
	// `by` evaluates with CEL.
	By string `protobuf:"bytes,11,opt,name=by,proto3,oneof"`
}

type VariableDefinition_Map struct {
	// map apply map operation for the specified repeated type.
	Map *MapExpr `protobuf:"bytes,12,opt,name=map,proto3,oneof"`
}

type VariableDefinition_Message struct {
	// message gets with message arguments.
	Message *MessageExpr `protobuf:"bytes,13,opt,name=message,proto3,oneof"`
}

type VariableDefinition_Call struct {
	// call specifies how to call gRPC method.
	Call *CallExpr `protobuf:"bytes,14,opt,name=call,proto3,oneof"`
}

type VariableDefinition_Validation struct {
	// validation defines the validation rule and error.
	Validation *ValidationExpr `protobuf:"bytes,15,opt,name=validation,proto3,oneof"`
}

func (*VariableDefinition_By) isVariableDefinition_Expr() {}

func (*VariableDefinition_Map) isVariableDefinition_Expr() {}

func (*VariableDefinition_Message) isVariableDefinition_Expr() {}

func (*VariableDefinition_Call) isVariableDefinition_Expr() {}

func (*VariableDefinition_Validation) isVariableDefinition_Expr() {}

// MapExpr apply map operation for the specified repeated type.
type MapExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// iterator define iterator variable.
	// When evaluating CEL in `expr`, we can refer to the name defined in iterator.
	Iterator *Iterator `protobuf:"bytes,1,opt,name=iterator,proto3" json:"iterator,omitempty"`
	// expr creates map elements using iterator variable.
	//
	// Types that are assignable to Expr:
	//
	//	*MapExpr_By
	//	*MapExpr_Message
	Expr isMapExpr_Expr `protobuf_oneof:"expr"`
}

func (x *MapExpr) Reset() {
	*x = MapExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapExpr) ProtoMessage() {}

func (x *MapExpr) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapExpr.ProtoReflect.Descriptor instead.
func (*MapExpr) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{13}
}

func (x *MapExpr) GetIterator() *Iterator {
	if x != nil {
		return x.Iterator
	}
	return nil
}

func (m *MapExpr) GetExpr() isMapExpr_Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (x *MapExpr) GetBy() string {
	if x, ok := x.GetExpr().(*MapExpr_By); ok {
		return x.By
	}
	return ""
}

func (x *MapExpr) GetMessage() *MessageExpr {
	if x, ok := x.GetExpr().(*MapExpr_Message); ok {
		return x.Message
	}
	return nil
}

type isMapExpr_Expr interface {
	isMapExpr_Expr()
}

type MapExpr_By struct {
	// `by` evaluates with CEL.
	// this can refer to the variable declared by `iterator`.
	By string `protobuf:"bytes,11,opt,name=by,proto3,oneof"`
}

type MapExpr_Message struct {
	// message gets with message arguments, and it is made an element of the map.
	// The result type of MapExpr is the repeated type of the specified message.
	Message *MessageExpr `protobuf:"bytes,12,opt,name=message,proto3,oneof"`
}

func (*MapExpr_By) isMapExpr_Expr() {}

func (*MapExpr_Message) isMapExpr_Expr() {}

// Iterator represents iterator variable.
type Iterator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// variable name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// src the value that will be the source for creating the iterator.
	// src must be a repeated type.
	Src string `protobuf:"bytes,2,opt,name=src,proto3" json:"src,omitempty"`
}

func (x *Iterator) Reset() {
	*x = Iterator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Iterator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Iterator) ProtoMessage() {}

func (x *Iterator) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Iterator.ProtoReflect.Descriptor instead.
func (*Iterator) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{14}
}

func (x *Iterator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Iterator) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

// MessageExpr represents dependent message.
type MessageExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name specify the message name by FQDN. format is `<package-name>.<message-name>`.
	// <package-name> can be omitted when referring to messages in the same package.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// args specify the parameters needed to get the message. This is called the "message arguments".
	Args []*Argument `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *MessageExpr) Reset() {
	*x = MessageExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageExpr) ProtoMessage() {}

func (x *MessageExpr) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageExpr.ProtoReflect.Descriptor instead.
func (*MessageExpr) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{15}
}

func (x *MessageExpr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageExpr) GetArgs() []*Argument {
	if x != nil {
		return x.Args
	}
	return nil
}

// CallExpr represents how to call gRPC method.
type CallExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method specify the FQDN for the gRPC method. format is `<package-name>.<service-name>/<method-name>`.
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// request specify request parameters for the gRPC method.
	Request []*MethodRequest `protobuf:"bytes,2,rep,name=request,proto3" json:"request,omitempty"`
	// the time to timeout. If the specified time period elapses, DEADLINE_EXCEEDED status is returned.
	// If you want to handle this error, you need to implement a custom error handler in Go.
	// The format is the same as Go's time.Duration format. See https://pkg.go.dev/time#ParseDuration.
	Timeout *string `protobuf:"bytes,3,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	// retry specifies the retry policy if the method call fails.
	Retry *RetryPolicy `protobuf:"bytes,4,opt,name=retry,proto3,oneof" json:"retry,omitempty"`
	// error evaluated when an error occurs during a method call.
	// Multiple errors can be defined and are evaluated in the order in which they are described.
	// If an error occurs while creating an gRPC status error, original error will be returned.
	Error []*GRPCError `protobuf:"bytes,5,rep,name=error,proto3" json:"error,omitempty"`
}

func (x *CallExpr) Reset() {
	*x = CallExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallExpr) ProtoMessage() {}

func (x *CallExpr) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallExpr.ProtoReflect.Descriptor instead.
func (*CallExpr) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{16}
}

func (x *CallExpr) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CallExpr) GetRequest() []*MethodRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CallExpr) GetTimeout() string {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return ""
}

func (x *CallExpr) GetRetry() *RetryPolicy {
	if x != nil {
		return x.Retry
	}
	return nil
}

func (x *CallExpr) GetError() []*GRPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

// GRPCError create gRPC status value.
type GRPCError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// def define variables in current scope.
	Def []*VariableDefinition `protobuf:"bytes,1,rep,name=def,proto3" json:"def,omitempty"`
	// if specifies condition in CEL. If the condition is true, it returns defined error information.
	// If this field is omitted, it is always treated as 'true' and returns defined error information.
	// The return value must always be of type boolean.
	If *string `protobuf:"bytes,2,opt,name=if,proto3,oneof" json:"if,omitempty"`
	// code is a gRPC status code.
	Code code.Code `protobuf:"varint,3,opt,name=code,proto3,enum=google.rpc.Code" json:"code,omitempty"`
	// message is a gRPC status message.
	// If omitted, the message will be auto-generated from the configurations.
	Message *string `protobuf:"bytes,4,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// details is a list of error details.
	// If returns error, the corresponding error details are set.
	Details []*GRPCErrorDetail `protobuf:"bytes,5,rep,name=details,proto3" json:"details,omitempty"`
	// ignore ignore the error if the condition in the "if" field is true and "ignore" field is set to true.
	// When an error is ignored, the returned response is always null value.
	// If you want to return a response that is not null, please use `ignore_and_response` feature.
	// Therefore, `ignore` and `ignore_and_response` cannot be specified same.
	Ignore *bool `protobuf:"varint,6,opt,name=ignore,proto3,oneof" json:"ignore,omitempty"`
	// ignore_and_response ignore the error if the condition in the "if" field is true and it returns response specified in CEL.
	// The evaluation value of CEL must always be the same as the response message type.
	// `ignore` and `ignore_and_response` cannot be specified same.
	IgnoreAndResponse *string `protobuf:"bytes,7,opt,name=ignore_and_response,json=ignoreAndResponse,proto3,oneof" json:"ignore_and_response,omitempty"`
}

func (x *GRPCError) Reset() {
	*x = GRPCError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GRPCError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GRPCError) ProtoMessage() {}

func (x *GRPCError) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GRPCError.ProtoReflect.Descriptor instead.
func (*GRPCError) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{17}
}

func (x *GRPCError) GetDef() []*VariableDefinition {
	if x != nil {
		return x.Def
	}
	return nil
}

func (x *GRPCError) GetIf() string {
	if x != nil && x.If != nil {
		return *x.If
	}
	return ""
}

func (x *GRPCError) GetCode() code.Code {
	if x != nil {
		return x.Code
	}
	return code.Code(0)
}

func (x *GRPCError) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *GRPCError) GetDetails() []*GRPCErrorDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *GRPCError) GetIgnore() bool {
	if x != nil && x.Ignore != nil {
		return *x.Ignore
	}
	return false
}

func (x *GRPCError) GetIgnoreAndResponse() string {
	if x != nil && x.IgnoreAndResponse != nil {
		return *x.IgnoreAndResponse
	}
	return ""
}

type GRPCErrorDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if specifies condition rule in CEL. If the condition is true, gRPC error detail is added to the error.
	If string `protobuf:"bytes,1,opt,name=if,proto3" json:"if,omitempty"`
	// def define variables in current scope.
	Def []*VariableDefinition `protobuf:"bytes,2,rep,name=def,proto3" json:"def,omitempty"`
	// message represents arbitrary messages to describe the detail of the error.
	Message []*MessageExpr `protobuf:"bytes,3,rep,name=message,proto3" json:"message,omitempty"`
	// error_info describes the cause of the error with structured details.
	ErrorInfo []*errdetails.ErrorInfo `protobuf:"bytes,4,rep,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
	// retry_info describes when the clients can retry a failed request.
	RetryInfo []*errdetails.RetryInfo `protobuf:"bytes,5,rep,name=retry_info,json=retryInfo,proto3" json:"retry_info,omitempty"`
	// debug_info describes additional debugging info.
	DebugInfo []*errdetails.DebugInfo `protobuf:"bytes,6,rep,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty"`
	// quota_failure describes how a quota check failed.
	QuotaFailure []*errdetails.QuotaFailure `protobuf:"bytes,7,rep,name=quota_failure,json=quotaFailure,proto3" json:"quota_failure,omitempty"`
	// precondition_failure describes what preconditions have failed.
	PreconditionFailure []*errdetails.PreconditionFailure `protobuf:"bytes,8,rep,name=precondition_failure,json=preconditionFailure,proto3" json:"precondition_failure,omitempty"`
	// bad_request describes violations in a client request.
	BadRequest []*errdetails.BadRequest `protobuf:"bytes,9,rep,name=bad_request,json=badRequest,proto3" json:"bad_request,omitempty"`
	// request_info contains metadata about the request that clients can attach.
	RequestInfo []*errdetails.RequestInfo `protobuf:"bytes,10,rep,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	// resource_info describes the resource that is being accessed.
	ResourceInfo []*errdetails.ResourceInfo `protobuf:"bytes,11,rep,name=resource_info,json=resourceInfo,proto3" json:"resource_info,omitempty"`
	// help provides links to documentation or for performing an out of band action.
	Help []*errdetails.Help `protobuf:"bytes,12,rep,name=help,proto3" json:"help,omitempty"`
	// localized_message provides a localized error message that is safe to return to the user.
	LocalizedMessage []*errdetails.LocalizedMessage `protobuf:"bytes,13,rep,name=localized_message,json=localizedMessage,proto3" json:"localized_message,omitempty"`
}

func (x *GRPCErrorDetail) Reset() {
	*x = GRPCErrorDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GRPCErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GRPCErrorDetail) ProtoMessage() {}

func (x *GRPCErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GRPCErrorDetail.ProtoReflect.Descriptor instead.
func (*GRPCErrorDetail) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{18}
}

func (x *GRPCErrorDetail) GetIf() string {
	if x != nil {
		return x.If
	}
	return ""
}

func (x *GRPCErrorDetail) GetDef() []*VariableDefinition {
	if x != nil {
		return x.Def
	}
	return nil
}

func (x *GRPCErrorDetail) GetMessage() []*MessageExpr {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GRPCErrorDetail) GetErrorInfo() []*errdetails.ErrorInfo {
	if x != nil {
		return x.ErrorInfo
	}
	return nil
}

func (x *GRPCErrorDetail) GetRetryInfo() []*errdetails.RetryInfo {
	if x != nil {
		return x.RetryInfo
	}
	return nil
}

func (x *GRPCErrorDetail) GetDebugInfo() []*errdetails.DebugInfo {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

func (x *GRPCErrorDetail) GetQuotaFailure() []*errdetails.QuotaFailure {
	if x != nil {
		return x.QuotaFailure
	}
	return nil
}

func (x *GRPCErrorDetail) GetPreconditionFailure() []*errdetails.PreconditionFailure {
	if x != nil {
		return x.PreconditionFailure
	}
	return nil
}

func (x *GRPCErrorDetail) GetBadRequest() []*errdetails.BadRequest {
	if x != nil {
		return x.BadRequest
	}
	return nil
}

func (x *GRPCErrorDetail) GetRequestInfo() []*errdetails.RequestInfo {
	if x != nil {
		return x.RequestInfo
	}
	return nil
}

func (x *GRPCErrorDetail) GetResourceInfo() []*errdetails.ResourceInfo {
	if x != nil {
		return x.ResourceInfo
	}
	return nil
}

func (x *GRPCErrorDetail) GetHelp() []*errdetails.Help {
	if x != nil {
		return x.Help
	}
	return nil
}

func (x *GRPCErrorDetail) GetLocalizedMessage() []*errdetails.LocalizedMessage {
	if x != nil {
		return x.LocalizedMessage
	}
	return nil
}

// Validation represents a validation rule against variables defined within the current scope.
type ValidationExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is a unique name for the validation.
	// If set, the validation error type will be <message-name><name>Error.
	// If omitted, the validation error type will be ValidationError.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// error defines the actual validation rules and an error to returned if the validation fails.
	Error *GRPCError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ValidationExpr) Reset() {
	*x = ValidationExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationExpr) ProtoMessage() {}

func (x *ValidationExpr) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationExpr.ProtoReflect.Descriptor instead.
func (*ValidationExpr) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{19}
}

func (x *ValidationExpr) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ValidationExpr) GetError() *GRPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

// RetryPolicy define the retry policy if the method call fails.
type RetryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Policy:
	//
	//	*RetryPolicy_Constant
	//	*RetryPolicy_Exponential
	Policy isRetryPolicy_Policy `protobuf_oneof:"policy"`
	// if specifies condition in CEL. If the condition is true, run the retry process according to the policy.
	// If this field is omitted, it is always treated as 'true' and run the retry process.
	// The return value must always be of type boolean.
	If string `protobuf:"bytes,3,opt,name=if,proto3" json:"if,omitempty"`
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{20}
}

func (m *RetryPolicy) GetPolicy() isRetryPolicy_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *RetryPolicy) GetConstant() *RetryPolicyConstant {
	if x, ok := x.GetPolicy().(*RetryPolicy_Constant); ok {
		return x.Constant
	}
	return nil
}

func (x *RetryPolicy) GetExponential() *RetryPolicyExponential {
	if x, ok := x.GetPolicy().(*RetryPolicy_Exponential); ok {
		return x.Exponential
	}
	return nil
}

func (x *RetryPolicy) GetIf() string {
	if x != nil {
		return x.If
	}
	return ""
}

type isRetryPolicy_Policy interface {
	isRetryPolicy_Policy()
}

type RetryPolicy_Constant struct {
	// retry according to the "constant" policy.
	Constant *RetryPolicyConstant `protobuf:"bytes,1,opt,name=constant,proto3,oneof"`
}

type RetryPolicy_Exponential struct {
	// retry according to the "exponential backoff" policy.
	// The following Go library is used in the implementation,
	// so please refer to the library documentation for how to specify each parameter.
	// https://pkg.go.dev/github.com/cenkalti/backoff/v4#section-readme.
	Exponential *RetryPolicyExponential `protobuf:"bytes,2,opt,name=exponential,proto3,oneof"`
}

func (*RetryPolicy_Constant) isRetryPolicy_Policy() {}

func (*RetryPolicy_Exponential) isRetryPolicy_Policy() {}

// RetryPolicyConstant define "constant" based retry policy.
type RetryPolicyConstant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// interval value. ( default value is 1s ).
	Interval *string `protobuf:"bytes,1,opt,name=interval,proto3,oneof" json:"interval,omitempty"`
	// max retry count. ( default value is 5. If zero is specified, it never stops )
	MaxRetries *uint64 `protobuf:"varint,2,opt,name=max_retries,json=maxRetries,proto3,oneof" json:"max_retries,omitempty"`
}

func (x *RetryPolicyConstant) Reset() {
	*x = RetryPolicyConstant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicyConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicyConstant) ProtoMessage() {}

func (x *RetryPolicyConstant) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicyConstant.ProtoReflect.Descriptor instead.
func (*RetryPolicyConstant) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{21}
}

func (x *RetryPolicyConstant) GetInterval() string {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return ""
}

func (x *RetryPolicyConstant) GetMaxRetries() uint64 {
	if x != nil && x.MaxRetries != nil {
		return *x.MaxRetries
	}
	return 0
}

// RetryPolicyExponential define "exponential backoff" based retry policy.
type RetryPolicyExponential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// initial interval value. ( default value is "500ms" ).
	InitialInterval *string `protobuf:"bytes,1,opt,name=initial_interval,json=initialInterval,proto3,oneof" json:"initial_interval,omitempty"`
	// randomization factor value. ( default value is 0.5 ).
	RandomizationFactor *float64 `protobuf:"fixed64,2,opt,name=randomization_factor,json=randomizationFactor,proto3,oneof" json:"randomization_factor,omitempty"`
	// multiplier. ( default value is 1.5 ).
	Multiplier *float64 `protobuf:"fixed64,3,opt,name=multiplier,proto3,oneof" json:"multiplier,omitempty"`
	// max interval value. ( default value is "60s" ).
	MaxInterval *string `protobuf:"bytes,4,opt,name=max_interval,json=maxInterval,proto3,oneof" json:"max_interval,omitempty"`
	// max retry count. ( default value is 5. If zero is specified, it never stops ).
	MaxRetries *uint64 `protobuf:"varint,5,opt,name=max_retries,json=maxRetries,proto3,oneof" json:"max_retries,omitempty"`
}

func (x *RetryPolicyExponential) Reset() {
	*x = RetryPolicyExponential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicyExponential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicyExponential) ProtoMessage() {}

func (x *RetryPolicyExponential) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicyExponential.ProtoReflect.Descriptor instead.
func (*RetryPolicyExponential) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{22}
}

func (x *RetryPolicyExponential) GetInitialInterval() string {
	if x != nil && x.InitialInterval != nil {
		return *x.InitialInterval
	}
	return ""
}

func (x *RetryPolicyExponential) GetRandomizationFactor() float64 {
	if x != nil && x.RandomizationFactor != nil {
		return *x.RandomizationFactor
	}
	return 0
}

func (x *RetryPolicyExponential) GetMultiplier() float64 {
	if x != nil && x.Multiplier != nil {
		return *x.Multiplier
	}
	return 0
}

func (x *RetryPolicyExponential) GetMaxInterval() string {
	if x != nil && x.MaxInterval != nil {
		return *x.MaxInterval
	}
	return ""
}

func (x *RetryPolicyExponential) GetMaxRetries() uint64 {
	if x != nil && x.MaxRetries != nil {
		return *x.MaxRetries
	}
	return 0
}

// MethodRequest define parameters to be used for gRPC method request.
type MethodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// field name of the request message.
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// by used to refer to a name or message argument defined in a MessageRule, use `$.` to refer to the message argument.
	// Use CEL (https://github.com/google/cel-spec) to evaluate the expression.
	// Variables are already defined in MessageRule can be used.
	By *string `protobuf:"bytes,2,opt,name=by,proto3,oneof" json:"by,omitempty"`
	// if describes the condition to be assigned to field.
	// The return value must be of type bool.
	// Use CEL (https://github.com/google/cel-spec) to evaluate the expression.
	// Variables are already defined in MessageRule can be used.
	// If the field is a 'oneof' field, it must be specified.
	If *string `protobuf:"bytes,3,opt,name=if,proto3,oneof" json:"if,omitempty"`
}

func (x *MethodRequest) Reset() {
	*x = MethodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodRequest) ProtoMessage() {}

func (x *MethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodRequest.ProtoReflect.Descriptor instead.
func (*MethodRequest) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{23}
}

func (x *MethodRequest) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *MethodRequest) GetBy() string {
	if x != nil && x.By != nil {
		return *x.By
	}
	return ""
}

func (x *MethodRequest) GetIf() string {
	if x != nil && x.If != nil {
		return *x.If
	}
	return ""
}

// MethodResponse define which value of the method response is referenced.
type MethodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name specify the unique name that can be used in a `MessageRule` / `FieldRule` for the same message for a specific field in the response.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// field name in response message.
	Field *string `protobuf:"bytes,2,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// autobind if the value referenced by `field` is a message type,
	// the value of a field with the same name and type as the field name of its own message is automatically assigned to the value of the field in the message.
	// If multiple autobinds are used at the same message,
	// you must explicitly use the `grpc.federation.field` option to do the binding yourself, since duplicate field names cannot be correctly determined as one.
	Autobind *bool `protobuf:"varint,3,opt,name=autobind,proto3,oneof" json:"autobind,omitempty"`
}

func (x *MethodResponse) Reset() {
	*x = MethodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodResponse) ProtoMessage() {}

func (x *MethodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodResponse.ProtoReflect.Descriptor instead.
func (*MethodResponse) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{24}
}

func (x *MethodResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MethodResponse) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *MethodResponse) GetAutobind() bool {
	if x != nil && x.Autobind != nil {
		return *x.Autobind
	}
	return false
}

// Argument define message argument.
type Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the message argument.
	// Use this name to refer to the message argument.
	// For example, if `foo` is specified as the name, it is referenced by `$.foo`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// by used to refer to a name or message argument defined in a MessageRule, use `$.` to refer to the message argument.
	// Use CEL (https://github.com/google/cel-spec) to evaluate the expression.
	// Variables are already defined in MessageRule can be used.
	By *string `protobuf:"bytes,2,opt,name=by,proto3,oneof" json:"by,omitempty"`
	// inline like by, it refers to the specified value and expands all fields beyond it.
	// For this reason, the referenced value must always be of message type.
	Inline *string `protobuf:"bytes,3,opt,name=inline,proto3,oneof" json:"inline,omitempty"`
}

func (x *Argument) Reset() {
	*x = Argument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Argument) ProtoMessage() {}

func (x *Argument) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Argument.ProtoReflect.Descriptor instead.
func (*Argument) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{25}
}

func (x *Argument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Argument) GetBy() string {
	if x != nil && x.By != nil {
		return *x.By
	}
	return ""
}

func (x *Argument) GetInline() string {
	if x != nil && x.Inline != nil {
		return *x.Inline
	}
	return ""
}

// FieldRule define gRPC Federation rules for the field of message.
type FieldRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If custom_resolver is true, the field binding process is to be implemented in Go.
	// If there are any values retrieved by grpc.federation.message option, they are passed as arguments for custom resolver.
	CustomResolver *bool `protobuf:"varint,1,opt,name=custom_resolver,json=customResolver,proto3,oneof" json:"custom_resolver,omitempty"`
	// by used to refer to a name or message argument defined in a MessageRule, use `$.` to refer to the message argument.
	// Use CEL (https://github.com/google/cel-spec) to evaluate the expression.
	// Variables are already defined in MessageRule can be used.
	By *string `protobuf:"bytes,2,opt,name=by,proto3,oneof" json:"by,omitempty"`
	// alias can be used when alias is specified in grpc.federation.message option,
	// and specifies the field name to be referenced among the messages specified in alias of message option.
	// If the specified field has the same type or can be converted automatically, its value is assigned.
	Alias *string `protobuf:"bytes,3,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// use to evaluate any one of fields. this field only available in oneof.
	Oneof *FieldOneof `protobuf:"bytes,4,opt,name=oneof,proto3" json:"oneof,omitempty"`
	// when defining an environment variable, use it for fields where you want to set additional options.
	Env *EnvVarOption `protobuf:"bytes,5,opt,name=env,proto3" json:"env,omitempty"`
}

func (x *FieldRule) Reset() {
	*x = FieldRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRule) ProtoMessage() {}

func (x *FieldRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRule.ProtoReflect.Descriptor instead.
func (*FieldRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{26}
}

func (x *FieldRule) GetCustomResolver() bool {
	if x != nil && x.CustomResolver != nil {
		return *x.CustomResolver
	}
	return false
}

func (x *FieldRule) GetBy() string {
	if x != nil && x.By != nil {
		return *x.By
	}
	return ""
}

func (x *FieldRule) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *FieldRule) GetOneof() *FieldOneof {
	if x != nil {
		return x.Oneof
	}
	return nil
}

func (x *FieldRule) GetEnv() *EnvVarOption {
	if x != nil {
		return x.Env
	}
	return nil
}

// FieldOneof evaluate "messages" or other field only if expr is true and assign to the oneof field.
// This feature only available in oneof.
type FieldOneof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cond specify either `expr` or `default`. Only one `default` can be set per oneof.
	//
	// Types that are assignable to Cond:
	//
	//	*FieldOneof_If
	//	*FieldOneof_Default
	Cond isFieldOneof_Cond `protobuf_oneof:"cond"`
	// def specify variables to be used in current oneof field's scope for field binding.
	Def []*VariableDefinition `protobuf:"bytes,3,rep,name=def,proto3" json:"def,omitempty"`
	// by used to refer to a name or message argument defined in a MessageRule, use `$.` to refer to the message argument.
	// Use CEL (https://github.com/google/cel-spec) to evaluate the expression.
	// Variables are already defined in MessageRule and FieldOneOf can be used.
	By string `protobuf:"bytes,4,opt,name=by,proto3" json:"by,omitempty"`
}

func (x *FieldOneof) Reset() {
	*x = FieldOneof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldOneof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldOneof) ProtoMessage() {}

func (x *FieldOneof) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldOneof.ProtoReflect.Descriptor instead.
func (*FieldOneof) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{27}
}

func (m *FieldOneof) GetCond() isFieldOneof_Cond {
	if m != nil {
		return m.Cond
	}
	return nil
}

func (x *FieldOneof) GetIf() string {
	if x, ok := x.GetCond().(*FieldOneof_If); ok {
		return x.If
	}
	return ""
}

func (x *FieldOneof) GetDefault() bool {
	if x, ok := x.GetCond().(*FieldOneof_Default); ok {
		return x.Default
	}
	return false
}

func (x *FieldOneof) GetDef() []*VariableDefinition {
	if x != nil {
		return x.Def
	}
	return nil
}

func (x *FieldOneof) GetBy() string {
	if x != nil {
		return x.By
	}
	return ""
}

type isFieldOneof_Cond interface {
	isFieldOneof_Cond()
}

type FieldOneof_If struct {
	// if describes the condition to be assigned to field.
	// The return value must be of type bool.
	// Use CEL (https://github.com/google/cel-spec) to evaluate the expression.
	// Variables are already defined in MessageRule can be used.
	If string `protobuf:"bytes,1,opt,name=if,proto3,oneof"`
}

type FieldOneof_Default struct {
	// default used to assign a value when none of the other fields match any of the specified expressions.
	// Only one value can be defined per oneof.
	Default bool `protobuf:"varint,2,opt,name=default,proto3,oneof"`
}

func (*FieldOneof_If) isFieldOneof_Cond() {}

func (*FieldOneof_Default) isFieldOneof_Cond() {}

// CELPlugin define schema of CEL plugin.
type CELPlugin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Export []*CELPluginExport `protobuf:"bytes,1,rep,name=export,proto3" json:"export,omitempty"`
}

func (x *CELPlugin) Reset() {
	*x = CELPlugin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CELPlugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CELPlugin) ProtoMessage() {}

func (x *CELPlugin) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CELPlugin.ProtoReflect.Descriptor instead.
func (*CELPlugin) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{28}
}

func (x *CELPlugin) GetExport() []*CELPluginExport {
	if x != nil {
		return x.Export
	}
	return nil
}

// CELPluginExport describe the schema to be exposed as a CEL plugin.
type CELPluginExport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the plugin name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// desc is the description of plugin.
	// This description is used as documentation at code generation.
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// types describe the message type you want to expose.
	Types []*CELReceiverType `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`
	// functions describe the definition of the function you want to expose.
	Functions []*CELFunction `protobuf:"bytes,4,rep,name=functions,proto3" json:"functions,omitempty"`
	// variables describe the definition of the variable you want to expose.
	Variables []*CELVariable `protobuf:"bytes,5,rep,name=variables,proto3" json:"variables,omitempty"`
}

func (x *CELPluginExport) Reset() {
	*x = CELPluginExport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CELPluginExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CELPluginExport) ProtoMessage() {}

func (x *CELPluginExport) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CELPluginExport.ProtoReflect.Descriptor instead.
func (*CELPluginExport) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{29}
}

func (x *CELPluginExport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CELPluginExport) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CELPluginExport) GetTypes() []*CELReceiverType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *CELPluginExport) GetFunctions() []*CELFunction {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *CELPluginExport) GetVariables() []*CELVariable {
	if x != nil {
		return x.Variables
	}
	return nil
}

// CELFunction represents the CEL function definition.
type CELFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the function name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// desc is the description of function.
	// This description is used as documentation at code generation.
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// args describe the definition of the function argument.
	Args []*CELFunctionArgument `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// return describe the definition of return type of function.
	Return *CELType `protobuf:"bytes,4,opt,name=return,proto3" json:"return,omitempty"`
}

func (x *CELFunction) Reset() {
	*x = CELFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CELFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CELFunction) ProtoMessage() {}

func (x *CELFunction) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CELFunction.ProtoReflect.Descriptor instead.
func (*CELFunction) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{30}
}

func (x *CELFunction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CELFunction) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CELFunction) GetArgs() []*CELFunctionArgument {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CELFunction) GetReturn() *CELType {
	if x != nil {
		return x.Return
	}
	return nil
}

// CELReceiverType represents methods tied to the message.
type CELReceiverType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the message name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// desc is the description of plugin.
	// This description is used as documentation at code generation.
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// methods describe the definition of the method for the message.
	Methods []*CELFunction `protobuf:"bytes,3,rep,name=methods,proto3" json:"methods,omitempty"`
}

func (x *CELReceiverType) Reset() {
	*x = CELReceiverType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CELReceiverType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CELReceiverType) ProtoMessage() {}

func (x *CELReceiverType) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CELReceiverType.ProtoReflect.Descriptor instead.
func (*CELReceiverType) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{31}
}

func (x *CELReceiverType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CELReceiverType) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CELReceiverType) GetMethods() []*CELFunction {
	if x != nil {
		return x.Methods
	}
	return nil
}

// CELFunctionArgument represents the function argument.
type CELFunctionArgument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the argument value name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// desc is the description of plugin.
	// This description is used as documentation at code generation.
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// type is the argument type.
	Type *CELType `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CELFunctionArgument) Reset() {
	*x = CELFunctionArgument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CELFunctionArgument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CELFunctionArgument) ProtoMessage() {}

func (x *CELFunctionArgument) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CELFunctionArgument.ProtoReflect.Descriptor instead.
func (*CELFunctionArgument) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{32}
}

func (x *CELFunctionArgument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CELFunctionArgument) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CELFunctionArgument) GetType() *CELType {
	if x != nil {
		return x.Type
	}
	return nil
}

// CELType represents type information for CEL plugin interface.
type CELType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*CELType_Kind
	//	*CELType_Repeated
	//	*CELType_Map
	//	*CELType_Message
	//	*CELType_Enum
	Type isCELType_Type `protobuf_oneof:"type"`
}

func (x *CELType) Reset() {
	*x = CELType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CELType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CELType) ProtoMessage() {}

func (x *CELType) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CELType.ProtoReflect.Descriptor instead.
func (*CELType) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{33}
}

func (m *CELType) GetType() isCELType_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *CELType) GetKind() TypeKind {
	if x, ok := x.GetType().(*CELType_Kind); ok {
		return x.Kind
	}
	return TypeKind_UNKNOWN
}

func (x *CELType) GetRepeated() *CELType {
	if x, ok := x.GetType().(*CELType_Repeated); ok {
		return x.Repeated
	}
	return nil
}

func (x *CELType) GetMap() *CELMapType {
	if x, ok := x.GetType().(*CELType_Map); ok {
		return x.Map
	}
	return nil
}

func (x *CELType) GetMessage() string {
	if x, ok := x.GetType().(*CELType_Message); ok {
		return x.Message
	}
	return ""
}

func (x *CELType) GetEnum() string {
	if x, ok := x.GetType().(*CELType_Enum); ok {
		return x.Enum
	}
	return ""
}

type isCELType_Type interface {
	isCELType_Type()
}

type CELType_Kind struct {
	// kind is used when the type is a primitive type.
	Kind TypeKind `protobuf:"varint,1,opt,name=kind,proto3,enum=grpc.federation.TypeKind,oneof"`
}

type CELType_Repeated struct {
	// repeated is used when the type is a repeated type.
	Repeated *CELType `protobuf:"bytes,2,opt,name=repeated,proto3,oneof"`
}

type CELType_Map struct {
	// map is used when the type is a map type.
	Map *CELMapType `protobuf:"bytes,3,opt,name=map,proto3,oneof"`
}

type CELType_Message struct {
	// message is a fqdn to the message type.
	Message string `protobuf:"bytes,4,opt,name=message,proto3,oneof"`
}

type CELType_Enum struct {
	// enum is a fqdn to the enum type.
	Enum string `protobuf:"bytes,5,opt,name=enum,proto3,oneof"`
}

func (*CELType_Kind) isCELType_Type() {}

func (*CELType_Repeated) isCELType_Type() {}

func (*CELType_Map) isCELType_Type() {}

func (*CELType_Message) isCELType_Type() {}

func (*CELType_Enum) isCELType_Type() {}

// CELMapType represents map type.
type CELMapType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// key represents map's key type.
	Key *CELType `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// value represents map's value type.
	Value *CELType `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CELMapType) Reset() {
	*x = CELMapType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CELMapType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CELMapType) ProtoMessage() {}

func (x *CELMapType) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CELMapType.ProtoReflect.Descriptor instead.
func (*CELMapType) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{34}
}

func (x *CELMapType) GetKey() *CELType {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CELMapType) GetValue() *CELType {
	if x != nil {
		return x.Value
	}
	return nil
}

// CELVariable represents CEL variable.
type CELVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the variable name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// desc is the description of plugin.
	// This description is used as documentation at code generation.
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	// type is the variable type.
	Type *CELType `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CELVariable) Reset() {
	*x = CELVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CELVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CELVariable) ProtoMessage() {}

func (x *CELVariable) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CELVariable.ProtoReflect.Descriptor instead.
func (*CELVariable) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{35}
}

func (x *CELVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CELVariable) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CELVariable) GetType() *CELType {
	if x != nil {
		return x.Type
	}
	return nil
}

var file_grpc_federation_federation_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*FileRule)(nil),
		Field:         1187,
		Name:          "grpc.federation.file",
		Tag:           "bytes,1187,opt,name=file",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*ServiceRule)(nil),
		Field:         1187,
		Name:          "grpc.federation.service",
		Tag:           "bytes,1187,opt,name=service",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*MethodRule)(nil),
		Field:         1187,
		Name:          "grpc.federation.method",
		Tag:           "bytes,1187,opt,name=method",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*MessageRule)(nil),
		Field:         1187,
		Name:          "grpc.federation.message",
		Tag:           "bytes,1187,opt,name=message",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*FieldRule)(nil),
		Field:         1187,
		Name:          "grpc.federation.field",
		Tag:           "bytes,1187,opt,name=field",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumOptions)(nil),
		ExtensionType: (*EnumRule)(nil),
		Field:         1187,
		Name:          "grpc.federation.enum",
		Tag:           "bytes,1187,opt,name=enum",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*EnumValueRule)(nil),
		Field:         1187,
		Name:          "grpc.federation.enum_value",
		Tag:           "bytes,1187,opt,name=enum_value",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.OneofOptions)(nil),
		ExtensionType: (*OneofRule)(nil),
		Field:         1187,
		Name:          "grpc.federation.oneof",
		Tag:           "bytes,1187,opt,name=oneof",
		Filename:      "grpc/federation/federation.proto",
	},
}

// Extension fields to descriptorpb.FileOptions.
var (
	// optional grpc.federation.FileRule file = 1187;
	E_File = &file_grpc_federation_federation_proto_extTypes[0]
)

// Extension fields to descriptorpb.ServiceOptions.
var (
	// optional grpc.federation.ServiceRule service = 1187;
	E_Service = &file_grpc_federation_federation_proto_extTypes[1]
)

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional grpc.federation.MethodRule method = 1187;
	E_Method = &file_grpc_federation_federation_proto_extTypes[2]
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional grpc.federation.MessageRule message = 1187;
	E_Message = &file_grpc_federation_federation_proto_extTypes[3]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional grpc.federation.FieldRule field = 1187;
	E_Field = &file_grpc_federation_federation_proto_extTypes[4]
)

// Extension fields to descriptorpb.EnumOptions.
var (
	// optional grpc.federation.EnumRule enum = 1187;
	E_Enum = &file_grpc_federation_federation_proto_extTypes[5]
)

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// optional grpc.federation.EnumValueRule enum_value = 1187;
	E_EnumValue = &file_grpc_federation_federation_proto_extTypes[6]
)

// Extension fields to descriptorpb.OneofOptions.
var (
	// optional grpc.federation.OneofRule oneof = 1187;
	E_Oneof = &file_grpc_federation_federation_proto_extTypes[7]
)

var File_grpc_federation_federation_proto protoreflect.FileDescriptor

var file_grpc_federation_federation_proto_rawDesc = []byte{
	0x0a, 0x20, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70,
	0x63, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x72,
	0x70, 0x63, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x20, 0x0a, 0x08, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x50, 0x0a,
	0x0d, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22,
	0x0b, 0x0a, 0x09, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x35, 0x0a, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x65,
	0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x22, 0x4a, 0x0a, 0x03, 0x45, 0x6e, 0x76, 0x12, 0x29, 0x0a, 0x03, 0x76, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72,
	0x52, 0x03, 0x76, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x91, 0x01, 0x0a, 0x06, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45,
	0x6e, 0x76, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x06,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45,
	0x6e, 0x76, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xab, 0x01, 0x0a, 0x07, 0x45, 0x6e, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x4d, 0x61, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x68, 0x0a, 0x0a, 0x45, 0x6e, 0x76, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45,
	0x6e, 0x76, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x0c,
	0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x09,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x02, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x03, 0x52, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x64, 0x22, 0x37, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x64, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x65,
	0x66, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x22, 0xf6, 0x02, 0x0a, 0x12, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x02, 0x69, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x03, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x62, 0x69, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x10, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x62,
	0x79, 0x12, 0x2c, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12,
	0x38, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x61, 0x6c,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x41, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x48,
	0x00, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x69, 0x66, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x62, 0x69,
	0x6e, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x70, 0x72, 0x12, 0x35,
	0x0a, 0x08, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x62, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x30, 0x0a, 0x08, 0x49, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x22, 0x50, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xfc, 0x01,
	0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x05, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x01, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x52, 0x50, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x22, 0xe0, 0x02, 0x0a,
	0x09, 0x47, 0x52, 0x50, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x03, 0x64, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x65,
	0x66, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x69, 0x66, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47,
	0x52, 0x50, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x06, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x61,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x11, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x66,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xea, 0x05, 0x0a, 0x0f, 0x47, 0x52, 0x50, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x66, 0x12, 0x35, 0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x65, 0x66, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34,
	0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x13, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x62, 0x61, 0x64, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x62, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x04, 0x68,
	0x65, 0x6c, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x04, 0x68, 0x65, 0x6c,
	0x70, 0x12, 0x49, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x64, 0x0a, 0x0e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x52, 0x50, 0x43, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x79, 0x0a,
	0x13, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xd1, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x01, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x02, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x62, 0x79, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02, 0x69, 0x66, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x62, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x66, 0x22, 0x85, 0x01, 0x0a, 0x0e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x62, 0x69, 0x6e, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x62,
	0x69, 0x6e, 0x64, 0x22, 0x62, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x62, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x62, 0x79, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x02, 0x62, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x52,
	0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x2f, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x62, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x89, 0x01, 0x0a,
	0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x10, 0x0a, 0x02, 0x69,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x66, 0x12, 0x1a, 0x0a,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x64, 0x65, 0x66,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x65, 0x66,
	0x12, 0x0e, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x79,
	0x42, 0x06, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x45, 0x0a, 0x09, 0x43, 0x45, 0x4c, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0xe9, 0x01, 0x0a, 0x0f, 0x43, 0x45, 0x4c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x36, 0x0a, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x45, 0x4c,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x3a, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x0b,
	0x43, 0x45, 0x4c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x38, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x30, 0x0a,
	0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x45, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x22,
	0x71, 0x0a, 0x0f, 0x43, 0x45, 0x4c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x45,
	0x4c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x22, 0x6b, 0x0a, 0x13, 0x43, 0x45, 0x4c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xdd, 0x01, 0x0a, 0x07, 0x43, 0x45, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x08,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x45, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00,
	0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x1a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x68, 0x0a, 0x0a, 0x43, 0x45, 0x4c, 0x4d, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x45, 0x4c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x63, 0x0a, 0x0b, 0x43, 0x45, 0x4c,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x45, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x5e,
	0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54,
	0x36, 0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x05,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x3a, 0x4c,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa3, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x58, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa3, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x54, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xa3, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x58, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa3, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x50, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa3,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x3a, 0x4c, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d,
	0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa3,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x3a, 0x61, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa3, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09,
	0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x50, 0x0a, 0x05, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xa3, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x6e, 0x65, 0x6f, 0x66,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42, 0xc2, 0x01, 0x0a, 0x13,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x61, 0x72, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xa2, 0x02, 0x03, 0x47, 0x46, 0x58, 0xaa, 0x02, 0x0f, 0x47, 0x72,
	0x70, 0x63, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0x02, 0x0f,
	0x47, 0x72, 0x70, 0x63, 0x5c, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe2,
	0x02, 0x1b, 0x47, 0x72, 0x70, 0x63, 0x5c, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10,
	0x47, 0x72, 0x70, 0x63, 0x3a, 0x3a, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_federation_federation_proto_rawDescOnce sync.Once
	file_grpc_federation_federation_proto_rawDescData = file_grpc_federation_federation_proto_rawDesc
)

func file_grpc_federation_federation_proto_rawDescGZIP() []byte {
	file_grpc_federation_federation_proto_rawDescOnce.Do(func() {
		file_grpc_federation_federation_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_federation_federation_proto_rawDescData)
	})
	return file_grpc_federation_federation_proto_rawDescData
}

var file_grpc_federation_federation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_grpc_federation_federation_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_grpc_federation_federation_proto_goTypes = []interface{}{
	(TypeKind)(0),                          // 0: grpc.federation.TypeKind
	(*FileRule)(nil),                       // 1: grpc.federation.FileRule
	(*EnumRule)(nil),                       // 2: grpc.federation.EnumRule
	(*EnumValueRule)(nil),                  // 3: grpc.federation.EnumValueRule
	(*OneofRule)(nil),                      // 4: grpc.federation.OneofRule
	(*ServiceRule)(nil),                    // 5: grpc.federation.ServiceRule
	(*Env)(nil),                            // 6: grpc.federation.Env
	(*EnvVar)(nil),                         // 7: grpc.federation.EnvVar
	(*EnvType)(nil),                        // 8: grpc.federation.EnvType
	(*EnvMapType)(nil),                     // 9: grpc.federation.EnvMapType
	(*EnvVarOption)(nil),                   // 10: grpc.federation.EnvVarOption
	(*MethodRule)(nil),                     // 11: grpc.federation.MethodRule
	(*MessageRule)(nil),                    // 12: grpc.federation.MessageRule
	(*VariableDefinition)(nil),             // 13: grpc.federation.VariableDefinition
	(*MapExpr)(nil),                        // 14: grpc.federation.MapExpr
	(*Iterator)(nil),                       // 15: grpc.federation.Iterator
	(*MessageExpr)(nil),                    // 16: grpc.federation.MessageExpr
	(*CallExpr)(nil),                       // 17: grpc.federation.CallExpr
	(*GRPCError)(nil),                      // 18: grpc.federation.GRPCError
	(*GRPCErrorDetail)(nil),                // 19: grpc.federation.GRPCErrorDetail
	(*ValidationExpr)(nil),                 // 20: grpc.federation.ValidationExpr
	(*RetryPolicy)(nil),                    // 21: grpc.federation.RetryPolicy
	(*RetryPolicyConstant)(nil),            // 22: grpc.federation.RetryPolicyConstant
	(*RetryPolicyExponential)(nil),         // 23: grpc.federation.RetryPolicyExponential
	(*MethodRequest)(nil),                  // 24: grpc.federation.MethodRequest
	(*MethodResponse)(nil),                 // 25: grpc.federation.MethodResponse
	(*Argument)(nil),                       // 26: grpc.federation.Argument
	(*FieldRule)(nil),                      // 27: grpc.federation.FieldRule
	(*FieldOneof)(nil),                     // 28: grpc.federation.FieldOneof
	(*CELPlugin)(nil),                      // 29: grpc.federation.CELPlugin
	(*CELPluginExport)(nil),                // 30: grpc.federation.CELPluginExport
	(*CELFunction)(nil),                    // 31: grpc.federation.CELFunction
	(*CELReceiverType)(nil),                // 32: grpc.federation.CELReceiverType
	(*CELFunctionArgument)(nil),            // 33: grpc.federation.CELFunctionArgument
	(*CELType)(nil),                        // 34: grpc.federation.CELType
	(*CELMapType)(nil),                     // 35: grpc.federation.CELMapType
	(*CELVariable)(nil),                    // 36: grpc.federation.CELVariable
	(code.Code)(0),                         // 37: google.rpc.Code
	(*errdetails.ErrorInfo)(nil),           // 38: google.rpc.ErrorInfo
	(*errdetails.RetryInfo)(nil),           // 39: google.rpc.RetryInfo
	(*errdetails.DebugInfo)(nil),           // 40: google.rpc.DebugInfo
	(*errdetails.QuotaFailure)(nil),        // 41: google.rpc.QuotaFailure
	(*errdetails.PreconditionFailure)(nil), // 42: google.rpc.PreconditionFailure
	(*errdetails.BadRequest)(nil),          // 43: google.rpc.BadRequest
	(*errdetails.RequestInfo)(nil),         // 44: google.rpc.RequestInfo
	(*errdetails.ResourceInfo)(nil),        // 45: google.rpc.ResourceInfo
	(*errdetails.Help)(nil),                // 46: google.rpc.Help
	(*errdetails.LocalizedMessage)(nil),    // 47: google.rpc.LocalizedMessage
	(*descriptorpb.FileOptions)(nil),       // 48: google.protobuf.FileOptions
	(*descriptorpb.ServiceOptions)(nil),    // 49: google.protobuf.ServiceOptions
	(*descriptorpb.MethodOptions)(nil),     // 50: google.protobuf.MethodOptions
	(*descriptorpb.MessageOptions)(nil),    // 51: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),      // 52: google.protobuf.FieldOptions
	(*descriptorpb.EnumOptions)(nil),       // 53: google.protobuf.EnumOptions
	(*descriptorpb.EnumValueOptions)(nil),  // 54: google.protobuf.EnumValueOptions
	(*descriptorpb.OneofOptions)(nil),      // 55: google.protobuf.OneofOptions
}
var file_grpc_federation_federation_proto_depIdxs = []int32{
	29, // 0: grpc.federation.FileRule.plugin:type_name -> grpc.federation.CELPlugin
	6,  // 1: grpc.federation.ServiceRule.env:type_name -> grpc.federation.Env
	7,  // 2: grpc.federation.Env.var:type_name -> grpc.federation.EnvVar
	8,  // 3: grpc.federation.EnvVar.type:type_name -> grpc.federation.EnvType
	10, // 4: grpc.federation.EnvVar.option:type_name -> grpc.federation.EnvVarOption
	0,  // 5: grpc.federation.EnvType.kind:type_name -> grpc.federation.TypeKind
	8,  // 6: grpc.federation.EnvType.repeated:type_name -> grpc.federation.EnvType
	9,  // 7: grpc.federation.EnvType.map:type_name -> grpc.federation.EnvMapType
	8,  // 8: grpc.federation.EnvMapType.key:type_name -> grpc.federation.EnvType
	8,  // 9: grpc.federation.EnvMapType.value:type_name -> grpc.federation.EnvType
	13, // 10: grpc.federation.MessageRule.def:type_name -> grpc.federation.VariableDefinition
	14, // 11: grpc.federation.VariableDefinition.map:type_name -> grpc.federation.MapExpr
	16, // 12: grpc.federation.VariableDefinition.message:type_name -> grpc.federation.MessageExpr
	17, // 13: grpc.federation.VariableDefinition.call:type_name -> grpc.federation.CallExpr
	20, // 14: grpc.federation.VariableDefinition.validation:type_name -> grpc.federation.ValidationExpr
	15, // 15: grpc.federation.MapExpr.iterator:type_name -> grpc.federation.Iterator
	16, // 16: grpc.federation.MapExpr.message:type_name -> grpc.federation.MessageExpr
	26, // 17: grpc.federation.MessageExpr.args:type_name -> grpc.federation.Argument
	24, // 18: grpc.federation.CallExpr.request:type_name -> grpc.federation.MethodRequest
	21, // 19: grpc.federation.CallExpr.retry:type_name -> grpc.federation.RetryPolicy
	18, // 20: grpc.federation.CallExpr.error:type_name -> grpc.federation.GRPCError
	13, // 21: grpc.federation.GRPCError.def:type_name -> grpc.federation.VariableDefinition
	37, // 22: grpc.federation.GRPCError.code:type_name -> google.rpc.Code
	19, // 23: grpc.federation.GRPCError.details:type_name -> grpc.federation.GRPCErrorDetail
	13, // 24: grpc.federation.GRPCErrorDetail.def:type_name -> grpc.federation.VariableDefinition
	16, // 25: grpc.federation.GRPCErrorDetail.message:type_name -> grpc.federation.MessageExpr
	38, // 26: grpc.federation.GRPCErrorDetail.error_info:type_name -> google.rpc.ErrorInfo
	39, // 27: grpc.federation.GRPCErrorDetail.retry_info:type_name -> google.rpc.RetryInfo
	40, // 28: grpc.federation.GRPCErrorDetail.debug_info:type_name -> google.rpc.DebugInfo
	41, // 29: grpc.federation.GRPCErrorDetail.quota_failure:type_name -> google.rpc.QuotaFailure
	42, // 30: grpc.federation.GRPCErrorDetail.precondition_failure:type_name -> google.rpc.PreconditionFailure
	43, // 31: grpc.federation.GRPCErrorDetail.bad_request:type_name -> google.rpc.BadRequest
	44, // 32: grpc.federation.GRPCErrorDetail.request_info:type_name -> google.rpc.RequestInfo
	45, // 33: grpc.federation.GRPCErrorDetail.resource_info:type_name -> google.rpc.ResourceInfo
	46, // 34: grpc.federation.GRPCErrorDetail.help:type_name -> google.rpc.Help
	47, // 35: grpc.federation.GRPCErrorDetail.localized_message:type_name -> google.rpc.LocalizedMessage
	18, // 36: grpc.federation.ValidationExpr.error:type_name -> grpc.federation.GRPCError
	22, // 37: grpc.federation.RetryPolicy.constant:type_name -> grpc.federation.RetryPolicyConstant
	23, // 38: grpc.federation.RetryPolicy.exponential:type_name -> grpc.federation.RetryPolicyExponential
	28, // 39: grpc.federation.FieldRule.oneof:type_name -> grpc.federation.FieldOneof
	10, // 40: grpc.federation.FieldRule.env:type_name -> grpc.federation.EnvVarOption
	13, // 41: grpc.federation.FieldOneof.def:type_name -> grpc.federation.VariableDefinition
	30, // 42: grpc.federation.CELPlugin.export:type_name -> grpc.federation.CELPluginExport
	32, // 43: grpc.federation.CELPluginExport.types:type_name -> grpc.federation.CELReceiverType
	31, // 44: grpc.federation.CELPluginExport.functions:type_name -> grpc.federation.CELFunction
	36, // 45: grpc.federation.CELPluginExport.variables:type_name -> grpc.federation.CELVariable
	33, // 46: grpc.federation.CELFunction.args:type_name -> grpc.federation.CELFunctionArgument
	34, // 47: grpc.federation.CELFunction.return:type_name -> grpc.federation.CELType
	31, // 48: grpc.federation.CELReceiverType.methods:type_name -> grpc.federation.CELFunction
	34, // 49: grpc.federation.CELFunctionArgument.type:type_name -> grpc.federation.CELType
	0,  // 50: grpc.federation.CELType.kind:type_name -> grpc.federation.TypeKind
	34, // 51: grpc.federation.CELType.repeated:type_name -> grpc.federation.CELType
	35, // 52: grpc.federation.CELType.map:type_name -> grpc.federation.CELMapType
	34, // 53: grpc.federation.CELMapType.key:type_name -> grpc.federation.CELType
	34, // 54: grpc.federation.CELMapType.value:type_name -> grpc.federation.CELType
	34, // 55: grpc.federation.CELVariable.type:type_name -> grpc.federation.CELType
	48, // 56: grpc.federation.file:extendee -> google.protobuf.FileOptions
	49, // 57: grpc.federation.service:extendee -> google.protobuf.ServiceOptions
	50, // 58: grpc.federation.method:extendee -> google.protobuf.MethodOptions
	51, // 59: grpc.federation.message:extendee -> google.protobuf.MessageOptions
	52, // 60: grpc.federation.field:extendee -> google.protobuf.FieldOptions
	53, // 61: grpc.federation.enum:extendee -> google.protobuf.EnumOptions
	54, // 62: grpc.federation.enum_value:extendee -> google.protobuf.EnumValueOptions
	55, // 63: grpc.federation.oneof:extendee -> google.protobuf.OneofOptions
	1,  // 64: grpc.federation.file:type_name -> grpc.federation.FileRule
	5,  // 65: grpc.federation.service:type_name -> grpc.federation.ServiceRule
	11, // 66: grpc.federation.method:type_name -> grpc.federation.MethodRule
	12, // 67: grpc.federation.message:type_name -> grpc.federation.MessageRule
	27, // 68: grpc.federation.field:type_name -> grpc.federation.FieldRule
	2,  // 69: grpc.federation.enum:type_name -> grpc.federation.EnumRule
	3,  // 70: grpc.federation.enum_value:type_name -> grpc.federation.EnumValueRule
	4,  // 71: grpc.federation.oneof:type_name -> grpc.federation.OneofRule
	72, // [72:72] is the sub-list for method output_type
	72, // [72:72] is the sub-list for method input_type
	64, // [64:72] is the sub-list for extension type_name
	56, // [56:64] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_grpc_federation_federation_proto_init() }
func file_grpc_federation_federation_proto_init() {
	if File_grpc_federation_federation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_federation_federation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumValueRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneofRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Env); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvMapType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVarOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Iterator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GRPCError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GRPCErrorDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicyConstant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicyExponential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Argument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldOneof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CELPlugin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CELPluginExport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CELFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CELReceiverType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CELFunctionArgument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CELType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CELMapType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CELVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_grpc_federation_federation_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*EnvType_Kind)(nil),
		(*EnvType_Repeated)(nil),
		(*EnvType_Map)(nil),
	}
	file_grpc_federation_federation_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*VariableDefinition_By)(nil),
		(*VariableDefinition_Map)(nil),
		(*VariableDefinition_Message)(nil),
		(*VariableDefinition_Call)(nil),
		(*VariableDefinition_Validation)(nil),
	}
	file_grpc_federation_federation_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*MapExpr_By)(nil),
		(*MapExpr_Message)(nil),
	}
	file_grpc_federation_federation_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*RetryPolicy_Constant)(nil),
		(*RetryPolicy_Exponential)(nil),
	}
	file_grpc_federation_federation_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*FieldOneof_If)(nil),
		(*FieldOneof_Default)(nil),
	}
	file_grpc_federation_federation_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*CELType_Kind)(nil),
		(*CELType_Repeated)(nil),
		(*CELType_Map)(nil),
		(*CELType_Message)(nil),
		(*CELType_Enum)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_federation_federation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   36,
			NumExtensions: 8,
			NumServices:   0,
		},
		GoTypes:           file_grpc_federation_federation_proto_goTypes,
		DependencyIndexes: file_grpc_federation_federation_proto_depIdxs,
		EnumInfos:         file_grpc_federation_federation_proto_enumTypes,
		MessageInfos:      file_grpc_federation_federation_proto_msgTypes,
		ExtensionInfos:    file_grpc_federation_federation_proto_extTypes,
	}.Build()
	File_grpc_federation_federation_proto = out.File
	file_grpc_federation_federation_proto_rawDesc = nil
	file_grpc_federation_federation_proto_goTypes = nil
	file_grpc_federation_federation_proto_depIdxs = nil
}
