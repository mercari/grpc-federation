// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
// versions:
//
//	protoc-gen-grpc-federation: dev
//
// source: federation/federation.proto
package federation

import (
	"context"
	"io"
	"log/slog"
	"reflect"

	grpcfed "github.com/mercari/grpc-federation/grpc/federation"
	grpcfedcel "github.com/mercari/grpc-federation/grpc/federation/cel"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"

	user "example/user"
)

var (
	_ = reflect.Invalid // to avoid "imported and not used error"
)

// Org_Federation_CastOneofArgument is argument for "org.federation.CastOneof" message.
type FederationService_Org_Federation_CastOneofArgument struct {
}

// Org_Federation_GetNoValueResponseArgument is argument for "org.federation.GetNoValueResponse" message.
type FederationService_Org_Federation_GetNoValueResponseArgument struct {
	NoValueSel *NoValueSelection
}

// Org_Federation_GetResponseArgument is argument for "org.federation.GetResponse" message.
type FederationService_Org_Federation_GetResponseArgument struct {
	CastOneof *CastOneof
	MsgSel    *MessageSelection
	NestedMsg *NestedMessageSelection_Nest
	Sel       *UserSelection
}

// Org_Federation_MessageSelectionArgument is argument for "org.federation.MessageSelection" message.
type FederationService_Org_Federation_MessageSelectionArgument struct {
}

// Org_Federation_NestedMessageSelection_NestArgument is argument for "org.federation.Nest" message.
type FederationService_Org_Federation_NestedMessageSelection_NestArgument struct {
}

// Org_Federation_NoValueSelectionArgument is argument for "org.federation.NoValueSelection" message.
type FederationService_Org_Federation_NoValueSelectionArgument struct {
}

// Org_Federation_UserArgument is argument for "org.federation.User" message.
type FederationService_Org_Federation_UserArgument struct {
	Bar    string
	Foo    int64
	UserId string
}

// Org_Federation_UserSelectionArgument is argument for "org.federation.UserSelection" message.
type FederationService_Org_Federation_UserSelectionArgument struct {
	Ua    *User
	Ub    *User
	Uc    *User
	Value string
}

// FederationServiceConfig configuration required to initialize the service that use GRPC Federation.
type FederationServiceConfig struct {
	// Client provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
	// If this interface is not provided, an error is returned during initialization.
	Client FederationServiceClientFactory // required
	// ErrorHandler Federation Service often needs to convert errors received from downstream services.
	// If an error occurs during method execution in the Federation Service, this error handler is called and the returned error is treated as a final error.
	ErrorHandler grpcfed.ErrorHandler
	// Logger sets the logger used to output Debug/Info/Error information.
	Logger *slog.Logger
}

// FederationServiceClientFactory provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
type FederationServiceClientFactory interface {
	// User_UserServiceClient create a gRPC Client to be used to call methods in user.UserService.
	User_UserServiceClient(FederationServiceClientConfig) (user.UserServiceClient, error)
}

// FederationServiceClientConfig helper to create gRPC client.
// Hints for creating a gRPC Client.
type FederationServiceClientConfig struct {
	// Service FQDN ( `<package-name>.<service-name>` ) of the service on Protocol Buffers.
	Service string
}

// FederationServiceDependentClientSet has a gRPC client for all services on which the federation service depends.
// This is provided as an argument when implementing the custom resolver.
type FederationServiceDependentClientSet struct {
	User_UserServiceClient user.UserServiceClient
}

// FederationServiceResolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
type FederationServiceResolver interface {
}

// FederationServiceCELPluginWasmConfig type alias for grpcfedcel.WasmConfig.
type FederationServiceCELPluginWasmConfig = grpcfedcel.WasmConfig

// FederationServiceCELPluginConfig hints for loading a WebAssembly based plugin.
type FederationServiceCELPluginConfig struct {
}

// FederationServiceUnimplementedResolver a structure implemented to satisfy the Resolver interface.
// An Unimplemented error is always returned.
// This is intended for use when there are many Resolver interfaces that do not need to be implemented,
// by embedding them in a resolver structure that you have created.
type FederationServiceUnimplementedResolver struct{}

const (
	FederationService_DependentMethod_User_UserService_GetUser = "/user.UserService/GetUser"
)

// FederationService represents Federation Service.
type FederationService struct {
	UnimplementedFederationServiceServer
	cfg                FederationServiceConfig
	logger             *slog.Logger
	errorHandler       grpcfed.ErrorHandler
	celCacheMap        *grpcfed.CELCacheMap
	tracer             trace.Tracer
	celTypeHelper      *grpcfed.CELTypeHelper
	celEnvOpts         []grpcfed.CELEnvOption
	celPluginInstances []*grpcfedcel.CELPluginInstance
	client             *FederationServiceDependentClientSet
}

// NewFederationService creates FederationService instance by FederationServiceConfig.
func NewFederationService(cfg FederationServiceConfig) (*FederationService, error) {
	if cfg.Client == nil {
		return nil, grpcfed.ErrClientConfig
	}
	User_UserServiceClient, err := cfg.Client.User_UserServiceClient(FederationServiceClientConfig{
		Service: "user.UserService",
	})
	if err != nil {
		return nil, err
	}
	logger := cfg.Logger
	if logger == nil {
		logger = slog.New(slog.NewJSONHandler(io.Discard, nil))
	}
	errorHandler := cfg.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(ctx context.Context, methodName string, err error) error { return err }
	}
	celTypeHelperFieldMap := grpcfed.CELTypeHelperFieldMap{
		"grpc.federation.private.CastOneofArgument":                   {},
		"grpc.federation.private.GetNoValueResponseArgument":          {},
		"grpc.federation.private.GetResponseArgument":                 {},
		"grpc.federation.private.MessageSelectionArgument":            {},
		"grpc.federation.private.NestedMessageSelection_NestArgument": {},
		"grpc.federation.private.NoValueSelectionArgument":            {},
		"grpc.federation.private.UserArgument": {
			"user_id": grpcfed.NewCELFieldType(grpcfed.CELStringType, "UserId"),
			"foo":     grpcfed.NewCELFieldType(grpcfed.CELIntType, "Foo"),
			"bar":     grpcfed.NewCELFieldType(grpcfed.CELStringType, "Bar"),
		},
		"grpc.federation.private.UserSelectionArgument": {
			"value": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Value"),
		},
		"org.federation.MessageSelection": {
			"message": grpcfed.NewOneofSelectorFieldType(
				grpcfed.CELStringType, "Message",
				[]reflect.Type{reflect.TypeOf((*MessageSelection_MsgA)(nil)), reflect.TypeOf((*MessageSelection_MsgB)(nil)), reflect.TypeOf((*MessageSelection_MsgC)(nil))},
				[]string{"GetMsgA", "GetMsgB", "GetMsgC"},
				reflect.Zero(reflect.TypeOf("")),
			),
		},
		"org.federation.NoValueSelection": {
			"no_value": grpcfed.NewOneofSelectorFieldType(
				grpcfed.NewCELObjectType("org.federation.M"), "NoValue",
				[]reflect.Type{reflect.TypeOf((*NoValueSelection_MA)(nil)), reflect.TypeOf((*NoValueSelection_MB)(nil))},
				[]string{"GetMA", "GetMB"},
				reflect.Zero(reflect.TypeOf((*M)(nil))),
			),
		},
		"org.federation.UserSelection": {
			"user": grpcfed.NewOneofSelectorFieldType(
				grpcfed.NewCELObjectType("org.federation.User"), "User",
				[]reflect.Type{reflect.TypeOf((*UserSelection_UserA)(nil)), reflect.TypeOf((*UserSelection_UserB)(nil)), reflect.TypeOf((*UserSelection_UserC)(nil))},
				[]string{"GetUserA", "GetUserB", "GetUserC"},
				reflect.Zero(reflect.TypeOf((*User)(nil))),
			),
		},
	}
	celTypeHelper := grpcfed.NewCELTypeHelper("org.federation", celTypeHelperFieldMap)
	var celEnvOpts []grpcfed.CELEnvOption
	celEnvOpts = append(celEnvOpts, grpcfed.NewDefaultEnvOptions(celTypeHelper)...)
	celEnvOpts = append(celEnvOpts, grpcfed.EnumAccessorOptions("org.federation.UserType", UserType_value, UserType_name)...)
	celEnvOpts = append(celEnvOpts, grpcfed.EnumAccessorOptions("user.UserType", user.UserType_value, user.UserType_name)...)
	svc := &FederationService{
		cfg:           cfg,
		logger:        logger,
		errorHandler:  errorHandler,
		celEnvOpts:    celEnvOpts,
		celTypeHelper: celTypeHelper,
		celCacheMap:   grpcfed.NewCELCacheMap(),
		tracer:        otel.Tracer("org.federation.FederationService"),
		client: &FederationServiceDependentClientSet{
			User_UserServiceClient: User_UserServiceClient,
		},
	}
	return svc, nil
}

// CleanupFederationService cleanup all resources to prevent goroutine leaks.
func CleanupFederationService(ctx context.Context, svc *FederationService) {
	svc.cleanup(ctx)
}

func (s *FederationService) cleanup(ctx context.Context) {
	for _, instance := range s.celPluginInstances {
		instance.Close(ctx)
	}
}

// Get implements "org.federation.FederationService/Get" method.
func (s *FederationService) Get(ctx context.Context, req *GetRequest) (res *GetResponse, e error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.FederationService/Get")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, grpcfed.StackTrace())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Org_Federation_GetResponse(ctx, &FederationService_Org_Federation_GetResponseArgument{})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// GetNoValue implements "org.federation.FederationService/GetNoValue" method.
func (s *FederationService) GetNoValue(ctx context.Context, req *GetNoValueRequest) (res *GetNoValueResponse, e error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.FederationService/GetNoValue")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, grpcfed.StackTrace())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Org_Federation_GetNoValueResponse(ctx, &FederationService_Org_Federation_GetNoValueResponseArgument{})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// resolve_Org_Federation_CastOneof resolve "org.federation.CastOneof" message.
func (s *FederationService) resolve_Org_Federation_CastOneof(ctx context.Context, req *FederationService_Org_Federation_CastOneofArgument) (*CastOneof, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.CastOneof")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.CastOneof", slog.Any("message_args", s.logvalue_Org_Federation_CastOneofArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.CastOneofArgument", req)}

	// create a message value to be returned.
	ret := &CastOneof{}

	// field binding section.
	oneof_Num, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
		Value:      value,
		Expr:       `false`,
		OutType:    reflect.TypeOf(true),
		CacheIndex: 1,
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	oneof_User, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
		Value:      value,
		Expr:       `false`,
		OutType:    reflect.TypeOf(true),
		CacheIndex: 2,
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	oneof_Type, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
		Value:      value,
		Expr:       `true`,
		OutType:    reflect.TypeOf(true),
		CacheIndex: 3,
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	switch {
	case oneof_Num.(bool):

		if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[uint64]{
			Value:      value,
			Expr:       `uint(1)`,
			CacheIndex: 4,
			Setter: func(v uint64) error {
				castOneofValue, err := s.cast_uint64__to__Org_Federation_CastOneof_Num(v)
				if err != nil {
					return err
				}
				ret.CastOneof = castOneofValue
				return nil
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	case oneof_User.(bool):

		if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*user.User]{
			Value:      value,
			Expr:       `user.User{id: 'foo'}`,
			CacheIndex: 5,
			Setter: func(v *user.User) error {
				castOneofValue, err := s.cast_User_User__to__Org_Federation_CastOneof_User(v)
				if err != nil {
					return err
				}
				ret.CastOneof = castOneofValue
				return nil
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	case oneof_Type.(bool):

		if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[user.UserType]{
			Value:      value,
			Expr:       `user.UserType.value('USER_TYPE_ANONYMOUS')`,
			CacheIndex: 6,
			Setter: func(v user.UserType) error {
				castOneofValue, err := s.cast_User_UserType__to__Org_Federation_CastOneof_Type(v)
				if err != nil {
					return err
				}
				ret.CastOneof = castOneofValue
				return nil
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.CastOneof", slog.Any("org.federation.CastOneof", s.logvalue_Org_Federation_CastOneof(ret)))
	return ret, nil
}

// resolve_Org_Federation_GetNoValueResponse resolve "org.federation.GetNoValueResponse" message.
func (s *FederationService) resolve_Org_Federation_GetNoValueResponse(ctx context.Context, req *FederationService_Org_Federation_GetNoValueResponseArgument) (*GetNoValueResponse, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.GetNoValueResponse")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.GetNoValueResponse", slog.Any("message_args", s.logvalue_Org_Federation_GetNoValueResponseArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			NoValueSel *NoValueSelection
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.GetNoValueResponseArgument", req)}
	/*
		def {
		  name: "no_value_sel"
		  message {
		    name: "NoValueSelection"
		  }
		}
	*/
	def_no_value_sel := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*NoValueSelection, *localValueType]{
			Name: `no_value_sel`,
			Type: grpcfed.CELObjectType("org.federation.NoValueSelection"),
			Setter: func(value *localValueType, v *NoValueSelection) error {
				value.vars.NoValueSel = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &FederationService_Org_Federation_NoValueSelectionArgument{}
				ret, err := s.resolve_Org_Federation_NoValueSelection(ctx, args)
				if err != nil {
					return nil, err
				}
				return ret, nil
			},
		})
	}

	if err := def_no_value_sel(ctx); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.NoValueSel = value.vars.NoValueSel

	// create a message value to be returned.
	ret := &GetNoValueResponse{}

	// field binding section.
	// (grpc.federation.field).by = "no_value_sel.no_value"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*M]{
		Value:      value,
		Expr:       `no_value_sel.no_value`,
		CacheIndex: 7,
		Setter: func(v *M) error {
			ret.NoValue = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.GetNoValueResponse", slog.Any("org.federation.GetNoValueResponse", s.logvalue_Org_Federation_GetNoValueResponse(ret)))
	return ret, nil
}

// resolve_Org_Federation_GetResponse resolve "org.federation.GetResponse" message.
func (s *FederationService) resolve_Org_Federation_GetResponse(ctx context.Context, req *FederationService_Org_Federation_GetResponseArgument) (*GetResponse, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.GetResponse")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.GetResponse", slog.Any("message_args", s.logvalue_Org_Federation_GetResponseArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			CastOneof *CastOneof
			MsgSel    *MessageSelection
			NestedMsg *NestedMessageSelection_Nest
			Sel       *UserSelection
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.GetResponseArgument", req)}
	/*
		def {
		  name: "sel"
		  message {
		    name: "UserSelection"
		    args { name: "value", by: "'foo'" }
		  }
		}
	*/
	def_sel := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*UserSelection, *localValueType]{
			Name: `sel`,
			Type: grpcfed.CELObjectType("org.federation.UserSelection"),
			Setter: func(value *localValueType, v *UserSelection) error {
				value.vars.Sel = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &FederationService_Org_Federation_UserSelectionArgument{}
				// { name: "value", by: "'foo'" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:      value,
					Expr:       `'foo'`,
					CacheIndex: 8,
					Setter: func(v string) error {
						args.Value = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				ret, err := s.resolve_Org_Federation_UserSelection(ctx, args)
				if err != nil {
					return nil, err
				}
				return ret, nil
			},
		})
	}

	/*
		def {
		  name: "msg_sel"
		  message {
		    name: "MessageSelection"
		  }
		}
	*/
	def_msg_sel := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*MessageSelection, *localValueType]{
			Name: `msg_sel`,
			Type: grpcfed.CELObjectType("org.federation.MessageSelection"),
			Setter: func(value *localValueType, v *MessageSelection) error {
				value.vars.MsgSel = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &FederationService_Org_Federation_MessageSelectionArgument{}
				ret, err := s.resolve_Org_Federation_MessageSelection(ctx, args)
				if err != nil {
					return nil, err
				}
				return ret, nil
			},
		})
	}

	/*
		def {
		  name: "nested_msg"
		  message {
		    name: "Nest"
		  }
		}
	*/
	def_nested_msg := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*NestedMessageSelection_Nest, *localValueType]{
			Name: `nested_msg`,
			Type: grpcfed.CELObjectType("org.federation.NestedMessageSelection.Nest"),
			Setter: func(value *localValueType, v *NestedMessageSelection_Nest) error {
				value.vars.NestedMsg = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &FederationService_Org_Federation_NestedMessageSelection_NestArgument{}
				ret, err := s.resolve_Org_Federation_NestedMessageSelection_Nest(ctx, args)
				if err != nil {
					return nil, err
				}
				return ret, nil
			},
		})
	}

	/*
		def {
		  name: "cast_oneof"
		  message {
		    name: "CastOneof"
		  }
		}
	*/
	def_cast_oneof := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*CastOneof, *localValueType]{
			Name: `cast_oneof`,
			Type: grpcfed.CELObjectType("org.federation.CastOneof"),
			Setter: func(value *localValueType, v *CastOneof) error {
				value.vars.CastOneof = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &FederationService_Org_Federation_CastOneofArgument{}
				ret, err := s.resolve_Org_Federation_CastOneof(ctx, args)
				if err != nil {
					return nil, err
				}
				return ret, nil
			},
		})
	}

	// A tree view of message dependencies is shown below.
	/*
	   cast_oneof ─┐
	      msg_sel ─┤
	   nested_msg ─┤
	          sel ─┤
	*/
	eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_cast_oneof(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_msg_sel(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_nested_msg(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_sel(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	if err := eg.Wait(); err != nil {
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.CastOneof = value.vars.CastOneof
	req.MsgSel = value.vars.MsgSel
	req.NestedMsg = value.vars.NestedMsg
	req.Sel = value.vars.Sel

	// create a message value to be returned.
	ret := &GetResponse{}

	// field binding section.
	// (grpc.federation.field).by = "sel.user"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*User]{
		Value:      value,
		Expr:       `sel.user`,
		CacheIndex: 9,
		Setter: func(v *User) error {
			ret.User = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "msg_sel.message"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `msg_sel.message`,
		CacheIndex: 10,
		Setter: func(v string) error {
			ret.Msg = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "nested_msg"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*NestedMessageSelection_Nest]{
		Value:      value,
		Expr:       `nested_msg`,
		CacheIndex: 11,
		Setter: func(v *NestedMessageSelection_Nest) error {
			ret.NestedMsg = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "cast_oneof"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*CastOneof]{
		Value:      value,
		Expr:       `cast_oneof`,
		CacheIndex: 12,
		Setter: func(v *CastOneof) error {
			ret.CastOneof = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.GetResponse", slog.Any("org.federation.GetResponse", s.logvalue_Org_Federation_GetResponse(ret)))
	return ret, nil
}

// resolve_Org_Federation_MessageSelection resolve "org.federation.MessageSelection" message.
func (s *FederationService) resolve_Org_Federation_MessageSelection(ctx context.Context, req *FederationService_Org_Federation_MessageSelectionArgument) (*MessageSelection, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.MessageSelection")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.MessageSelection", slog.Any("message_args", s.logvalue_Org_Federation_MessageSelectionArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.MessageSelectionArgument", req)}

	// create a message value to be returned.
	ret := &MessageSelection{}

	// field binding section.
	oneof_MsgA, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
		Value:      value,
		Expr:       `false`,
		OutType:    reflect.TypeOf(true),
		CacheIndex: 13,
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	oneof_MsgB, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
		Value:      value,
		Expr:       `true`,
		OutType:    reflect.TypeOf(true),
		CacheIndex: 14,
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	switch {
	case oneof_MsgA.(bool):

		if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
			Value:      value,
			Expr:       `'aaa'`,
			CacheIndex: 15,
			Setter: func(v string) error {
				ret.Message = &MessageSelection_MsgA{MsgA: v}
				return nil
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	case oneof_MsgB.(bool):

		if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
			Value:      value,
			Expr:       `'bbb'`,
			CacheIndex: 16,
			Setter: func(v string) error {
				ret.Message = &MessageSelection_MsgB{MsgB: v}
				return nil
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	default:

		if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
			Value:      value,
			Expr:       `'ccc'`,
			CacheIndex: 17,
			Setter: func(v string) error {
				ret.Message = &MessageSelection_MsgC{MsgC: v}
				return nil
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.MessageSelection", slog.Any("org.federation.MessageSelection", s.logvalue_Org_Federation_MessageSelection(ret)))
	return ret, nil
}

// resolve_Org_Federation_NestedMessageSelection_Nest resolve "org.federation.NestedMessageSelection.Nest" message.
func (s *FederationService) resolve_Org_Federation_NestedMessageSelection_Nest(ctx context.Context, req *FederationService_Org_Federation_NestedMessageSelection_NestArgument) (*NestedMessageSelection_Nest, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.NestedMessageSelection.Nest")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.NestedMessageSelection.Nest", slog.Any("message_args", s.logvalue_Org_Federation_NestedMessageSelection_NestArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.NestedMessageSelection_NestArgument", req)}

	// create a message value to be returned.
	ret := &NestedMessageSelection_Nest{}

	// field binding section.
	oneof_Int, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
		Value:      value,
		Expr:       `true`,
		OutType:    reflect.TypeOf(true),
		CacheIndex: 18,
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	oneof_Text, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
		Value:      value,
		Expr:       `false`,
		OutType:    reflect.TypeOf(true),
		CacheIndex: 19,
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	switch {
	case oneof_Int.(bool):

		if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
			Value:      value,
			Expr:       `1`,
			CacheIndex: 20,
			Setter: func(v int64) error {
				ret.Value = &NestedMessageSelection_Nest_Int{Int: v}
				return nil
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	case oneof_Text.(bool):

		if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
			Value:      value,
			Expr:       `'foo'`,
			CacheIndex: 21,
			Setter: func(v string) error {
				ret.Value = &NestedMessageSelection_Nest_Text{Text: v}
				return nil
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.NestedMessageSelection.Nest", slog.Any("org.federation.NestedMessageSelection.Nest", s.logvalue_Org_Federation_NestedMessageSelection_Nest(ret)))
	return ret, nil
}

// resolve_Org_Federation_NoValueSelection resolve "org.federation.NoValueSelection" message.
func (s *FederationService) resolve_Org_Federation_NoValueSelection(ctx context.Context, req *FederationService_Org_Federation_NoValueSelectionArgument) (*NoValueSelection, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.NoValueSelection")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.NoValueSelection", slog.Any("message_args", s.logvalue_Org_Federation_NoValueSelectionArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.NoValueSelectionArgument", req)}

	// create a message value to be returned.
	ret := &NoValueSelection{}

	// field binding section.
	oneof_MA, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
		Value:      value,
		Expr:       `false`,
		OutType:    reflect.TypeOf(true),
		CacheIndex: 22,
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	oneof_MB, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
		Value:      value,
		Expr:       `false`,
		OutType:    reflect.TypeOf(true),
		CacheIndex: 23,
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	switch {
	case oneof_MA.(bool):

		if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*M]{
			Value:      value,
			Expr:       `M{value: 'a'}`,
			CacheIndex: 24,
			Setter: func(v *M) error {
				ret.NoValue = &NoValueSelection_MA{MA: v}
				return nil
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	case oneof_MB.(bool):

		if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*M]{
			Value:      value,
			Expr:       `M{value: 'b'}`,
			CacheIndex: 25,
			Setter: func(v *M) error {
				ret.NoValue = &NoValueSelection_MB{MB: v}
				return nil
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.NoValueSelection", slog.Any("org.federation.NoValueSelection", s.logvalue_Org_Federation_NoValueSelection(ret)))
	return ret, nil
}

// resolve_Org_Federation_User resolve "org.federation.User" message.
func (s *FederationService) resolve_Org_Federation_User(ctx context.Context, req *FederationService_Org_Federation_UserArgument) (*User, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.User")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.User", slog.Any("message_args", s.logvalue_Org_Federation_UserArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			XDef0 *user.GetUserResponse
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.UserArgument", req)}
	/*
		def {
		  name: "_def0"
		  call {
		    method: "user.UserService/GetUser"
		    request: [
		      { field: "id", by: "$.user_id" },
		      { field: "foo", by: "$.foo", if: "$.foo != 0" },
		      { field: "bar", by: "$.bar", if: "$.bar != ''" }
		    ]
		  }
		}
	*/
	def__def0 := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*user.GetUserResponse, *localValueType]{
			Name: `_def0`,
			Type: grpcfed.CELObjectType("user.GetUserResponse"),
			Setter: func(value *localValueType, v *user.GetUserResponse) error {
				value.vars.XDef0 = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &user.GetUserRequest{}
				// { field: "id", by: "$.user_id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:      value,
					Expr:       `$.user_id`,
					CacheIndex: 26,
					Setter: func(v string) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				// { field: "foo", by: "$.foo", if: "$.foo != 0" }
				if err := grpcfed.If(ctx, &grpcfed.IfParam[*localValueType]{
					Value:      value,
					Expr:       `$.foo != 0`,
					CacheIndex: 27,
					Body: func(value *localValueType) error {
						return grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
							Value:      value,
							Expr:       `$.foo`,
							CacheIndex: 28,
							Setter: func(v int64) error {
								args.Foobar = &user.GetUserRequest_Foo{
									Foo: v,
								}
								return nil
							},
						})
					},
				}); err != nil {
					return nil, err
				}
				// { field: "bar", by: "$.bar", if: "$.bar != ”" }
				if err := grpcfed.If(ctx, &grpcfed.IfParam[*localValueType]{
					Value:      value,
					Expr:       `$.bar != ''`,
					CacheIndex: 29,
					Body: func(value *localValueType) error {
						return grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
							Value:      value,
							Expr:       `$.bar`,
							CacheIndex: 30,
							Setter: func(v string) error {
								args.Foobar = &user.GetUserRequest_Bar{
									Bar: v,
								}
								return nil
							},
						})
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call user.UserService/GetUser", slog.Any("user.GetUserRequest", s.logvalue_User_GetUserRequest(args)))
				ret, err := s.client.User_UserServiceClient.GetUser(ctx, args)
				if err != nil {
					if err := s.errorHandler(ctx, FederationService_DependentMethod_User_UserService_GetUser, err); err != nil {
						return nil, grpcfed.NewErrorWithLogAttrs(err, slog.LevelError, grpcfed.LogAttrs(ctx))
					}
				}
				return ret, nil
			},
		})
	}

	if err := def__def0(ctx); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// create a message value to be returned.
	ret := &User{}

	// field binding section.
	// (grpc.federation.field).by = "$.user_id"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `$.user_id`,
		CacheIndex: 31,
		Setter: func(v string) error {
			ret.Id = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.User", slog.Any("org.federation.User", s.logvalue_Org_Federation_User(ret)))
	return ret, nil
}

// resolve_Org_Federation_UserSelection resolve "org.federation.UserSelection" message.
func (s *FederationService) resolve_Org_Federation_UserSelection(ctx context.Context, req *FederationService_Org_Federation_UserSelectionArgument) (*UserSelection, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.UserSelection")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.UserSelection", slog.Any("message_args", s.logvalue_Org_Federation_UserSelectionArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			Ua *User
			Ub *User
			Uc *User
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.UserSelectionArgument", req)}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Ua = value.vars.Ua
	req.Ub = value.vars.Ub
	req.Uc = value.vars.Uc

	// create a message value to be returned.
	ret := &UserSelection{}

	// field binding section.
	oneof_UserA, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
		Value:      value,
		Expr:       `false`,
		OutType:    reflect.TypeOf(true),
		CacheIndex: 32,
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	oneof_UserB, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
		Value:      value,
		Expr:       `true`,
		OutType:    reflect.TypeOf(true),
		CacheIndex: 33,
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	switch {
	case oneof_UserA.(bool):
		/*
			def {
			  name: "ua"
			  message {
			    name: "User"
			    args: [
			      { name: "user_id", by: "'a'" },
			      { name: "foo", by: "0" },
			      { name: "bar", by: "'hello'" }
			    ]
			  }
			}
		*/
		def_ua := func(ctx context.Context) error {
			return grpcfed.EvalDef(ctx, value, grpcfed.Def[*User, *localValueType]{
				Name: `ua`,
				Type: grpcfed.CELObjectType("org.federation.User"),
				Setter: func(value *localValueType, v *User) error {
					value.vars.Ua = v
					return nil
				},
				Message: func(ctx context.Context, value *localValueType) (any, error) {
					args := &FederationService_Org_Federation_UserArgument{}
					// { name: "user_id", by: "'a'" }
					if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
						Value:      value,
						Expr:       `'a'`,
						CacheIndex: 34,
						Setter: func(v string) error {
							args.UserId = v
							return nil
						},
					}); err != nil {
						return nil, err
					}
					// { name: "foo", by: "0" }
					if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
						Value:      value,
						Expr:       `0`,
						CacheIndex: 35,
						Setter: func(v int64) error {
							args.Foo = v
							return nil
						},
					}); err != nil {
						return nil, err
					}
					// { name: "bar", by: "'hello'" }
					if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
						Value:      value,
						Expr:       `'hello'`,
						CacheIndex: 36,
						Setter: func(v string) error {
							args.Bar = v
							return nil
						},
					}); err != nil {
						return nil, err
					}
					ret, err := s.resolve_Org_Federation_User(ctx, args)
					if err != nil {
						return nil, err
					}
					return ret, nil
				},
			})
		}

		if err := def_ua(ctx); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*User]{
			Value:      value,
			Expr:       `ua`,
			CacheIndex: 37,
			Setter: func(v *User) error {
				ret.User = &UserSelection_UserA{UserA: v}
				return nil
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	case oneof_UserB.(bool):
		/*
			def {
			  name: "ub"
			  message {
			    name: "User"
			    args: [
			      { name: "user_id", by: "'b'" },
			      { name: "foo", by: "0" },
			      { name: "bar", by: "'hello'" }
			    ]
			  }
			}
		*/
		def_ub := func(ctx context.Context) error {
			return grpcfed.EvalDef(ctx, value, grpcfed.Def[*User, *localValueType]{
				Name: `ub`,
				Type: grpcfed.CELObjectType("org.federation.User"),
				Setter: func(value *localValueType, v *User) error {
					value.vars.Ub = v
					return nil
				},
				Message: func(ctx context.Context, value *localValueType) (any, error) {
					args := &FederationService_Org_Federation_UserArgument{}
					// { name: "user_id", by: "'b'" }
					if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
						Value:      value,
						Expr:       `'b'`,
						CacheIndex: 38,
						Setter: func(v string) error {
							args.UserId = v
							return nil
						},
					}); err != nil {
						return nil, err
					}
					// { name: "foo", by: "0" }
					if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
						Value:      value,
						Expr:       `0`,
						CacheIndex: 39,
						Setter: func(v int64) error {
							args.Foo = v
							return nil
						},
					}); err != nil {
						return nil, err
					}
					// { name: "bar", by: "'hello'" }
					if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
						Value:      value,
						Expr:       `'hello'`,
						CacheIndex: 40,
						Setter: func(v string) error {
							args.Bar = v
							return nil
						},
					}); err != nil {
						return nil, err
					}
					ret, err := s.resolve_Org_Federation_User(ctx, args)
					if err != nil {
						return nil, err
					}
					return ret, nil
				},
			})
		}

		if err := def_ub(ctx); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*User]{
			Value:      value,
			Expr:       `ub`,
			CacheIndex: 41,
			Setter: func(v *User) error {
				ret.User = &UserSelection_UserB{UserB: v}
				return nil
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	default:
		/*
			def {
			  name: "uc"
			  message {
			    name: "User"
			    args: [
			      { name: "user_id", by: "$.value" },
			      { name: "foo", by: "0" },
			      { name: "bar", by: "'hello'" }
			    ]
			  }
			}
		*/
		def_uc := func(ctx context.Context) error {
			return grpcfed.EvalDef(ctx, value, grpcfed.Def[*User, *localValueType]{
				Name: `uc`,
				Type: grpcfed.CELObjectType("org.federation.User"),
				Setter: func(value *localValueType, v *User) error {
					value.vars.Uc = v
					return nil
				},
				Message: func(ctx context.Context, value *localValueType) (any, error) {
					args := &FederationService_Org_Federation_UserArgument{}
					// { name: "user_id", by: "$.value" }
					if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
						Value:      value,
						Expr:       `$.value`,
						CacheIndex: 42,
						Setter: func(v string) error {
							args.UserId = v
							return nil
						},
					}); err != nil {
						return nil, err
					}
					// { name: "foo", by: "0" }
					if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
						Value:      value,
						Expr:       `0`,
						CacheIndex: 43,
						Setter: func(v int64) error {
							args.Foo = v
							return nil
						},
					}); err != nil {
						return nil, err
					}
					// { name: "bar", by: "'hello'" }
					if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
						Value:      value,
						Expr:       `'hello'`,
						CacheIndex: 44,
						Setter: func(v string) error {
							args.Bar = v
							return nil
						},
					}); err != nil {
						return nil, err
					}
					ret, err := s.resolve_Org_Federation_User(ctx, args)
					if err != nil {
						return nil, err
					}
					return ret, nil
				},
			})
		}

		if err := def_uc(ctx); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*User]{
			Value:      value,
			Expr:       `uc`,
			CacheIndex: 45,
			Setter: func(v *User) error {
				ret.User = &UserSelection_UserC{UserC: v}
				return nil
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.UserSelection", slog.Any("org.federation.UserSelection", s.logvalue_Org_Federation_UserSelection(ret)))
	return ret, nil
}

// cast_User_UserType__to__Org_Federation_CastOneof_Type cast from "user.UserType" to "org.federation.CastOneof.type".
func (s *FederationService) cast_User_UserType__to__Org_Federation_CastOneof_Type(from user.UserType) (*CastOneof_Type, error) {
	var ret UserType
	switch from {
	case user.UserType_USER_TYPE_UNSPECIFIED:
		ret = UserType_USER_TYPE_UNSPECIFIED
	case user.UserType_USER_TYPE_ANONYMOUS:
		ret = UserType_USER_TYPE_ANONYMOUS
	default:
		ret = 0
	}
	return &CastOneof_Type{
		Type: ret,
	}, nil
}

// cast_User_User__to__Org_Federation_CastOneof_User cast from "user.User" to "org.federation.CastOneof.user".
func (s *FederationService) cast_User_User__to__Org_Federation_CastOneof_User(from *user.User) (*CastOneof_User, error) {
	if from == nil {
		return nil, nil
	}

	idValue := from.GetId()

	ret := &User{
		Id: idValue,
	}
	return &CastOneof_User{
		User: ret,
	}, nil
}

// cast_uint64__to__Org_Federation_CastOneof_Num cast from "uint64" to "org.federation.CastOneof.num".
func (s *FederationService) cast_uint64__to__Org_Federation_CastOneof_Num(from uint64) (*CastOneof_Num, error) {
	ret, err := grpcfed.Uint64ToInt64(from)
	if err != nil {
		return nil, err
	}
	return &CastOneof_Num{
		Num: ret,
	}, nil
}

func (s *FederationService) logvalue_Org_Federation_CastOneof(v *CastOneof) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("num", v.GetNum()),
		slog.Any("user", s.logvalue_Org_Federation_User(v.GetUser())),
		slog.String("type", s.logvalue_Org_Federation_UserType(v.GetType()).String()),
	)
}

func (s *FederationService) logvalue_Org_Federation_CastOneofArgument(v *FederationService_Org_Federation_CastOneofArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Org_Federation_GetNoValueResponse(v *GetNoValueResponse) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("no_value", s.logvalue_Org_Federation_M(v.GetNoValue())),
	)
}

func (s *FederationService) logvalue_Org_Federation_GetNoValueResponseArgument(v *FederationService_Org_Federation_GetNoValueResponseArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Org_Federation_GetResponse(v *GetResponse) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("user", s.logvalue_Org_Federation_User(v.GetUser())),
		slog.String("msg", v.GetMsg()),
		slog.Any("nested_msg", s.logvalue_Org_Federation_NestedMessageSelection_Nest(v.GetNestedMsg())),
		slog.Any("cast_oneof", s.logvalue_Org_Federation_CastOneof(v.GetCastOneof())),
	)
}

func (s *FederationService) logvalue_Org_Federation_GetResponseArgument(v *FederationService_Org_Federation_GetResponseArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Org_Federation_M(v *M) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("value", v.GetValue()),
	)
}

func (s *FederationService) logvalue_Org_Federation_MessageSelection(v *MessageSelection) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("msg_a", v.GetMsgA()),
		slog.String("msg_b", v.GetMsgB()),
		slog.String("msg_c", v.GetMsgC()),
	)
}

func (s *FederationService) logvalue_Org_Federation_MessageSelectionArgument(v *FederationService_Org_Federation_MessageSelectionArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Org_Federation_NestedMessageSelection_Nest(v *NestedMessageSelection_Nest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("int", v.GetInt()),
		slog.String("text", v.GetText()),
	)
}

func (s *FederationService) logvalue_Org_Federation_NestedMessageSelection_NestArgument(v *FederationService_Org_Federation_NestedMessageSelection_NestArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Org_Federation_NoValueSelection(v *NoValueSelection) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("m_a", s.logvalue_Org_Federation_M(v.GetMA())),
		slog.Any("m_b", s.logvalue_Org_Federation_M(v.GetMB())),
	)
}

func (s *FederationService) logvalue_Org_Federation_NoValueSelectionArgument(v *FederationService_Org_Federation_NoValueSelectionArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Org_Federation_User(v *User) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.GetId()),
	)
}

func (s *FederationService) logvalue_Org_Federation_UserArgument(v *FederationService_Org_Federation_UserArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("user_id", v.UserId),
		slog.Int64("foo", v.Foo),
		slog.String("bar", v.Bar),
	)
}

func (s *FederationService) logvalue_Org_Federation_UserSelection(v *UserSelection) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("user_a", s.logvalue_Org_Federation_User(v.GetUserA())),
		slog.Any("user_b", s.logvalue_Org_Federation_User(v.GetUserB())),
		slog.Any("user_c", s.logvalue_Org_Federation_User(v.GetUserC())),
	)
}

func (s *FederationService) logvalue_Org_Federation_UserSelectionArgument(v *FederationService_Org_Federation_UserSelectionArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("value", v.Value),
	)
}

func (s *FederationService) logvalue_Org_Federation_UserType(v UserType) slog.Value {
	switch v {
	case UserType_USER_TYPE_UNSPECIFIED:
		return slog.StringValue("USER_TYPE_UNSPECIFIED")
	case UserType_USER_TYPE_ANONYMOUS:
		return slog.StringValue("USER_TYPE_ANONYMOUS")
	}
	return slog.StringValue("")
}

func (s *FederationService) logvalue_User_GetUserRequest(v *user.GetUserRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.GetId()),
		slog.Int64("foo", v.GetFoo()),
		slog.String("bar", v.GetBar()),
	)
}
