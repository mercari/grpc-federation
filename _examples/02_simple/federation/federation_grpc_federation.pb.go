// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
// versions:
//
//	protoc-gen-grpc-federation: (devel)
//
// source: federation/federation.proto
package federation

import (
	"context"
	"io"
	"log/slog"
	"reflect"

	grpcfed "github.com/mercari/grpc-federation/grpc/federation"
	grpcfedcel "github.com/mercari/grpc-federation/grpc/federation/cel"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"
	"google.golang.org/protobuf/types/known/anypb"
	"google.golang.org/protobuf/types/known/timestamppb"

	post "example/post"
	user "example/user"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

var (
	_ = reflect.Invalid // to avoid "imported and not used error"
)

var Item_ItemType_attrMap = grpcfed.EnumAttributeMap[Item_ItemType]{
	Item_ITEM_TYPE_UNSPECIFIED: grpcfed.EnumValueAttributeMap{
		`en`:  `unknown item`,
		`sub`: ``,
	},
	Item_ITEM_TYPE_1: grpcfed.EnumValueAttributeMap{
		`en`:  `first item type`,
		`sub`: `xxx`,
	},
	Item_ITEM_TYPE_2: grpcfed.EnumValueAttributeMap{
		`en`:  `second item type`,
		`sub`: `yyy`,
	},
	Item_ITEM_TYPE_3: grpcfed.EnumValueAttributeMap{
		`en`:  `third item type`,
		`sub`: `zzz`,
	},
}

// Federation_AVariable represents variable definitions in "federation.A".
type FederationService_Federation_AVariable struct {
	B *A_B
}

// Federation_AArgument is argument for "federation.A" message.
type FederationService_Federation_AArgument struct {
	FederationService_Federation_AVariable
}

// Federation_A_BVariable represents variable definitions in "federation.B".
type FederationService_Federation_A_BVariable struct {
	Bar *A_B_C
	Foo *A_B_C
}

// Federation_A_BArgument is argument for "federation.B" message.
type FederationService_Federation_A_BArgument struct {
	FederationService_Federation_A_BVariable
}

// Federation_A_B_CVariable represents variable definitions in "federation.C".
type FederationService_Federation_A_B_CVariable struct {
}

// Federation_A_B_CArgument is argument for "federation.C" message.
type FederationService_Federation_A_B_CArgument struct {
	Type string
	FederationService_Federation_A_B_CVariable
}

// Federation_GetPostResponseVariable represents variable definitions in "federation.GetPostResponse".
type FederationService_Federation_GetPostResponseVariable struct {
	A            *A
	Date         *grpcfedcel.Time
	E            Item_ItemType
	FixedRand    *grpcfedcel.Rand
	Flatten      []int64
	Floor        float64
	JpTime       *grpcfedcel.Time
	Loc          *grpcfedcel.Location
	MapValue     map[int64]string
	NullValue    any
	ParseFloat   float64
	Post         *Post
	Pow          float64
	RandSource   *grpcfedcel.Source
	SortedItems  []*user.Item
	SortedValues []int64
	SqrtDouble   float64
	SqrtInt      float64
	StringsJoin  string
	Url          *grpcfedcel.URL
	Uuid         *grpcfedcel.UUID
	Value1       string
}

// Federation_GetPostResponseArgument is argument for "federation.GetPostResponse" message.
type FederationService_Federation_GetPostResponseArgument struct {
	Id string
	FederationService_Federation_GetPostResponseVariable
}

// Federation_PostVariable represents variable definitions in "federation.Post".
type FederationService_Federation_PostVariable struct {
	Post *post.Post
	Res  *post.GetPostResponse
	User *User
}

// Federation_PostArgument is argument for "federation.Post" message.
type FederationService_Federation_PostArgument struct {
	Id string
	FederationService_Federation_PostVariable
}

// Federation_UserVariable represents variable definitions in "federation.User".
type FederationService_Federation_UserVariable struct {
	Res  *user.GetUserResponse
	User *user.User
}

// Federation_UserArgument is argument for "federation.User" message.
type FederationService_Federation_UserArgument struct {
	Content string
	Id      string
	Title   string
	UserId  string
	FederationService_Federation_UserVariable
}

// FederationServiceConfig configuration required to initialize the service that use GRPC Federation.
type FederationServiceConfig struct {
	// Client provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
	// If this interface is not provided, an error is returned during initialization.
	Client FederationServiceClientFactory // required
	// ErrorHandler Federation Service often needs to convert errors received from downstream services.
	// If an error occurs during method execution in the Federation Service, this error handler is called and the returned error is treated as a final error.
	ErrorHandler grpcfed.ErrorHandler
	// Logger sets the logger used to output Debug/Info/Error information.
	Logger *slog.Logger
}

// FederationServiceClientFactory provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
type FederationServiceClientFactory interface {
	// Post_PostServiceClient create a gRPC Client to be used to call methods in post.PostService.
	Post_PostServiceClient(FederationServiceClientConfig) (post.PostServiceClient, error)
	// User_UserServiceClient create a gRPC Client to be used to call methods in user.UserService.
	User_UserServiceClient(FederationServiceClientConfig) (user.UserServiceClient, error)
}

// FederationServiceClientConfig helper to create gRPC client.
// Hints for creating a gRPC Client.
type FederationServiceClientConfig struct {
	// Service FQDN ( `<package-name>.<service-name>` ) of the service on Protocol Buffers.
	Service string
}

// FederationServiceDependentClientSet has a gRPC client for all services on which the federation service depends.
// This is provided as an argument when implementing the custom resolver.
type FederationServiceDependentClientSet struct {
	Post_PostServiceClient post.PostServiceClient
	User_UserServiceClient user.UserServiceClient
}

// FederationServiceResolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
type FederationServiceResolver interface {
}

// FederationServiceCELPluginWasmConfig type alias for grpcfedcel.WasmConfig.
type FederationServiceCELPluginWasmConfig = grpcfedcel.WasmConfig

// FederationServiceCELPluginConfig hints for loading a WebAssembly based plugin.
type FederationServiceCELPluginConfig struct {
	CacheDir string
}

// FederationServiceUnimplementedResolver a structure implemented to satisfy the Resolver interface.
// An Unimplemented error is always returned.
// This is intended for use when there are many Resolver interfaces that do not need to be implemented,
// by embedding them in a resolver structure that you have created.
type FederationServiceUnimplementedResolver struct{}

const (
	FederationService_DependentMethod_Post_PostService_GetPost = "/post.PostService/GetPost"
	FederationService_DependentMethod_User_UserService_GetUser = "/user.UserService/GetUser"
)

// FederationService represents Federation Service.
type FederationService struct {
	UnimplementedFederationServiceServer
	cfg                FederationServiceConfig
	logger             *slog.Logger
	errorHandler       grpcfed.ErrorHandler
	celCacheMap        *grpcfed.CELCacheMap
	tracer             trace.Tracer
	celTypeHelper      *grpcfed.CELTypeHelper
	celEnvOpts         []grpcfed.CELEnvOption
	celPluginInstances []*grpcfedcel.CELPluginInstance
	client             *FederationServiceDependentClientSet
}

// NewFederationService creates FederationService instance by FederationServiceConfig.
func NewFederationService(cfg FederationServiceConfig) (*FederationService, error) {
	if cfg.Client == nil {
		return nil, grpcfed.ErrClientConfig
	}
	Post_PostServiceClient, err := cfg.Client.Post_PostServiceClient(FederationServiceClientConfig{
		Service: "post.PostService",
	})
	if err != nil {
		return nil, err
	}
	User_UserServiceClient, err := cfg.Client.User_UserServiceClient(FederationServiceClientConfig{
		Service: "user.UserService",
	})
	if err != nil {
		return nil, err
	}
	logger := cfg.Logger
	if logger == nil {
		logger = slog.New(slog.NewJSONHandler(io.Discard, nil))
	}
	errorHandler := cfg.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(ctx context.Context, methodName string, err error) error { return err }
	}
	celTypeHelperFieldMap := grpcfed.CELTypeHelperFieldMap{
		"grpc.federation.private.federation.AArgument":   {},
		"grpc.federation.private.federation.A_BArgument": {},
		"grpc.federation.private.federation.A_B_CArgument": {
			"type": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Type"),
		},
		"grpc.federation.private.federation.GetPostResponseArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Id"),
		},
		"grpc.federation.private.federation.PostArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Id"),
		},
		"grpc.federation.private.federation.UserArgument": {
			"id":      grpcfed.NewCELFieldType(grpcfed.CELStringType, "Id"),
			"title":   grpcfed.NewCELFieldType(grpcfed.CELStringType, "Title"),
			"content": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Content"),
			"user_id": grpcfed.NewCELFieldType(grpcfed.CELStringType, "UserId"),
		},
	}
	celTypeHelper := grpcfed.NewCELTypeHelper("federation", celTypeHelperFieldMap)
	var celEnvOpts []grpcfed.CELEnvOption
	celEnvOpts = append(celEnvOpts, grpcfed.NewDefaultEnvOptions(celTypeHelper)...)
	celEnvOpts = append(celEnvOpts, grpcfed.EnumAccessorOptions("federation.Item.ItemType", Item_ItemType_value, Item_ItemType_name)...)
	celEnvOpts = append(celEnvOpts, grpcfed.EnumAttrOption[Item_ItemType]("federation.Item.ItemType", Item_ItemType_attrMap))
	celEnvOpts = append(celEnvOpts, grpcfed.EnumAccessorOptions("federation.Item.Location.LocationType", Item_Location_LocationType_value, Item_Location_LocationType_name)...)
	celEnvOpts = append(celEnvOpts, grpcfed.EnumAccessorOptions("user.Item.ItemType", user.Item_ItemType_value, user.Item_ItemType_name)...)
	svc := &FederationService{
		cfg:           cfg,
		logger:        logger,
		errorHandler:  errorHandler,
		celEnvOpts:    celEnvOpts,
		celTypeHelper: celTypeHelper,
		celCacheMap:   grpcfed.NewCELCacheMap(),
		tracer:        otel.Tracer("federation.FederationService"),
		client: &FederationServiceDependentClientSet{
			Post_PostServiceClient: Post_PostServiceClient,
			User_UserServiceClient: User_UserServiceClient,
		},
	}
	return svc, nil
}

// CleanupFederationService cleanup all resources to prevent goroutine leaks.
func CleanupFederationService(ctx context.Context, svc *FederationService) {
	svc.cleanup(ctx)
}

func (s *FederationService) cleanup(ctx context.Context) {
	for _, instance := range s.celPluginInstances {
		instance.Close(ctx)
	}
}

// GetPost implements "federation.FederationService/GetPost" method.
func (s *FederationService) GetPost(ctx context.Context, req *GetPostRequest) (res *GetPostResponse, e error) {
	ctx, span := s.tracer.Start(ctx, "federation.FederationService/GetPost")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, grpcfed.StackTrace())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()

	defer func() {
		// cleanup plugin instance memory.
		for _, instance := range s.celPluginInstances {
			instance.GC()
		}
	}()
	res, err := s.resolve_Federation_GetPostResponse(ctx, &FederationService_Federation_GetPostResponseArgument{
		Id: req.GetId(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// resolve_Federation_A resolve "federation.A" message.
func (s *FederationService) resolve_Federation_A(ctx context.Context, req *FederationService_Federation_AArgument) (*A, error) {
	ctx, span := s.tracer.Start(ctx, "federation.A")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve federation.A", slog.Any("message_args", s.logvalue_Federation_AArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			B *A_B
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.federation.AArgument", req)}
	/*
		def {
		  name: "b"
		  message {
		    name: "B"
		  }
		}
	*/
	def_b := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*A_B, *localValueType]{
			Name: `b`,
			Type: grpcfed.CELObjectType("federation.A.B"),
			Setter: func(value *localValueType, v *A_B) error {
				value.vars.B = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &FederationService_Federation_A_BArgument{}
				ret, err := s.resolve_Federation_A_B(ctx, args)
				if err != nil {
					return nil, err
				}
				return ret, nil
			},
		})
	}

	if err := def_b(ctx); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.FederationService_Federation_AVariable.B = value.vars.B

	// create a message value to be returned.
	ret := &A{}

	// field binding section.
	// (grpc.federation.field).by = "b"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*A_B]{
		Value:      value,
		Expr:       `b`,
		CacheIndex: 1,
		Setter: func(v *A_B) error {
			ret.B = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved federation.A", slog.Any("federation.A", s.logvalue_Federation_A(ret)))
	return ret, nil
}

// resolve_Federation_A_B resolve "federation.A.B" message.
func (s *FederationService) resolve_Federation_A_B(ctx context.Context, req *FederationService_Federation_A_BArgument) (*A_B, error) {
	ctx, span := s.tracer.Start(ctx, "federation.A.B")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve federation.A.B", slog.Any("message_args", s.logvalue_Federation_A_BArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			Bar   *A_B_C
			Foo   *A_B_C
			XDef2 bool
			XDef3 bool
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.federation.A_BArgument", req)}
	/*
		def {
		  name: "foo"
		  message {
		    name: "C"
		    args { name: "type", by: "'foo'" }
		  }
		}
	*/
	def_foo := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*A_B_C, *localValueType]{
			Name: `foo`,
			Type: grpcfed.CELObjectType("federation.A.B.C"),
			Setter: func(value *localValueType, v *A_B_C) error {
				value.vars.Foo = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &FederationService_Federation_A_B_CArgument{}
				// { name: "type", by: "'foo'" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:      value,
					Expr:       `'foo'`,
					CacheIndex: 2,
					Setter: func(v string) error {
						args.Type = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				ret, err := s.resolve_Federation_A_B_C(ctx, args)
				if err != nil {
					return nil, err
				}
				return ret, nil
			},
		})
	}

	/*
		def {
		  name: "bar"
		  message {
		    name: "C"
		    args { name: "type", by: "'bar'" }
		  }
		}
	*/
	def_bar := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*A_B_C, *localValueType]{
			Name: `bar`,
			Type: grpcfed.CELObjectType("federation.A.B.C"),
			Setter: func(value *localValueType, v *A_B_C) error {
				value.vars.Bar = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &FederationService_Federation_A_B_CArgument{}
				// { name: "type", by: "'bar'" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:      value,
					Expr:       `'bar'`,
					CacheIndex: 3,
					Setter: func(v string) error {
						args.Type = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				ret, err := s.resolve_Federation_A_B_C(ctx, args)
				if err != nil {
					return nil, err
				}
				return ret, nil
			},
		})
	}

	/*
		def {
		  name: "_def2"
		  if: "foo.type == 'foo'"
		  by: "grpc.federation.log.info('output federation log', {'messages': [foo, bar], 'message_map': {'foo': foo, 'bar': bar}})"
		}
	*/
	def__def2 := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[bool, *localValueType]{
			If:           `foo.type == 'foo'`,
			IfCacheIndex: 4,
			Name:         `_def2`,
			Type:         grpcfed.CELBoolType,
			Setter: func(value *localValueType, v bool) error {
				value.vars.XDef2 = v
				return nil
			},
			By:           `grpc.federation.log.info('output federation log', {'messages': [foo, bar], 'message_map': {'foo': foo, 'bar': bar}})`,
			ByCacheIndex: 5,
		})
	}

	/*
		def {
		  name: "_def3"
		  by: "grpc.federation.log.add({'foo_type': foo.type, 'bar_type': bar.type})"
		}
	*/
	def__def3 := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[bool, *localValueType]{
			Name: `_def3`,
			Type: grpcfed.CELBoolType,
			Setter: func(value *localValueType, v bool) error {
				value.vars.XDef3 = v
				return nil
			},
			By:           `grpc.federation.log.add({'foo_type': foo.type, 'bar_type': bar.type})`,
			ByCacheIndex: 6,
		})
	}

	// A tree view of message dependencies is shown below.
	/*
	   bar ─┐
	   foo ─┤
	        _def2 ─┐
	   bar ─┐      │
	   foo ─┤      │
	        _def3 ─┤
	*/
	eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)

	grpcfed.GoWithRecover(eg, func() (any, error) {
		eg, ctx2 := grpcfed.ErrorGroupWithContext(ctx1)
		grpcfed.GoWithRecover(eg, func() (any, error) {
			if err := def_bar(ctx2); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			return nil, nil
		})
		grpcfed.GoWithRecover(eg, func() (any, error) {
			if err := def_foo(ctx2); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			return nil, nil
		})
		if err := eg.Wait(); err != nil {
			return nil, err
		}
		if err := def__def2(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		eg, ctx2 := grpcfed.ErrorGroupWithContext(ctx1)
		grpcfed.GoWithRecover(eg, func() (any, error) {
			if err := def_bar(ctx2); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			return nil, nil
		})
		grpcfed.GoWithRecover(eg, func() (any, error) {
			if err := def_foo(ctx2); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			return nil, nil
		})
		if err := eg.Wait(); err != nil {
			return nil, err
		}
		if err := def__def3(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	if err := eg.Wait(); err != nil {
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.FederationService_Federation_A_BVariable.Bar = value.vars.Bar
	req.FederationService_Federation_A_BVariable.Foo = value.vars.Foo

	// create a message value to be returned.
	ret := &A_B{}

	// field binding section.
	// (grpc.federation.field).by = "foo"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*A_B_C]{
		Value:      value,
		Expr:       `foo`,
		CacheIndex: 7,
		Setter: func(v *A_B_C) error {
			ret.Foo = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "bar"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*A_B_C]{
		Value:      value,
		Expr:       `bar`,
		CacheIndex: 8,
		Setter: func(v *A_B_C) error {
			ret.Bar = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved federation.A.B", slog.Any("federation.A.B", s.logvalue_Federation_A_B(ret)))
	return ret, nil
}

// resolve_Federation_A_B_C resolve "federation.A.B.C" message.
func (s *FederationService) resolve_Federation_A_B_C(ctx context.Context, req *FederationService_Federation_A_B_CArgument) (*A_B_C, error) {
	ctx, span := s.tracer.Start(ctx, "federation.A.B.C")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve federation.A.B.C", slog.Any("message_args", s.logvalue_Federation_A_B_CArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.federation.A_B_CArgument", req)}

	// create a message value to be returned.
	ret := &A_B_C{}

	// field binding section.
	// (grpc.federation.field).by = "$.type"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `$.type`,
		CacheIndex: 9,
		Setter: func(v string) error {
			ret.Type = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved federation.A.B.C", slog.Any("federation.A.B.C", s.logvalue_Federation_A_B_C(ret)))
	return ret, nil
}

// resolve_Federation_GetPostResponse resolve "federation.GetPostResponse" message.
func (s *FederationService) resolve_Federation_GetPostResponse(ctx context.Context, req *FederationService_Federation_GetPostResponseArgument) (*GetPostResponse, error) {
	ctx, span := s.tracer.Start(ctx, "federation.GetPostResponse")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve federation.GetPostResponse", slog.Any("message_args", s.logvalue_Federation_GetPostResponseArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			A            *A
			Date         *grpcfedcel.Time
			E            Item_ItemType
			FixedRand    *grpcfedcel.Rand
			Flatten      []int64
			Floor        float64
			JpTime       *grpcfedcel.Time
			Loc          *grpcfedcel.Location
			MapValue     map[int64]string
			NullValue    any
			ParseFloat   float64
			Post         *Post
			Pow          float64
			RandSource   *grpcfedcel.Source
			SortedItems  []*user.Item
			SortedValues []int64
			SqrtDouble   float64
			SqrtInt      float64
			StringsJoin  string
			Url          *grpcfedcel.URL
			Uuid         *grpcfedcel.UUID
			Value1       string
			XDef16       bool
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.federation.GetPostResponseArgument", req)}
	/*
		def {
		  name: "post"
		  message {
		    name: "Post"
		    args { name: "id", by: "$.id" }
		  }
		}
	*/
	def_post := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*Post, *localValueType]{
			Name: `post`,
			Type: grpcfed.CELObjectType("federation.Post"),
			Setter: func(value *localValueType, v *Post) error {
				value.vars.Post = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &FederationService_Federation_PostArgument{}
				// { name: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:      value,
					Expr:       `$.id`,
					CacheIndex: 10,
					Setter: func(v string) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				ret, err := s.resolve_Federation_Post(ctx, args)
				if err != nil {
					return nil, err
				}
				return ret, nil
			},
		})
	}

	/*
		def {
		  name: "strings_join"
		  by: "grpc.federation.strings.join(['1234567'.substring(1, 3), '2'], '.')"
		}
	*/
	def_strings_join := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[string, *localValueType]{
			Name: `strings_join`,
			Type: grpcfed.CELStringType,
			Setter: func(value *localValueType, v string) error {
				value.vars.StringsJoin = v
				return nil
			},
			By:           `grpc.federation.strings.join(['1234567'.substring(1, 3), '2'], '.')`,
			ByCacheIndex: 11,
		})
	}

	/*
		def {
		  name: "parse_float"
		  by: "grpc.federation.strings.parseFloat(strings_join, 64)"
		}
	*/
	def_parse_float := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[float64, *localValueType]{
			Name: `parse_float`,
			Type: grpcfed.CELDoubleType,
			Setter: func(value *localValueType, v float64) error {
				value.vars.ParseFloat = v
				return nil
			},
			By:           `grpc.federation.strings.parseFloat(strings_join, 64)`,
			ByCacheIndex: 12,
		})
	}

	/*
		def {
		  name: "url"
		  by: "grpc.federation.url.parse('https://test_user:password@example.com/path')"
		}
	*/
	def_url := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*grpcfedcel.URL, *localValueType]{
			Name: `url`,
			Type: grpcfed.CELObjectType("grpc.federation.url.URL"),
			Setter: func(value *localValueType, v *grpcfedcel.URL) error {
				value.vars.Url = v
				return nil
			},
			By:           `grpc.federation.url.parse('https://test_user:password@example.com/path')`,
			ByCacheIndex: 13,
		})
	}

	/*
		def {
		  name: "date"
		  by: "grpc.federation.time.date(2023, 12, 25, 12, 10, 5, 0, grpc.federation.time.UTC())"
		}
	*/
	def_date := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*grpcfedcel.Time, *localValueType]{
			Name: `date`,
			Type: grpcfed.CELObjectType("grpc.federation.time.Time"),
			Setter: func(value *localValueType, v *grpcfedcel.Time) error {
				value.vars.Date = v
				return nil
			},
			By:           `grpc.federation.time.date(2023, 12, 25, 12, 10, 5, 0, grpc.federation.time.UTC())`,
			ByCacheIndex: 14,
		})
	}

	/*
		def {
		  name: "rand_source"
		  by: "grpc.federation.rand.newSource(date.unix())"
		}
	*/
	def_rand_source := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*grpcfedcel.Source, *localValueType]{
			Name: `rand_source`,
			Type: grpcfed.CELObjectType("grpc.federation.rand.Source"),
			Setter: func(value *localValueType, v *grpcfedcel.Source) error {
				value.vars.RandSource = v
				return nil
			},
			By:           `grpc.federation.rand.newSource(date.unix())`,
			ByCacheIndex: 15,
		})
	}

	/*
		def {
		  name: "fixed_rand"
		  by: "grpc.federation.rand.new(rand_source)"
		}
	*/
	def_fixed_rand := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*grpcfedcel.Rand, *localValueType]{
			Name: `fixed_rand`,
			Type: grpcfed.CELObjectType("grpc.federation.rand.Rand"),
			Setter: func(value *localValueType, v *grpcfedcel.Rand) error {
				value.vars.FixedRand = v
				return nil
			},
			By:           `grpc.federation.rand.new(rand_source)`,
			ByCacheIndex: 16,
		})
	}

	/*
		def {
		  name: "uuid"
		  by: ".grpc.federation.uuid.newRandomFromRand(fixed_rand)"
		}
	*/
	def_uuid := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*grpcfedcel.UUID, *localValueType]{
			Name: `uuid`,
			Type: grpcfed.CELObjectType("grpc.federation.uuid.UUID"),
			Setter: func(value *localValueType, v *grpcfedcel.UUID) error {
				value.vars.Uuid = v
				return nil
			},
			By:           `.grpc.federation.uuid.newRandomFromRand(fixed_rand)`,
			ByCacheIndex: 17,
		})
	}

	/*
		def {
		  name: "loc"
		  by: "grpc.federation.time.loadLocation('Asia/Tokyo')"
		}
	*/
	def_loc := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*grpcfedcel.Location, *localValueType]{
			Name: `loc`,
			Type: grpcfed.CELObjectType("grpc.federation.time.Location"),
			Setter: func(value *localValueType, v *grpcfedcel.Location) error {
				value.vars.Loc = v
				return nil
			},
			By:           `grpc.federation.time.loadLocation('Asia/Tokyo')`,
			ByCacheIndex: 18,
		})
	}

	/*
		def {
		  name: "jp_time"
		  by: "grpc.federation.time.date(2023, 12, 25, 12, 10, 5, 0, loc)"
		}
	*/
	def_jp_time := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*grpcfedcel.Time, *localValueType]{
			Name: `jp_time`,
			Type: grpcfed.CELObjectType("grpc.federation.time.Time"),
			Setter: func(value *localValueType, v *grpcfedcel.Time) error {
				value.vars.JpTime = v
				return nil
			},
			By:           `grpc.federation.time.date(2023, 12, 25, 12, 10, 5, 0, loc)`,
			ByCacheIndex: 19,
		})
	}

	/*
		def {
		  name: "value1"
		  by: "grpc.federation.metadata.incoming()['key1'][0]"
		}
	*/
	def_value1 := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[string, *localValueType]{
			Name: `value1`,
			Type: grpcfed.CELStringType,
			Setter: func(value *localValueType, v string) error {
				value.vars.Value1 = v
				return nil
			},
			By:           `grpc.federation.metadata.incoming()['key1'][0]`,
			ByCacheIndex: 20,
		})
	}

	/*
		def {
		  name: "a"
		  message {
		    name: "A"
		  }
		}
	*/
	def_a := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*A, *localValueType]{
			Name: `a`,
			Type: grpcfed.CELObjectType("federation.A"),
			Setter: func(value *localValueType, v *A) error {
				value.vars.A = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &FederationService_Federation_AArgument{}
				ret, err := s.resolve_Federation_A(ctx, args)
				if err != nil {
					return nil, err
				}
				return ret, nil
			},
		})
	}

	/*
		def {
		  name: "sorted_values"
		  by: "[4, 1, 3, 2].sortAsc(v, v)"
		}
	*/
	def_sorted_values := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[[]int64, *localValueType]{
			Name: `sorted_values`,
			Type: grpcfed.CELListType(grpcfed.CELIntType),
			Setter: func(value *localValueType, v []int64) error {
				value.vars.SortedValues = v
				return nil
			},
			By:           `[4, 1, 3, 2].sortAsc(v, v)`,
			ByCacheIndex: 21,
		})
	}

	/*
		def {
		  name: "sorted_items"
		  by: "[user.Item{location:user.Item.Location{addr1:'a'}}, user.Item{location:user.Item.Location{addr1:'b'}}].sortDesc(v, v.location.addr1)"
		}
	*/
	def_sorted_items := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[[]*user.Item, *localValueType]{
			Name: `sorted_items`,
			Type: grpcfed.CELListType(grpcfed.CELObjectType("user.Item")),
			Setter: func(value *localValueType, v []*user.Item) error {
				value.vars.SortedItems = v
				return nil
			},
			By:           `[user.Item{location:user.Item.Location{addr1:'a'}}, user.Item{location:user.Item.Location{addr1:'b'}}].sortDesc(v, v.location.addr1)`,
			ByCacheIndex: 22,
		})
	}

	/*
		def {
		  name: "map_value"
		  by: "{1: 'a', 2: 'b', 3: 'c'}"
		}
	*/
	def_map_value := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[map[int64]string, *localValueType]{
			Name: `map_value`,
			Type: grpcfed.NewCELMapType(grpcfed.CELIntType, grpcfed.CELStringType),
			Setter: func(value *localValueType, v map[int64]string) error {
				value.vars.MapValue = v
				return nil
			},
			By:           `{1: 'a', 2: 'b', 3: 'c'}`,
			ByCacheIndex: 23,
		})
	}

	/*
		def {
		  name: "null_value"
		  by: "null"
		}
	*/
	def_null_value := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[any, *localValueType]{
			Name: `null_value`,
			Type: grpcfed.CELNullType,
			Setter: func(value *localValueType, v any) error {
				value.vars.NullValue = v
				return nil
			},
			By:           `null`,
			ByCacheIndex: 24,
		})
	}

	/*
		def {
		  name: "_def16"
		  by: "grpc.federation.log.info('output federation log', {'post_message': post})"
		}
	*/
	def__def16 := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[bool, *localValueType]{
			Name: `_def16`,
			Type: grpcfed.CELBoolType,
			Setter: func(value *localValueType, v bool) error {
				value.vars.XDef16 = v
				return nil
			},
			By:           `grpc.federation.log.info('output federation log', {'post_message': post})`,
			ByCacheIndex: 25,
		})
	}

	/*
		def {
		  name: "e"
		  enum {
		    name: "federation.Item.ItemType"
		    by: "true ? user.Item.ItemType.value('ITEM_TYPE_2') : user.Item.ItemType.from(1)"
		  }
		}
	*/
	def_e := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[Item_ItemType, *localValueType]{
			Name: `e`,
			Type: grpcfed.CELIntType,
			Setter: func(value *localValueType, v Item_ItemType) error {
				value.vars.E = v
				return nil
			},
			Enum: func(ctx context.Context, value *localValueType) (Item_ItemType, error) {
				src, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
					Value:      value,
					Expr:       `true ? user.Item.ItemType.value('ITEM_TYPE_2') : user.Item.ItemType.from(1)`,
					OutType:    reflect.TypeOf(user.Item_ItemType(0)),
					CacheIndex: 26,
				})
				if err != nil {
					return 0, err
				}
				v := src.(user.Item_ItemType)
				return s.cast_User_Item_ItemType__to__Federation_Item_ItemType(v)
			},
		})
	}

	/*
		def {
		  name: "sqrt_double"
		  by: "grpc.federation.math.sqrt(3.0*3.0+4.0*4.0)"
		}
	*/
	def_sqrt_double := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[float64, *localValueType]{
			Name: `sqrt_double`,
			Type: grpcfed.CELDoubleType,
			Setter: func(value *localValueType, v float64) error {
				value.vars.SqrtDouble = v
				return nil
			},
			By:           `grpc.federation.math.sqrt(3.0*3.0+4.0*4.0)`,
			ByCacheIndex: 27,
		})
	}

	/*
		def {
		  name: "sqrt_int"
		  by: "grpc.federation.math.sqrt(3*3+4*4)"
		}
	*/
	def_sqrt_int := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[float64, *localValueType]{
			Name: `sqrt_int`,
			Type: grpcfed.CELDoubleType,
			Setter: func(value *localValueType, v float64) error {
				value.vars.SqrtInt = v
				return nil
			},
			By:           `grpc.federation.math.sqrt(3*3+4*4)`,
			ByCacheIndex: 28,
		})
	}

	/*
		def {
		  name: "pow"
		  by: "grpc.federation.math.pow(2.0, 3.0)"
		}
	*/
	def_pow := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[float64, *localValueType]{
			Name: `pow`,
			Type: grpcfed.CELDoubleType,
			Setter: func(value *localValueType, v float64) error {
				value.vars.Pow = v
				return nil
			},
			By:           `grpc.federation.math.pow(2.0, 3.0)`,
			ByCacheIndex: 29,
		})
	}

	/*
		def {
		  name: "floor"
		  by: "grpc.federation.math.floor(1.51)"
		}
	*/
	def_floor := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[float64, *localValueType]{
			Name: `floor`,
			Type: grpcfed.CELDoubleType,
			Setter: func(value *localValueType, v float64) error {
				value.vars.Floor = v
				return nil
			},
			By:           `grpc.federation.math.floor(1.51)`,
			ByCacheIndex: 30,
		})
	}

	/*
		def {
		  name: "flatten"
		  by: "[[1], [2], [3]].flatten()"
		}
	*/
	def_flatten := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[[]int64, *localValueType]{
			Name: `flatten`,
			Type: grpcfed.CELListType(grpcfed.CELIntType),
			Setter: func(value *localValueType, v []int64) error {
				value.vars.Flatten = v
				return nil
			},
			By:           `[[1], [2], [3]].flatten()`,
			ByCacheIndex: 31,
		})
	}

	// A tree view of message dependencies is shown below.
	/*
	                              post ─┐
	                                           _def16 ─┐
	                                                a ─┤
	                                                e ─┤
	                                          flatten ─┤
	                                            floor ─┤
	                               loc ─┐              │
	                                          jp_time ─┤
	                                        map_value ─┤
	                                       null_value ─┤
	                      strings_join ─┐              │
	                                      parse_float ─┤
	                                              pow ─┤
	                                     sorted_items ─┤
	                                    sorted_values ─┤
	                                      sqrt_double ─┤
	                                         sqrt_int ─┤
	                                              url ─┤
	   date ─┐                                         │
	         rand_source ─┐                            │
	                        fixed_rand ─┐              │
	                                             uuid ─┤
	                                           value1 ─┤
	*/
	eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_post(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		if err := def__def16(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_a(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_e(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_flatten(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_floor(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_loc(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		if err := def_jp_time(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_map_value(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_null_value(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_strings_join(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		if err := def_parse_float(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_pow(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_sorted_items(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_sorted_values(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_sqrt_double(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_sqrt_int(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_url(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_date(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		if err := def_rand_source(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		if err := def_fixed_rand(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		if err := def_uuid(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_value1(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	if err := eg.Wait(); err != nil {
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.FederationService_Federation_GetPostResponseVariable.A = value.vars.A
	req.FederationService_Federation_GetPostResponseVariable.Date = value.vars.Date
	req.FederationService_Federation_GetPostResponseVariable.E = value.vars.E
	req.FederationService_Federation_GetPostResponseVariable.FixedRand = value.vars.FixedRand
	req.FederationService_Federation_GetPostResponseVariable.Flatten = value.vars.Flatten
	req.FederationService_Federation_GetPostResponseVariable.Floor = value.vars.Floor
	req.FederationService_Federation_GetPostResponseVariable.JpTime = value.vars.JpTime
	req.FederationService_Federation_GetPostResponseVariable.Loc = value.vars.Loc
	req.FederationService_Federation_GetPostResponseVariable.MapValue = value.vars.MapValue
	req.FederationService_Federation_GetPostResponseVariable.NullValue = value.vars.NullValue
	req.FederationService_Federation_GetPostResponseVariable.ParseFloat = value.vars.ParseFloat
	req.FederationService_Federation_GetPostResponseVariable.Post = value.vars.Post
	req.FederationService_Federation_GetPostResponseVariable.Pow = value.vars.Pow
	req.FederationService_Federation_GetPostResponseVariable.RandSource = value.vars.RandSource
	req.FederationService_Federation_GetPostResponseVariable.SortedItems = value.vars.SortedItems
	req.FederationService_Federation_GetPostResponseVariable.SortedValues = value.vars.SortedValues
	req.FederationService_Federation_GetPostResponseVariable.SqrtDouble = value.vars.SqrtDouble
	req.FederationService_Federation_GetPostResponseVariable.SqrtInt = value.vars.SqrtInt
	req.FederationService_Federation_GetPostResponseVariable.StringsJoin = value.vars.StringsJoin
	req.FederationService_Federation_GetPostResponseVariable.Url = value.vars.Url
	req.FederationService_Federation_GetPostResponseVariable.Uuid = value.vars.Uuid
	req.FederationService_Federation_GetPostResponseVariable.Value1 = value.vars.Value1

	// create a message value to be returned.
	ret := &GetPostResponse{}

	// field binding section.
	// (grpc.federation.field).by = "post"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*Post]{
		Value:      value,
		Expr:       `post`,
		CacheIndex: 32,
		Setter: func(v *Post) error {
			ret.Post = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "'hello'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `'hello'`,
		CacheIndex: 33,
		Setter: func(v string) error {
			ret.Str = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "uuid.string()"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `uuid.string()`,
		CacheIndex: 34,
		Setter: func(v string) error {
			ret.Uuid = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "loc.string()"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `loc.string()`,
		CacheIndex: 35,
		Setter: func(v string) error {
			ret.Loc = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "value1"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `value1`,
		CacheIndex: 36,
		Setter: func(v string) error {
			ret.Value1 = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "Item.ItemType.name(Item.ItemType.ITEM_TYPE_1)"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `Item.ItemType.name(Item.ItemType.ITEM_TYPE_1)`,
		CacheIndex: 37,
		Setter: func(v string) error {
			ret.ItemTypeName = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "Item.Location.LocationType.name(Item.Location.LocationType.LOCATION_TYPE_1)"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `Item.Location.LocationType.name(Item.Location.LocationType.LOCATION_TYPE_1)`,
		CacheIndex: 38,
		Setter: func(v string) error {
			ret.LocationTypeName = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "user.Item.ItemType.name(user.Item.ItemType.ITEM_TYPE_2)"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `user.Item.ItemType.name(user.Item.ItemType.ITEM_TYPE_2)`,
		CacheIndex: 39,
		Setter: func(v string) error {
			ret.UserItemTypeName = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "user.Item.ItemType.value('ITEM_TYPE_1')"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[user.Item_ItemType]{
		Value:      value,
		Expr:       `user.Item.ItemType.value('ITEM_TYPE_1')`,
		CacheIndex: 40,
		Setter: func(v user.Item_ItemType) error {
			itemTypeValueEnumValue, err := s.cast_User_Item_ItemType__to__Federation_Item_ItemType(v)
			if err != nil {
				return err
			}
			ret.ItemTypeValueEnum = itemTypeValueEnumValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "user.Item.ItemType.value('ITEM_TYPE_1')"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[user.Item_ItemType]{
		Value:      value,
		Expr:       `user.Item.ItemType.value('ITEM_TYPE_1')`,
		CacheIndex: 41,
		Setter: func(v user.Item_ItemType) error {
			itemTypeValueIntValue, err := s.cast_User_Item_ItemType__to__int32(v)
			if err != nil {
				return err
			}
			ret.ItemTypeValueInt = itemTypeValueIntValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "user.Item.ItemType.from(1)"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[user.Item_ItemType]{
		Value:      value,
		Expr:       `user.Item.ItemType.from(1)`,
		CacheIndex: 42,
		Setter: func(v user.Item_ItemType) error {
			itemTypeValueCastValue, err := s.cast_User_Item_ItemType__to__Federation_Item_ItemType(v)
			if err != nil {
				return err
			}
			ret.ItemTypeValueCast = itemTypeValueCastValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "Item.Location.LocationType.value('LOCATION_TYPE_1')"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[Item_Location_LocationType]{
		Value:      value,
		Expr:       `Item.Location.LocationType.value('LOCATION_TYPE_1')`,
		CacheIndex: 43,
		Setter: func(v Item_Location_LocationType) error {
			locationTypeValueValue, err := s.cast_Federation_Item_Location_LocationType__to__int32(v)
			if err != nil {
				return err
			}
			ret.LocationTypeValue = locationTypeValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "user.Item.ItemType.value('ITEM_TYPE_2')"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[user.Item_ItemType]{
		Value:      value,
		Expr:       `user.Item.ItemType.value('ITEM_TYPE_2')`,
		CacheIndex: 44,
		Setter: func(v user.Item_ItemType) error {
			userItemTypeValueValue, err := s.cast_User_Item_ItemType__to__int32(v)
			if err != nil {
				return err
			}
			ret.UserItemTypeValue = userItemTypeValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "a"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*A]{
		Value:      value,
		Expr:       `a`,
		CacheIndex: 45,
		Setter: func(v *A) error {
			ret.A = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "sorted_values"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int32]{
		Value:      value,
		Expr:       `sorted_values`,
		CacheIndex: 46,
		Setter: func(v []int32) error {
			ret.SortedValues = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "sorted_items"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*user.Item]{
		Value:      value,
		Expr:       `sorted_items`,
		CacheIndex: 47,
		Setter: func(v []*user.Item) error {
			sortedItemsValue, err := s.cast_repeated_User_Item__to__repeated_Federation_Item(v)
			if err != nil {
				return err
			}
			ret.SortedItems = sortedItemsValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "map_value"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[map[int64]string]{
		Value:      value,
		Expr:       `map_value`,
		CacheIndex: 48,
		Setter: func(v map[int64]string) error {
			mapValueValue, err := s.cast_map_int64_string__to__map_int32_string(v)
			if err != nil {
				return err
			}
			ret.MapValue = mapValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.DoubleValue{value: 1.23}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.DoubleValue]{
		Value:      value,
		Expr:       `google.protobuf.DoubleValue{value: 1.23}`,
		CacheIndex: 49,
		Setter: func(v *wrapperspb.DoubleValue) error {
			doubleWrapperValueValue, err := s.cast_Google_Protobuf_DoubleValue__to__Google_Protobuf_DoubleValue(v)
			if err != nil {
				return err
			}
			ret.DoubleWrapperValue = doubleWrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.FloatValue{value: 3.45}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.DoubleValue]{
		Value:      value,
		Expr:       `google.protobuf.FloatValue{value: 3.45}`,
		CacheIndex: 50,
		Setter: func(v *wrapperspb.DoubleValue) error {
			floatWrapperValueValue, err := s.cast_Google_Protobuf_DoubleValue__to__Google_Protobuf_FloatValue(v)
			if err != nil {
				return err
			}
			ret.FloatWrapperValue = floatWrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.Int64Value{value: 1}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.Int64Value]{
		Value:      value,
		Expr:       `google.protobuf.Int64Value{value: 1}`,
		CacheIndex: 51,
		Setter: func(v *wrapperspb.Int64Value) error {
			i64WrapperValueValue, err := s.cast_Google_Protobuf_Int64Value__to__Google_Protobuf_Int64Value(v)
			if err != nil {
				return err
			}
			ret.I64WrapperValue = i64WrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.UInt64Value{value: uint(2)}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.UInt64Value]{
		Value:      value,
		Expr:       `google.protobuf.UInt64Value{value: uint(2)}`,
		CacheIndex: 52,
		Setter: func(v *wrapperspb.UInt64Value) error {
			u64WrapperValueValue, err := s.cast_Google_Protobuf_UInt64Value__to__Google_Protobuf_UInt64Value(v)
			if err != nil {
				return err
			}
			ret.U64WrapperValue = u64WrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.Int32Value{value: 3}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.Int64Value]{
		Value:      value,
		Expr:       `google.protobuf.Int32Value{value: 3}`,
		CacheIndex: 53,
		Setter: func(v *wrapperspb.Int64Value) error {
			i32WrapperValueValue, err := s.cast_Google_Protobuf_Int64Value__to__Google_Protobuf_Int32Value(v)
			if err != nil {
				return err
			}
			ret.I32WrapperValue = i32WrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.UInt32Value{value: uint(4)}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.UInt64Value]{
		Value:      value,
		Expr:       `google.protobuf.UInt32Value{value: uint(4)}`,
		CacheIndex: 54,
		Setter: func(v *wrapperspb.UInt64Value) error {
			u32WrapperValueValue, err := s.cast_Google_Protobuf_UInt64Value__to__Google_Protobuf_UInt32Value(v)
			if err != nil {
				return err
			}
			ret.U32WrapperValue = u32WrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.BoolValue{value: true}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.BoolValue]{
		Value:      value,
		Expr:       `google.protobuf.BoolValue{value: true}`,
		CacheIndex: 55,
		Setter: func(v *wrapperspb.BoolValue) error {
			boolWrapperValueValue, err := s.cast_Google_Protobuf_BoolValue__to__Google_Protobuf_BoolValue(v)
			if err != nil {
				return err
			}
			ret.BoolWrapperValue = boolWrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.StringValue{value: 'hello'}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.StringValue]{
		Value:      value,
		Expr:       `google.protobuf.StringValue{value: 'hello'}`,
		CacheIndex: 56,
		Setter: func(v *wrapperspb.StringValue) error {
			stringWrapperValueValue, err := s.cast_Google_Protobuf_StringValue__to__Google_Protobuf_StringValue(v)
			if err != nil {
				return err
			}
			ret.StringWrapperValue = stringWrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.BytesValue{value: bytes('world')}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.BytesValue]{
		Value:      value,
		Expr:       `google.protobuf.BytesValue{value: bytes('world')}`,
		CacheIndex: 57,
		Setter: func(v *wrapperspb.BytesValue) error {
			bytesWrapperValueValue, err := s.cast_Google_Protobuf_BytesValue__to__Google_Protobuf_BytesValue(v)
			if err != nil {
				return err
			}
			ret.BytesWrapperValue = bytesWrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "'hello\\nworld'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `'hello\nworld'`,
		CacheIndex: 58,
		Setter: func(v string) error {
			ret.Hello = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "null"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*timestamppb.Timestamp]{
		Value:      value,
		Expr:       `null`,
		CacheIndex: 59,
		Setter: func(v *timestamppb.Timestamp) error {
			ret.NullTimestamp = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "null_value"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*timestamppb.Timestamp]{
		Value:      value,
		Expr:       `null_value`,
		CacheIndex: 60,
		Setter: func(v *timestamppb.Timestamp) error {
			ret.NullTimestamp2 = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "true ? null : google.protobuf.Timestamp{}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*timestamppb.Timestamp]{
		Value:      value,
		Expr:       `true ? null : google.protobuf.Timestamp{}`,
		CacheIndex: 61,
		Setter: func(v *timestamppb.Timestamp) error {
			ret.NullTimestamp3 = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "jp_time.location().string()"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `jp_time.location().string()`,
		CacheIndex: 62,
		Setter: func(v string) error {
			ret.JpLoc = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "strings_join"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `strings_join`,
		CacheIndex: 63,
		Setter: func(v string) error {
			ret.StringsJoin = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "parse_float"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[float64]{
		Value:      value,
		Expr:       `parse_float`,
		CacheIndex: 64,
		Setter: func(v float64) error {
			ret.ParseFloat = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "url.userinfo().username()"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `url.userinfo().username()`,
		CacheIndex: 65,
		Setter: func(v string) error {
			ret.UrlUserName = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "e"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[Item_ItemType]{
		Value:      value,
		Expr:       `e`,
		CacheIndex: 66,
		Setter: func(v Item_ItemType) error {
			ret.EnumValue = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "Item.ItemType.attr(e, 'en')"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `Item.ItemType.attr(e, 'en')`,
		CacheIndex: 67,
		Setter: func(v string) error {
			ret.EnumValueStr = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "sqrt_double"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[float64]{
		Value:      value,
		Expr:       `sqrt_double`,
		CacheIndex: 68,
		Setter: func(v float64) error {
			ret.SqrtDouble = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "sqrt_int"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[float64]{
		Value:      value,
		Expr:       `sqrt_int`,
		CacheIndex: 69,
		Setter: func(v float64) error {
			ret.SqrtInt = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "pow"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[float64]{
		Value:      value,
		Expr:       `pow`,
		CacheIndex: 70,
		Setter: func(v float64) error {
			ret.Pow = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "floor"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[float64]{
		Value:      value,
		Expr:       `floor`,
		CacheIndex: 71,
		Setter: func(v float64) error {
			ret.Floor = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "flatten"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int64]{
		Value:      value,
		Expr:       `flatten`,
		CacheIndex: 72,
		Setter: func(v []int64) error {
			ret.Flatten = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved federation.GetPostResponse", slog.Any("federation.GetPostResponse", s.logvalue_Federation_GetPostResponse(ret)))
	return ret, nil
}

// resolve_Federation_Post resolve "federation.Post" message.
func (s *FederationService) resolve_Federation_Post(ctx context.Context, req *FederationService_Federation_PostArgument) (*Post, error) {
	ctx, span := s.tracer.Start(ctx, "federation.Post")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve federation.Post", slog.Any("message_args", s.logvalue_Federation_PostArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			Post *post.Post
			Res  *post.GetPostResponse
			User *User
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.federation.PostArgument", req)}
	/*
		def {
		  name: "res"
		  call {
		    method: "post.PostService/GetPost"
		    request { field: "id", by: "$.id" }
		  }
		}
	*/
	def_res := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*post.GetPostResponse, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("post.GetPostResponse"),
			Setter: func(value *localValueType, v *post.GetPostResponse) error {
				value.vars.Res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &post.GetPostRequest{}
				// { field: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:      value,
					Expr:       `$.id`,
					CacheIndex: 73,
					Setter: func(v string) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call post.PostService/GetPost", slog.Any("post.GetPostRequest", s.logvalue_Post_GetPostRequest(args)))
				ret, err := grpcfed.WithTimeout[post.GetPostResponse](ctx, "post.PostService/GetPost", 10000000000 /* 10s */, func(ctx context.Context) (*post.GetPostResponse, error) {
					b := grpcfed.NewConstantBackOff(2000000000) /* 2s */
					b = grpcfed.BackOffWithMaxRetries(b, 3)
					b = grpcfed.BackOffWithContext(b, ctx)
					return grpcfed.WithRetry(ctx, &grpcfed.RetryParam[post.GetPostResponse]{
						Value:      value,
						If:         `true`,
						CacheIndex: 74,
						BackOff:    b,
						Body: func() (*post.GetPostResponse, error) {
							return s.client.Post_PostServiceClient.GetPost(ctx, args)
						},
					})
				})
				if err != nil {
					if err := s.errorHandler(ctx, FederationService_DependentMethod_Post_PostService_GetPost, err); err != nil {
						return nil, grpcfed.NewErrorWithLogAttrs(err, slog.LevelError, grpcfed.LogAttrs(ctx))
					}
				}
				return ret, nil
			},
		})
	}

	/*
		def {
		  name: "post"
		  autobind: true
		  by: "res.post"
		}
	*/
	def_post := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*post.Post, *localValueType]{
			Name: `post`,
			Type: grpcfed.CELObjectType("post.Post"),
			Setter: func(value *localValueType, v *post.Post) error {
				value.vars.Post = v
				return nil
			},
			By:           `res.post`,
			ByCacheIndex: 75,
		})
	}

	/*
		def {
		  name: "user"
		  message {
		    name: "User"
		    args { inline: "post" }
		  }
		}
	*/
	def_user := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*User, *localValueType]{
			Name: `user`,
			Type: grpcfed.CELObjectType("federation.User"),
			Setter: func(value *localValueType, v *User) error {
				value.vars.User = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &FederationService_Federation_UserArgument{}
				// { inline: "post" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*post.Post]{
					Value:      value,
					Expr:       `post`,
					CacheIndex: 76,
					Setter: func(v *post.Post) error {
						args.Id = v.GetId()
						args.Title = v.GetTitle()
						args.Content = v.GetContent()
						args.UserId = v.GetUserId()
						return nil
					},
				}); err != nil {
					return nil, err
				}
				ret, err := s.resolve_Federation_User(ctx, args)
				if err != nil {
					return nil, err
				}
				return ret, nil
			},
		})
	}

	if err := def_res(ctx); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	if err := def_post(ctx); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	if err := def_user(ctx); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.FederationService_Federation_PostVariable.Post = value.vars.Post
	req.FederationService_Federation_PostVariable.Res = value.vars.Res
	req.FederationService_Federation_PostVariable.User = value.vars.User

	// create a message value to be returned.
	ret := &Post{}

	// field binding section.
	ret.Id = value.vars.Post.GetId()           // { name: "post", autobind: true }
	ret.Title = value.vars.Post.GetTitle()     // { name: "post", autobind: true }
	ret.Content = value.vars.Post.GetContent() // { name: "post", autobind: true }
	// (grpc.federation.field).by = "user"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*User]{
		Value:      value,
		Expr:       `user`,
		CacheIndex: 77,
		Setter: func(v *User) error {
			ret.User = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved federation.Post", slog.Any("federation.Post", s.logvalue_Federation_Post(ret)))
	return ret, nil
}

// resolve_Federation_User resolve "federation.User" message.
func (s *FederationService) resolve_Federation_User(ctx context.Context, req *FederationService_Federation_UserArgument) (*User, error) {
	ctx, span := s.tracer.Start(ctx, "federation.User")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve federation.User", slog.Any("message_args", s.logvalue_Federation_UserArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			Res  *user.GetUserResponse
			User *user.User
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.federation.UserArgument", req)}
	/*
		def {
		  name: "res"
		  call {
		    method: "user.UserService/GetUser"
		    request: [
		      { field: "id", by: "$.user_id" },
		      { field: "type", by: "user.Item.ItemType.value('ITEM_TYPE_1')" }
		    ]
		  }
		}
	*/
	def_res := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*user.GetUserResponse, *localValueType]{
			Name: `res`,
			Type: grpcfed.CELObjectType("user.GetUserResponse"),
			Setter: func(value *localValueType, v *user.GetUserResponse) error {
				value.vars.Res = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &user.GetUserRequest{}
				// { field: "id", by: "$.user_id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:      value,
					Expr:       `$.user_id`,
					CacheIndex: 78,
					Setter: func(v string) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				// { field: "type", by: "user.Item.ItemType.value('ITEM_TYPE_1')" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[user.Item_ItemType]{
					Value:      value,
					Expr:       `user.Item.ItemType.value('ITEM_TYPE_1')`,
					CacheIndex: 79,
					Setter: func(v user.Item_ItemType) error {
						typeValue, err := s.cast_User_Item_ItemType__to__int32(v)
						if err != nil {
							return err
						}
						args.Type = typeValue
						return nil
					},
				}); err != nil {
					return nil, err
				}
				grpcfed.Logger(ctx).DebugContext(ctx, "call user.UserService/GetUser", slog.Any("user.GetUserRequest", s.logvalue_User_GetUserRequest(args)))
				ret, err := grpcfed.WithTimeout[user.GetUserResponse](ctx, "user.UserService/GetUser", 20000000000 /* 20s */, func(ctx context.Context) (*user.GetUserResponse, error) {
					b := grpcfed.NewExponentialBackOff(&grpcfed.ExponentialBackOffConfig{
						InitialInterval:     1000000000, /* 1s */
						RandomizationFactor: 0.7,
						Multiplier:          1.7,
						MaxInterval:         30000000000, /* 30s */
						MaxElapsedTime:      20000000000, /* 20s */
					})
					b = grpcfed.BackOffWithMaxRetries(b, 3)
					b = grpcfed.BackOffWithContext(b, ctx)
					return grpcfed.WithRetry(ctx, &grpcfed.RetryParam[user.GetUserResponse]{
						Value:      value,
						If:         `true`,
						CacheIndex: 80,
						BackOff:    b,
						Body: func() (*user.GetUserResponse, error) {
							return s.client.User_UserServiceClient.GetUser(ctx, args)
						},
					})
				})
				if err != nil {
					if err := s.errorHandler(ctx, FederationService_DependentMethod_User_UserService_GetUser, err); err != nil {
						return nil, grpcfed.NewErrorWithLogAttrs(err, slog.LevelError, grpcfed.LogAttrs(ctx))
					}
				}
				return ret, nil
			},
		})
	}

	/*
		def {
		  name: "user"
		  autobind: true
		  by: "res.user"
		}
	*/
	def_user := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*user.User, *localValueType]{
			Name: `user`,
			Type: grpcfed.CELObjectType("user.User"),
			Setter: func(value *localValueType, v *user.User) error {
				value.vars.User = v
				return nil
			},
			By:           `res.user`,
			ByCacheIndex: 81,
		})
	}

	if err := def_res(ctx); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	if err := def_user(ctx); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.FederationService_Federation_UserVariable.Res = value.vars.Res
	req.FederationService_Federation_UserVariable.User = value.vars.User

	// create a message value to be returned.
	ret := &User{}

	// field binding section.
	ret.Id = value.vars.User.GetId()     // { name: "user", autobind: true }
	ret.Name = value.vars.User.GetName() // { name: "user", autobind: true }
	{
		itemsValue, err := s.cast_repeated_User_Item__to__repeated_Federation_Item(value.vars.User.GetItems()) // { name: "user", autobind: true }
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Items = itemsValue
	}
	ret.Profile = value.vars.User.GetProfile() // { name: "user", autobind: true }
	switch {
	case value.vars.User.GetAttrA() != nil:

		attrValue, err := s.cast_User_User_AttrA___to__Federation_User_AttrA_(value.vars.User.GetAttrA())
		if err != nil {
			return nil, err
		}
		ret.Attr = attrValue
	case value.vars.User.GetB() != nil:

		attrValue, err := s.cast_User_User_B__to__Federation_User_B(value.vars.User.GetB())
		if err != nil {
			return nil, err
		}
		ret.Attr = attrValue
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved federation.User", slog.Any("federation.User", s.logvalue_Federation_User(ret)))
	return ret, nil
}

// cast_Federation_Item_Location_LocationType__to__int32 cast from "federation.Item.Location.LocationType" to "int32".
func (s *FederationService) cast_Federation_Item_Location_LocationType__to__int32(from Item_Location_LocationType) (int32, error) {
	return int32(from), nil
}

// cast_Google_Protobuf_BoolValue__to__Google_Protobuf_BoolValue cast from "google.protobuf.BoolValue" to "google.protobuf.BoolValue".
func (s *FederationService) cast_Google_Protobuf_BoolValue__to__Google_Protobuf_BoolValue(from *wrapperspb.BoolValue) (*wrapperspb.BoolValue, error) {
	if from == nil {
		return nil, nil
	}

	valueValue := from.GetValue()

	ret := &wrapperspb.BoolValue{
		Value: valueValue,
	}
	return ret, nil
}

// cast_Google_Protobuf_BytesValue__to__Google_Protobuf_BytesValue cast from "google.protobuf.BytesValue" to "google.protobuf.BytesValue".
func (s *FederationService) cast_Google_Protobuf_BytesValue__to__Google_Protobuf_BytesValue(from *wrapperspb.BytesValue) (*wrapperspb.BytesValue, error) {
	if from == nil {
		return nil, nil
	}

	valueValue := from.GetValue()

	ret := &wrapperspb.BytesValue{
		Value: valueValue,
	}
	return ret, nil
}

// cast_Google_Protobuf_DoubleValue__to__Google_Protobuf_DoubleValue cast from "google.protobuf.DoubleValue" to "google.protobuf.DoubleValue".
func (s *FederationService) cast_Google_Protobuf_DoubleValue__to__Google_Protobuf_DoubleValue(from *wrapperspb.DoubleValue) (*wrapperspb.DoubleValue, error) {
	if from == nil {
		return nil, nil
	}

	valueValue := from.GetValue()

	ret := &wrapperspb.DoubleValue{
		Value: valueValue,
	}
	return ret, nil
}

// cast_Google_Protobuf_DoubleValue__to__Google_Protobuf_FloatValue cast from "google.protobuf.DoubleValue" to "google.protobuf.FloatValue".
func (s *FederationService) cast_Google_Protobuf_DoubleValue__to__Google_Protobuf_FloatValue(from *wrapperspb.DoubleValue) (*wrapperspb.FloatValue, error) {
	if from == nil {
		return nil, nil
	}

	valueValue, err := s.cast_float64__to__float32(from.GetValue())
	if err != nil {
		return nil, err
	}

	ret := &wrapperspb.FloatValue{
		Value: valueValue,
	}
	return ret, nil
}

// cast_Google_Protobuf_Int64Value__to__Google_Protobuf_Int32Value cast from "google.protobuf.Int64Value" to "google.protobuf.Int32Value".
func (s *FederationService) cast_Google_Protobuf_Int64Value__to__Google_Protobuf_Int32Value(from *wrapperspb.Int64Value) (*wrapperspb.Int32Value, error) {
	if from == nil {
		return nil, nil
	}

	valueValue, err := s.cast_int64__to__int32(from.GetValue())
	if err != nil {
		return nil, err
	}

	ret := &wrapperspb.Int32Value{
		Value: valueValue,
	}
	return ret, nil
}

// cast_Google_Protobuf_Int64Value__to__Google_Protobuf_Int64Value cast from "google.protobuf.Int64Value" to "google.protobuf.Int64Value".
func (s *FederationService) cast_Google_Protobuf_Int64Value__to__Google_Protobuf_Int64Value(from *wrapperspb.Int64Value) (*wrapperspb.Int64Value, error) {
	if from == nil {
		return nil, nil
	}

	valueValue := from.GetValue()

	ret := &wrapperspb.Int64Value{
		Value: valueValue,
	}
	return ret, nil
}

// cast_Google_Protobuf_StringValue__to__Google_Protobuf_StringValue cast from "google.protobuf.StringValue" to "google.protobuf.StringValue".
func (s *FederationService) cast_Google_Protobuf_StringValue__to__Google_Protobuf_StringValue(from *wrapperspb.StringValue) (*wrapperspb.StringValue, error) {
	if from == nil {
		return nil, nil
	}

	valueValue := from.GetValue()

	ret := &wrapperspb.StringValue{
		Value: valueValue,
	}
	return ret, nil
}

// cast_Google_Protobuf_UInt64Value__to__Google_Protobuf_UInt32Value cast from "google.protobuf.UInt64Value" to "google.protobuf.UInt32Value".
func (s *FederationService) cast_Google_Protobuf_UInt64Value__to__Google_Protobuf_UInt32Value(from *wrapperspb.UInt64Value) (*wrapperspb.UInt32Value, error) {
	if from == nil {
		return nil, nil
	}

	valueValue, err := s.cast_uint64__to__uint32(from.GetValue())
	if err != nil {
		return nil, err
	}

	ret := &wrapperspb.UInt32Value{
		Value: valueValue,
	}
	return ret, nil
}

// cast_Google_Protobuf_UInt64Value__to__Google_Protobuf_UInt64Value cast from "google.protobuf.UInt64Value" to "google.protobuf.UInt64Value".
func (s *FederationService) cast_Google_Protobuf_UInt64Value__to__Google_Protobuf_UInt64Value(from *wrapperspb.UInt64Value) (*wrapperspb.UInt64Value, error) {
	if from == nil {
		return nil, nil
	}

	valueValue := from.GetValue()

	ret := &wrapperspb.UInt64Value{
		Value: valueValue,
	}
	return ret, nil
}

// cast_User_Item_ItemType__to__Federation_Item_ItemType cast from "user.Item.ItemType" to "federation.Item.ItemType".
func (s *FederationService) cast_User_Item_ItemType__to__Federation_Item_ItemType(from user.Item_ItemType) (Item_ItemType, error) {
	var ret Item_ItemType
	switch from {
	case user.Item_ITEM_TYPE_UNSPECIFIED:
		ret = Item_ITEM_TYPE_UNSPECIFIED
	case user.Item_ITEM_TYPE_1:
		ret = Item_ITEM_TYPE_1
	case user.Item_ITEM_TYPE_2:
		ret = Item_ITEM_TYPE_2
	case user.Item_ITEM_TYPE_3:
		ret = Item_ITEM_TYPE_3
	default:
		ret = 0
	}
	return ret, nil
}

// cast_User_Item_ItemType__to__int32 cast from "user.Item.ItemType" to "int32".
func (s *FederationService) cast_User_Item_ItemType__to__int32(from user.Item_ItemType) (int32, error) {
	return int32(from), nil
}

// cast_User_Item_Location_AddrA___to__Federation_Item_Location_AddrA_ cast from "user.Item.Location.addr_a" to "federation.Item.Location.addr_a".
func (s *FederationService) cast_User_Item_Location_AddrA___to__Federation_Item_Location_AddrA_(from *user.Item_Location_AddrA) (*Item_Location_AddrA_, error) {
	if from == nil {
		return nil, nil
	}

	addrAValue, err := s.cast_User_Item_Location_AddrA__to__Federation_Item_Location_AddrA(from)
	if err != nil {
		return nil, err
	}
	return &Item_Location_AddrA_{AddrA: addrAValue}, nil
}

// cast_User_Item_Location_AddrA__to__Federation_Item_Location_AddrA cast from "user.Item.Location.AddrA" to "federation.Item.Location.AddrA".
func (s *FederationService) cast_User_Item_Location_AddrA__to__Federation_Item_Location_AddrA(from *user.Item_Location_AddrA) (*Item_Location_AddrA, error) {
	if from == nil {
		return nil, nil
	}

	fooValue := from.GetFoo()

	ret := &Item_Location_AddrA{
		Foo: fooValue,
	}
	return ret, nil
}

// cast_User_Item_Location_AddrB__to__Federation_Item_Location_AddrB cast from "user.Item.Location.AddrB" to "federation.Item.Location.AddrB".
func (s *FederationService) cast_User_Item_Location_AddrB__to__Federation_Item_Location_AddrB(from *user.Item_Location_AddrB) (*Item_Location_AddrB, error) {
	if from == nil {
		return nil, nil
	}

	barValue := from.GetBar()

	ret := &Item_Location_AddrB{
		Bar: barValue,
	}
	return ret, nil
}

// cast_User_Item_Location_B__to__Federation_Item_Location_B cast from "user.Item.Location.b" to "federation.Item.Location.b".
func (s *FederationService) cast_User_Item_Location_B__to__Federation_Item_Location_B(from *user.Item_Location_AddrB) (*Item_Location_B, error) {
	if from == nil {
		return nil, nil
	}

	bValue, err := s.cast_User_Item_Location_AddrB__to__Federation_Item_Location_AddrB(from)
	if err != nil {
		return nil, err
	}
	return &Item_Location_B{B: bValue}, nil
}

// cast_User_Item_Location__to__Federation_Item_Location cast from "user.Item.Location" to "federation.Item.Location".
func (s *FederationService) cast_User_Item_Location__to__Federation_Item_Location(from *user.Item_Location) (*Item_Location, error) {
	if from == nil {
		return nil, nil
	}

	addr1Value := from.GetAddr1()
	addr2Value := from.GetAddr2()

	ret := &Item_Location{
		Addr1: addr1Value,
		Addr2: addr2Value,
	}
	switch {

	case from.GetAddrA() != nil:
		addr3Value, err := s.cast_User_Item_Location_AddrA___to__Federation_Item_Location_AddrA_(from.GetAddrA())
		if err != nil {
			return nil, err
		}
		ret.Addr3 = addr3Value
	case from.GetB() != nil:
		addr3Value, err := s.cast_User_Item_Location_B__to__Federation_Item_Location_B(from.GetB())
		if err != nil {
			return nil, err
		}
		ret.Addr3 = addr3Value
	}
	return ret, nil
}

// cast_User_Item__to__Federation_Item cast from "user.Item" to "federation.Item".
func (s *FederationService) cast_User_Item__to__Federation_Item(from *user.Item) (*Item, error) {
	if from == nil {
		return nil, nil
	}

	nameValue := from.GetName()
	typeValue, err := s.cast_User_Item_ItemType__to__Federation_Item_ItemType(from.GetType())
	if err != nil {
		return nil, err
	}
	valueValue := from.GetValue()
	locationValue, err := s.cast_User_Item_Location__to__Federation_Item_Location(from.GetLocation())
	if err != nil {
		return nil, err
	}

	ret := &Item{
		Name:     nameValue,
		Type:     typeValue,
		Value:    valueValue,
		Location: locationValue,
	}
	return ret, nil
}

// cast_User_User_AttrA___to__Federation_User_AttrA_ cast from "user.User.attr_a" to "federation.User.attr_a".
func (s *FederationService) cast_User_User_AttrA___to__Federation_User_AttrA_(from *user.User_AttrA) (*User_AttrA_, error) {
	if from == nil {
		return nil, nil
	}

	attrAValue, err := s.cast_User_User_AttrA__to__Federation_User_AttrA(from)
	if err != nil {
		return nil, err
	}
	return &User_AttrA_{AttrA: attrAValue}, nil
}

// cast_User_User_AttrA__to__Federation_User_AttrA cast from "user.User.AttrA" to "federation.User.AttrA".
func (s *FederationService) cast_User_User_AttrA__to__Federation_User_AttrA(from *user.User_AttrA) (*User_AttrA, error) {
	if from == nil {
		return nil, nil
	}

	fooValue := from.GetFoo()

	ret := &User_AttrA{
		Foo: fooValue,
	}
	return ret, nil
}

// cast_User_User_AttrB__to__Federation_User_AttrB cast from "user.User.AttrB" to "federation.User.AttrB".
func (s *FederationService) cast_User_User_AttrB__to__Federation_User_AttrB(from *user.User_AttrB) (*User_AttrB, error) {
	if from == nil {
		return nil, nil
	}

	barValue := from.GetBar()

	ret := &User_AttrB{
		Bar: barValue,
	}
	return ret, nil
}

// cast_User_User_B__to__Federation_User_B cast from "user.User.b" to "federation.User.b".
func (s *FederationService) cast_User_User_B__to__Federation_User_B(from *user.User_AttrB) (*User_B, error) {
	if from == nil {
		return nil, nil
	}

	bValue, err := s.cast_User_User_AttrB__to__Federation_User_AttrB(from)
	if err != nil {
		return nil, err
	}
	return &User_B{B: bValue}, nil
}

// cast_float64__to__float32 cast from "double" to "float".
func (s *FederationService) cast_float64__to__float32(from float64) (float32, error) {
	return float32(from), nil
}

// cast_int64__to__int32 cast from "int64" to "int32".
func (s *FederationService) cast_int64__to__int32(from int64) (int32, error) {
	ret, err := grpcfed.Int64ToInt32(from)
	if err != nil {
		return ret, err
	}
	return ret, nil
}

// cast_map_int64_string__to__map_int32_string cast from "map<int64, string>" to "map<int32, string>".
func (s *FederationService) cast_map_int64_string__to__map_int32_string(from map[int64]string) (map[int32]string, error) {
	ret := map[int32]string{}
	for k, v := range from {
		key, err := s.cast_int64__to__int32(k)
		if err != nil {
			return nil, err
		}
		val := v
		ret[key] = val
	}
	return ret, nil
}

// cast_repeated_User_Item__to__repeated_Federation_Item cast from "repeated user.Item" to "repeated federation.Item".
func (s *FederationService) cast_repeated_User_Item__to__repeated_Federation_Item(from []*user.Item) ([]*Item, error) {
	ret := make([]*Item, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_User_Item__to__Federation_Item(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_repeated_int64__to__repeated_int32 cast from "repeated int64" to "repeated int32".
func (s *FederationService) cast_repeated_int64__to__repeated_int32(from []int64) ([]int32, error) {
	ret := make([]int32, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_int64__to__int32(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_uint64__to__uint32 cast from "uint64" to "uint32".
func (s *FederationService) cast_uint64__to__uint32(from uint64) (uint32, error) {
	ret, err := grpcfed.Uint64ToUint32(from)
	if err != nil {
		return ret, err
	}
	return ret, nil
}

func (s *FederationService) logvalue_Federation_A(v *A) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("b", s.logvalue_Federation_A_B(v.GetB())),
	)
}

func (s *FederationService) logvalue_Federation_AArgument(v *FederationService_Federation_AArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Federation_A_B(v *A_B) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("foo", s.logvalue_Federation_A_B_C(v.GetFoo())),
		slog.Any("bar", s.logvalue_Federation_A_B_C(v.GetBar())),
	)
}

func (s *FederationService) logvalue_Federation_A_BArgument(v *FederationService_Federation_A_BArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Federation_A_B_C(v *A_B_C) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("type", v.GetType()),
	)
}

func (s *FederationService) logvalue_Federation_A_B_CArgument(v *FederationService_Federation_A_B_CArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("type", v.Type),
	)
}

func (s *FederationService) logvalue_Federation_GetPostResponse(v *GetPostResponse) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("post", s.logvalue_Federation_Post(v.GetPost())),
		slog.String("str", v.GetStr()),
		slog.String("uuid", v.GetUuid()),
		slog.String("loc", v.GetLoc()),
		slog.String("value1", v.GetValue1()),
		slog.String("item_type_name", v.GetItemTypeName()),
		slog.String("location_type_name", v.GetLocationTypeName()),
		slog.String("user_item_type_name", v.GetUserItemTypeName()),
		slog.String("item_type_value_enum", s.logvalue_Federation_Item_ItemType(v.GetItemTypeValueEnum()).String()),
		slog.Int64("item_type_value_int", int64(v.GetItemTypeValueInt())),
		slog.String("item_type_value_cast", s.logvalue_Federation_Item_ItemType(v.GetItemTypeValueCast()).String()),
		slog.Int64("location_type_value", int64(v.GetLocationTypeValue())),
		slog.Int64("user_item_type_value", int64(v.GetUserItemTypeValue())),
		slog.Any("a", s.logvalue_Federation_A(v.GetA())),
		slog.Any("sorted_values", v.GetSortedValues()),
		slog.Any("sorted_items", s.logvalue_repeated_Federation_Item(v.GetSortedItems())),
		slog.Any("map_value", s.logvalue_Federation_GetPostResponse_MapValueEntry(v.GetMapValue())),
		slog.Any("double_wrapper_value", s.logvalue_Google_Protobuf_DoubleValue(v.GetDoubleWrapperValue())),
		slog.Any("float_wrapper_value", s.logvalue_Google_Protobuf_FloatValue(v.GetFloatWrapperValue())),
		slog.Any("i64_wrapper_value", s.logvalue_Google_Protobuf_Int64Value(v.GetI64WrapperValue())),
		slog.Any("u64_wrapper_value", s.logvalue_Google_Protobuf_UInt64Value(v.GetU64WrapperValue())),
		slog.Any("i32_wrapper_value", s.logvalue_Google_Protobuf_Int32Value(v.GetI32WrapperValue())),
		slog.Any("u32_wrapper_value", s.logvalue_Google_Protobuf_UInt32Value(v.GetU32WrapperValue())),
		slog.Any("bool_wrapper_value", s.logvalue_Google_Protobuf_BoolValue(v.GetBoolWrapperValue())),
		slog.Any("string_wrapper_value", s.logvalue_Google_Protobuf_StringValue(v.GetStringWrapperValue())),
		slog.Any("bytes_wrapper_value", s.logvalue_Google_Protobuf_BytesValue(v.GetBytesWrapperValue())),
		slog.String("hello", v.GetHello()),
		slog.Any("null_timestamp", s.logvalue_Google_Protobuf_Timestamp(v.GetNullTimestamp())),
		slog.Any("null_timestamp2", s.logvalue_Google_Protobuf_Timestamp(v.GetNullTimestamp2())),
		slog.Any("null_timestamp3", s.logvalue_Google_Protobuf_Timestamp(v.GetNullTimestamp3())),
		slog.String("jp_loc", v.GetJpLoc()),
		slog.String("strings_join", v.GetStringsJoin()),
		slog.Float64("parse_float", v.GetParseFloat()),
		slog.String("url_user_name", v.GetUrlUserName()),
		slog.String("enum_value", s.logvalue_Federation_Item_ItemType(v.GetEnumValue()).String()),
		slog.String("enum_value_str", v.GetEnumValueStr()),
		slog.Float64("sqrt_double", v.GetSqrtDouble()),
		slog.Float64("sqrt_int", v.GetSqrtInt()),
		slog.Float64("pow", v.GetPow()),
		slog.Float64("floor", v.GetFloor()),
		slog.Any("flatten", v.GetFlatten()),
	)
}

func (s *FederationService) logvalue_Federation_GetPostResponseArgument(v *FederationService_Federation_GetPostResponseArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.Id),
	)
}

func (s *FederationService) logvalue_Federation_GetPostResponse_MapValueEntry(v map[int32]string) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for key, value := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(key),
			Value: slog.AnyValue(value),
		})
	}
	return slog.GroupValue(attrs...)
}

func (s *FederationService) logvalue_Federation_Item(v *Item) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("name", v.GetName()),
		slog.String("type", s.logvalue_Federation_Item_ItemType(v.GetType()).String()),
		slog.Int64("value", v.GetValue()),
		slog.Any("location", s.logvalue_Federation_Item_Location(v.GetLocation())),
	)
}

func (s *FederationService) logvalue_Federation_Item_ItemType(v Item_ItemType) slog.Value {
	switch v {
	case Item_ITEM_TYPE_UNSPECIFIED:
		return slog.StringValue("ITEM_TYPE_UNSPECIFIED")
	case Item_ITEM_TYPE_1:
		return slog.StringValue("ITEM_TYPE_1")
	case Item_ITEM_TYPE_2:
		return slog.StringValue("ITEM_TYPE_2")
	case Item_ITEM_TYPE_3:
		return slog.StringValue("ITEM_TYPE_3")
	}
	return slog.StringValue("")
}

func (s *FederationService) logvalue_Federation_Item_Location(v *Item_Location) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("addr1", v.GetAddr1()),
		slog.String("addr2", v.GetAddr2()),
		slog.Any("addr_a", s.logvalue_Federation_Item_Location_AddrA(v.GetAddrA())),
		slog.Any("b", s.logvalue_Federation_Item_Location_AddrB(v.GetB())),
	)
}

func (s *FederationService) logvalue_Federation_Item_Location_AddrA(v *Item_Location_AddrA) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("foo", v.GetFoo()),
	)
}

func (s *FederationService) logvalue_Federation_Item_Location_AddrB(v *Item_Location_AddrB) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("bar", v.GetBar()),
	)
}

func (s *FederationService) logvalue_Federation_Item_Location_LocationType(v Item_Location_LocationType) slog.Value {
	switch v {
	case Item_Location_LOCATION_TYPE_0:
		return slog.StringValue("LOCATION_TYPE_0")
	case Item_Location_LOCATION_TYPE_1:
		return slog.StringValue("LOCATION_TYPE_1")
	}
	return slog.StringValue("")
}

func (s *FederationService) logvalue_Federation_Post(v *Post) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.GetId()),
		slog.String("title", v.GetTitle()),
		slog.String("content", v.GetContent()),
		slog.Any("user", s.logvalue_Federation_User(v.GetUser())),
	)
}

func (s *FederationService) logvalue_Federation_PostArgument(v *FederationService_Federation_PostArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.Id),
	)
}

func (s *FederationService) logvalue_Federation_User(v *User) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.GetId()),
		slog.String("name", v.GetName()),
		slog.Any("items", s.logvalue_repeated_Federation_Item(v.GetItems())),
		slog.Any("profile", s.logvalue_Federation_User_ProfileEntry(v.GetProfile())),
		slog.Any("attr_a", s.logvalue_Federation_User_AttrA(v.GetAttrA())),
		slog.Any("b", s.logvalue_Federation_User_AttrB(v.GetB())),
	)
}

func (s *FederationService) logvalue_Federation_UserArgument(v *FederationService_Federation_UserArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.Id),
		slog.String("title", v.Title),
		slog.String("content", v.Content),
		slog.String("user_id", v.UserId),
	)
}

func (s *FederationService) logvalue_Federation_User_AttrA(v *User_AttrA) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("foo", v.GetFoo()),
	)
}

func (s *FederationService) logvalue_Federation_User_AttrB(v *User_AttrB) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Bool("bar", v.GetBar()),
	)
}

func (s *FederationService) logvalue_Federation_User_ProfileEntry(v map[string]*anypb.Any) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for key, value := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(key),
			Value: s.logvalue_Google_Protobuf_Any(value),
		})
	}
	return slog.GroupValue(attrs...)
}

func (s *FederationService) logvalue_Google_Protobuf_Any(v *anypb.Any) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("type_url", v.GetTypeUrl()),
		slog.String("value", string(v.GetValue())),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_BoolValue(v *wrapperspb.BoolValue) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Bool("value", v.GetValue()),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_BytesValue(v *wrapperspb.BytesValue) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("value", string(v.GetValue())),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_DoubleValue(v *wrapperspb.DoubleValue) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Float64("value", v.GetValue()),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_FloatValue(v *wrapperspb.FloatValue) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Float64("value", float64(v.GetValue())),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_Int32Value(v *wrapperspb.Int32Value) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("value", int64(v.GetValue())),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_Int64Value(v *wrapperspb.Int64Value) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("value", v.GetValue()),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_StringValue(v *wrapperspb.StringValue) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("value", v.GetValue()),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_Timestamp(v *timestamppb.Timestamp) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("seconds", v.GetSeconds()),
		slog.Int64("nanos", int64(v.GetNanos())),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_UInt32Value(v *wrapperspb.UInt32Value) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Uint64("value", uint64(v.GetValue())),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_UInt64Value(v *wrapperspb.UInt64Value) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Uint64("value", v.GetValue()),
	)
}

func (s *FederationService) logvalue_Post_GetPostRequest(v *post.GetPostRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.GetId()),
	)
}

func (s *FederationService) logvalue_Post_GetPostsRequest(v *post.GetPostsRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.GetIds()),
	)
}

func (s *FederationService) logvalue_User_GetUserRequest(v *user.GetUserRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.GetId()),
		slog.Int64("type", int64(v.GetType())),
	)
}

func (s *FederationService) logvalue_User_GetUsersRequest(v *user.GetUsersRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.GetIds()),
	)
}

func (s *FederationService) logvalue_repeated_Federation_Item(v []*Item) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(idx),
			Value: s.logvalue_Federation_Item(vv),
		})
	}
	return slog.GroupValue(attrs...)
}
