// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
// versions:
//
//	protoc-gen-grpc-federation: dev
//
// source: federation/federation.proto
package federation

import (
	"context"
	"io"
	"log/slog"
	"reflect"

	grpcfed "github.com/mercari/grpc-federation/grpc/federation"
	grpcfedcel "github.com/mercari/grpc-federation/grpc/federation/cel"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"
	"google.golang.org/protobuf/types/known/anypb"
	"google.golang.org/protobuf/types/known/timestamppb"

	post "example/post"
	user "example/user"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

var (
	_ = reflect.Invalid // to avoid "imported and not used error"
)

// Federation_AArgument is argument for "federation.A" message.
type Federation_AArgument struct {
	B *A_B
}

// Federation_A_BArgument is argument for "federation.B" message.
type Federation_A_BArgument struct {
	Bar *A_B_C
	Foo *A_B_C
}

// Federation_A_B_CArgument is argument for "federation.C" message.
type Federation_A_B_CArgument struct {
	Type string
}

// Federation_GetPostResponseArgument is argument for "federation.GetPostResponse" message.
type Federation_GetPostResponseArgument struct {
	A            *A
	Date         *timestamppb.Timestamp
	FixedRand    *grpcfedcel.Rand
	Id           string
	Loc          *grpcfedcel.Location
	MapValue     map[int64]string
	NullValue    any
	Post         *Post
	RandSource   *grpcfedcel.Source
	SortedItems  []*user.Item
	SortedValues []int64
	Uuid         *grpcfedcel.UUID
	Value1       string
}

// Federation_ItemArgument is argument for "federation.Item" message.
type Federation_ItemArgument struct {
}

// Federation_Item_LocationArgument is argument for "federation.Location" message.
type Federation_Item_LocationArgument struct {
}

// Federation_Item_Location_AddrAArgument is argument for "federation.AddrA" message.
type Federation_Item_Location_AddrAArgument struct {
}

// Federation_Item_Location_AddrBArgument is argument for "federation.AddrB" message.
type Federation_Item_Location_AddrBArgument struct {
}

// Federation_PostArgument is argument for "federation.Post" message.
type Federation_PostArgument struct {
	Id   string
	Post *post.Post
	Res  *post.GetPostResponse
	User *User
}

// Federation_UserArgument is argument for "federation.User" message.
type Federation_UserArgument struct {
	Content string
	Id      string
	Res     *user.GetUserResponse
	Title   string
	User    *user.User
	UserId  string
}

// Federation_User_AttrAArgument is argument for "federation.AttrA" message.
type Federation_User_AttrAArgument struct {
}

// Federation_User_AttrBArgument is argument for "federation.AttrB" message.
type Federation_User_AttrBArgument struct {
}

// FederationServiceConfig configuration required to initialize the service that use GRPC Federation.
type FederationServiceConfig struct {
	// Client provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
	// If this interface is not provided, an error is returned during initialization.
	Client FederationServiceClientFactory // required
	// ErrorHandler Federation Service often needs to convert errors received from downstream services.
	// If an error occurs during method execution in the Federation Service, this error handler is called and the returned error is treated as a final error.
	ErrorHandler grpcfed.ErrorHandler
	// Logger sets the logger used to output Debug/Info/Error information.
	Logger *slog.Logger
}

// FederationServiceClientFactory provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
type FederationServiceClientFactory interface {
	// Post_PostServiceClient create a gRPC Client to be used to call methods in post.PostService.
	Post_PostServiceClient(FederationServiceClientConfig) (post.PostServiceClient, error)
	// User_UserServiceClient create a gRPC Client to be used to call methods in user.UserService.
	User_UserServiceClient(FederationServiceClientConfig) (user.UserServiceClient, error)
}

// FederationServiceClientConfig helper to create gRPC client.
// Hints for creating a gRPC Client.
type FederationServiceClientConfig struct {
	// Service FQDN ( `<package-name>.<service-name>` ) of the service on Protocol Buffers.
	Service string
}

// FederationServiceDependentClientSet has a gRPC client for all services on which the federation service depends.
// This is provided as an argument when implementing the custom resolver.
type FederationServiceDependentClientSet struct {
	Post_PostServiceClient post.PostServiceClient
	User_UserServiceClient user.UserServiceClient
}

// FederationServiceResolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
type FederationServiceResolver interface {
}

// FederationServiceCELPluginWasmConfig type alias for grpcfedcel.WasmConfig.
type FederationServiceCELPluginWasmConfig = grpcfedcel.WasmConfig

// FederationServiceCELPluginConfig hints for loading a WebAssembly based plugin.
type FederationServiceCELPluginConfig struct {
}

// FederationServiceUnimplementedResolver a structure implemented to satisfy the Resolver interface.
// An Unimplemented error is always returned.
// This is intended for use when there are many Resolver interfaces that do not need to be implemented,
// by embedding them in a resolver structure that you have created.
type FederationServiceUnimplementedResolver struct{}

const (
	FederationService_DependentMethod_Post_PostService_GetPost = "/post.PostService/GetPost"
	FederationService_DependentMethod_User_UserService_GetUser = "/user.UserService/GetUser"
)

// FederationService represents Federation Service.
type FederationService struct {
	*UnimplementedFederationServiceServer
	cfg           FederationServiceConfig
	logger        *slog.Logger
	errorHandler  grpcfed.ErrorHandler
	celCacheMap   *grpcfed.CELCacheMap
	tracer        trace.Tracer
	celTypeHelper *grpcfed.CELTypeHelper
	celEnvOpts    []grpcfed.CELEnvOption
	celPlugins    []*grpcfedcel.CELPlugin
	client        *FederationServiceDependentClientSet
}

// NewFederationService creates FederationService instance by FederationServiceConfig.
func NewFederationService(cfg FederationServiceConfig) (*FederationService, error) {
	if cfg.Client == nil {
		return nil, grpcfed.ErrClientConfig
	}
	Post_PostServiceClient, err := cfg.Client.Post_PostServiceClient(FederationServiceClientConfig{
		Service: "post.PostService",
	})
	if err != nil {
		return nil, err
	}
	User_UserServiceClient, err := cfg.Client.User_UserServiceClient(FederationServiceClientConfig{
		Service: "user.UserService",
	})
	if err != nil {
		return nil, err
	}
	logger := cfg.Logger
	if logger == nil {
		logger = slog.New(slog.NewJSONHandler(io.Discard, nil))
	}
	errorHandler := cfg.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(ctx context.Context, methodName string, err error) error { return err }
	}
	celTypeHelperFieldMap := grpcfed.CELTypeHelperFieldMap{
		"grpc.federation.private.AArgument":   {},
		"grpc.federation.private.A_BArgument": {},
		"grpc.federation.private.A_B_CArgument": {
			"type": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Type"),
		},
		"grpc.federation.private.GetPostResponseArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Id"),
		},
		"grpc.federation.private.PostArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Id"),
		},
		"grpc.federation.private.UserArgument": {
			"id":      grpcfed.NewCELFieldType(grpcfed.CELStringType, "Id"),
			"title":   grpcfed.NewCELFieldType(grpcfed.CELStringType, "Title"),
			"content": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Content"),
			"user_id": grpcfed.NewCELFieldType(grpcfed.CELStringType, "UserId"),
		},
	}
	celTypeHelper := grpcfed.NewCELTypeHelper(celTypeHelperFieldMap)
	var celEnvOpts []grpcfed.CELEnvOption
	celEnvOpts = append(celEnvOpts, grpcfed.NewDefaultEnvOptions(celTypeHelper)...)
	celEnvOpts = append(celEnvOpts, grpcfed.EnumAccessorOptions("federation.Item.ItemType", Item_ItemType_value, Item_ItemType_name)...)
	celEnvOpts = append(celEnvOpts, grpcfed.EnumAccessorOptions("federation.Item.Location.LocationType", Item_Location_LocationType_value, Item_Location_LocationType_name)...)
	celEnvOpts = append(celEnvOpts, grpcfed.EnumAccessorOptions("user.Item.ItemType", user.Item_ItemType_value, user.Item_ItemType_name)...)
	return &FederationService{
		cfg:           cfg,
		logger:        logger,
		errorHandler:  errorHandler,
		celEnvOpts:    celEnvOpts,
		celTypeHelper: celTypeHelper,
		celCacheMap:   grpcfed.NewCELCacheMap(),
		tracer:        otel.Tracer("federation.FederationService"),
		client: &FederationServiceDependentClientSet{
			Post_PostServiceClient: Post_PostServiceClient,
			User_UserServiceClient: User_UserServiceClient,
		},
	}, nil
}

// GetPost implements "federation.FederationService/GetPost" method.
func (s *FederationService) GetPost(ctx context.Context, req *GetPostRequest) (res *GetPostResponse, e error) {
	ctx, span := s.tracer.Start(ctx, "federation.FederationService/GetPost")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, grpcfed.StackTrace())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()
	res, err := s.resolve_Federation_GetPostResponse(ctx, &Federation_GetPostResponseArgument{
		Id: req.GetId(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// resolve_Federation_A resolve "federation.A" message.
func (s *FederationService) resolve_Federation_A(ctx context.Context, req *Federation_AArgument) (*A, error) {
	ctx, span := s.tracer.Start(ctx, "federation.A")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve federation.A", slog.Any("message_args", s.logvalue_Federation_AArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			b *A_B
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.AArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "b"
	     message {
	       name: "B"
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*A_B, *localValueType]{
		Name: `b`,
		Type: grpcfed.CELObjectType("federation.A.B"),
		Setter: func(value *localValueType, v *A_B) error {
			value.vars.b = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &Federation_A_BArgument{}
			return s.resolve_Federation_A_B(ctx, args)
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.B = value.vars.b

	// create a message value to be returned.
	ret := &A{}

	// field binding section.
	// (grpc.federation.field).by = "b"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*A_B]{
		Value:             value,
		Expr:              `b`,
		UseContextLibrary: false,
		CacheIndex:        1,
		Setter: func(v *A_B) error {
			ret.B = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved federation.A", slog.Any("federation.A", s.logvalue_Federation_A(ret)))
	return ret, nil
}

// resolve_Federation_A_B resolve "federation.A.B" message.
func (s *FederationService) resolve_Federation_A_B(ctx context.Context, req *Federation_A_BArgument) (*A_B, error) {
	ctx, span := s.tracer.Start(ctx, "federation.A.B")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve federation.A.B", slog.Any("message_args", s.logvalue_Federation_A_BArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			_def2 bool
			_def3 bool
			bar   *A_B_C
			foo   *A_B_C
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.A_BArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()
	// A tree view of message dependencies is shown below.
	/*
	   bar ─┐
	   foo ─┤
	        _def2 ─┐
	   bar ─┐      │
	   foo ─┤      │
	        _def3 ─┤
	*/
	eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)

	grpcfed.GoWithRecover(eg, func() (any, error) {
		eg, ctx2 := grpcfed.ErrorGroupWithContext(ctx1)
		grpcfed.GoWithRecover(eg, func() (any, error) {

			// This section's codes are generated by the following proto definition.
			/*
			   def {
			     name: "bar"
			     message {
			       name: "C"
			       args { name: "type", by: "'bar'" }
			     }
			   }
			*/
			if err := grpcfed.EvalDef(ctx2, value, grpcfed.Def[*A_B_C, *localValueType]{
				Name: `bar`,
				Type: grpcfed.CELObjectType("federation.A.B.C"),
				Setter: func(value *localValueType, v *A_B_C) error {
					value.vars.bar = v
					return nil
				},
				Message: func(ctx context.Context, value *localValueType) (any, error) {
					args := &Federation_A_B_CArgument{}
					// { name: "type", by: "'bar'" }
					if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
						Value:             value,
						Expr:              `'bar'`,
						UseContextLibrary: false,
						CacheIndex:        2,
						Setter: func(v string) error {
							args.Type = v
							return nil
						},
					}); err != nil {
						return nil, err
					}
					return s.resolve_Federation_A_B_C(ctx, args)
				},
			}); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			return nil, nil
		})
		grpcfed.GoWithRecover(eg, func() (any, error) {

			// This section's codes are generated by the following proto definition.
			/*
			   def {
			     name: "foo"
			     message {
			       name: "C"
			       args { name: "type", by: "'foo'" }
			     }
			   }
			*/
			if err := grpcfed.EvalDef(ctx2, value, grpcfed.Def[*A_B_C, *localValueType]{
				Name: `foo`,
				Type: grpcfed.CELObjectType("federation.A.B.C"),
				Setter: func(value *localValueType, v *A_B_C) error {
					value.vars.foo = v
					return nil
				},
				Message: func(ctx context.Context, value *localValueType) (any, error) {
					args := &Federation_A_B_CArgument{}
					// { name: "type", by: "'foo'" }
					if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
						Value:             value,
						Expr:              `'foo'`,
						UseContextLibrary: false,
						CacheIndex:        3,
						Setter: func(v string) error {
							args.Type = v
							return nil
						},
					}); err != nil {
						return nil, err
					}
					return s.resolve_Federation_A_B_C(ctx, args)
				},
			}); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			return nil, nil
		})
		if err := eg.Wait(); err != nil {
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "_def2"
		     if: "foo.type == 'foo'"
		     by: "grpc.federation.log.info('output federation log', {'messages': [foo, bar], 'message_map': {'foo': foo, 'bar': bar}})"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[bool, *localValueType]{
			If:                  `foo.type == 'foo'`,
			IfUseContextLibrary: false,
			IfCacheIndex:        4,
			Name:                `_def2`,
			Type:                grpcfed.CELBoolType,
			Setter: func(value *localValueType, v bool) error {
				value.vars._def2 = v
				return nil
			},
			By:                  `grpc.federation.log.info('output federation log', {'messages': [foo, bar], 'message_map': {'foo': foo, 'bar': bar}})`,
			ByUseContextLibrary: true,
			ByCacheIndex:        5,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		eg, ctx2 := grpcfed.ErrorGroupWithContext(ctx1)
		grpcfed.GoWithRecover(eg, func() (any, error) {

			// This section's codes are generated by the following proto definition.
			/*
			   def {
			     name: "bar"
			     message {
			       name: "C"
			       args { name: "type", by: "'bar'" }
			     }
			   }
			*/
			if err := grpcfed.EvalDef(ctx2, value, grpcfed.Def[*A_B_C, *localValueType]{
				Name: `bar`,
				Type: grpcfed.CELObjectType("federation.A.B.C"),
				Setter: func(value *localValueType, v *A_B_C) error {
					value.vars.bar = v
					return nil
				},
				Message: func(ctx context.Context, value *localValueType) (any, error) {
					args := &Federation_A_B_CArgument{}
					// { name: "type", by: "'bar'" }
					if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
						Value:             value,
						Expr:              `'bar'`,
						UseContextLibrary: false,
						CacheIndex:        6,
						Setter: func(v string) error {
							args.Type = v
							return nil
						},
					}); err != nil {
						return nil, err
					}
					return s.resolve_Federation_A_B_C(ctx, args)
				},
			}); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			return nil, nil
		})
		grpcfed.GoWithRecover(eg, func() (any, error) {

			// This section's codes are generated by the following proto definition.
			/*
			   def {
			     name: "foo"
			     message {
			       name: "C"
			       args { name: "type", by: "'foo'" }
			     }
			   }
			*/
			if err := grpcfed.EvalDef(ctx2, value, grpcfed.Def[*A_B_C, *localValueType]{
				Name: `foo`,
				Type: grpcfed.CELObjectType("federation.A.B.C"),
				Setter: func(value *localValueType, v *A_B_C) error {
					value.vars.foo = v
					return nil
				},
				Message: func(ctx context.Context, value *localValueType) (any, error) {
					args := &Federation_A_B_CArgument{}
					// { name: "type", by: "'foo'" }
					if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
						Value:             value,
						Expr:              `'foo'`,
						UseContextLibrary: false,
						CacheIndex:        7,
						Setter: func(v string) error {
							args.Type = v
							return nil
						},
					}); err != nil {
						return nil, err
					}
					return s.resolve_Federation_A_B_C(ctx, args)
				},
			}); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			return nil, nil
		})
		if err := eg.Wait(); err != nil {
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "_def3"
		     by: "grpc.federation.log.add({'foo_type': foo.type, 'bar_type': bar.type})"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[bool, *localValueType]{
			Name: `_def3`,
			Type: grpcfed.CELBoolType,
			Setter: func(value *localValueType, v bool) error {
				value.vars._def3 = v
				return nil
			},
			By:                  `grpc.federation.log.add({'foo_type': foo.type, 'bar_type': bar.type})`,
			ByUseContextLibrary: true,
			ByCacheIndex:        8,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	if err := eg.Wait(); err != nil {
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Bar = value.vars.bar
	req.Foo = value.vars.foo

	// create a message value to be returned.
	ret := &A_B{}

	// field binding section.
	// (grpc.federation.field).by = "foo"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*A_B_C]{
		Value:             value,
		Expr:              `foo`,
		UseContextLibrary: false,
		CacheIndex:        9,
		Setter: func(v *A_B_C) error {
			ret.Foo = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "bar"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*A_B_C]{
		Value:             value,
		Expr:              `bar`,
		UseContextLibrary: false,
		CacheIndex:        10,
		Setter: func(v *A_B_C) error {
			ret.Bar = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved federation.A.B", slog.Any("federation.A.B", s.logvalue_Federation_A_B(ret)))
	return ret, nil
}

// resolve_Federation_A_B_C resolve "federation.A.B.C" message.
func (s *FederationService) resolve_Federation_A_B_C(ctx context.Context, req *Federation_A_B_CArgument) (*A_B_C, error) {
	ctx, span := s.tracer.Start(ctx, "federation.A.B.C")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve federation.A.B.C", slog.Any("message_args", s.logvalue_Federation_A_B_CArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.A_B_CArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// create a message value to be returned.
	ret := &A_B_C{}

	// field binding section.
	// (grpc.federation.field).by = "$.type"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `$.type`,
		UseContextLibrary: false,
		CacheIndex:        11,
		Setter: func(v string) error {
			ret.Type = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved federation.A.B.C", slog.Any("federation.A.B.C", s.logvalue_Federation_A_B_C(ret)))
	return ret, nil
}

// resolve_Federation_GetPostResponse resolve "federation.GetPostResponse" message.
func (s *FederationService) resolve_Federation_GetPostResponse(ctx context.Context, req *Federation_GetPostResponseArgument) (*GetPostResponse, error) {
	ctx, span := s.tracer.Start(ctx, "federation.GetPostResponse")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve federation.GetPostResponse", slog.Any("message_args", s.logvalue_Federation_GetPostResponseArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			_def12        bool
			a             *A
			date          *timestamppb.Timestamp
			fixed_rand    *grpcfedcel.Rand
			loc           *grpcfedcel.Location
			map_value     map[int64]string
			null_value    any
			post          *Post
			rand_source   *grpcfedcel.Source
			sorted_items  []*user.Item
			sorted_values []int64
			uuid          *grpcfedcel.UUID
			value1        string
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.GetPostResponseArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()
	// A tree view of message dependencies is shown below.
	/*
	                            post ─┐
	                                         _def12 ─┐
	                                              a ─┤
	                                            loc ─┤
	                                      map_value ─┤
	                                     null_value ─┤
	                                   sorted_items ─┤
	                                  sorted_values ─┤
	   date ─┐                                       │
	         rand_source ─┐                          │
	                      fixed_rand ─┐              │
	                                           uuid ─┤
	                                         value1 ─┤
	*/
	eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "post"
		     message {
		       name: "Post"
		       args { name: "id", by: "$.id" }
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*Post, *localValueType]{
			Name: `post`,
			Type: grpcfed.CELObjectType("federation.Post"),
			Setter: func(value *localValueType, v *Post) error {
				value.vars.post = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Federation_PostArgument{}
				// { name: "id", by: "$.id" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:             value,
					Expr:              `$.id`,
					UseContextLibrary: false,
					CacheIndex:        12,
					Setter: func(v string) error {
						args.Id = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				return s.resolve_Federation_Post(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "_def12"
		     by: "grpc.federation.log.info('output federation log', {'post_message': post})"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[bool, *localValueType]{
			Name: `_def12`,
			Type: grpcfed.CELBoolType,
			Setter: func(value *localValueType, v bool) error {
				value.vars._def12 = v
				return nil
			},
			By:                  `grpc.federation.log.info('output federation log', {'post_message': post})`,
			ByUseContextLibrary: true,
			ByCacheIndex:        13,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "a"
		     message {
		       name: "A"
		     }
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*A, *localValueType]{
			Name: `a`,
			Type: grpcfed.CELObjectType("federation.A"),
			Setter: func(value *localValueType, v *A) error {
				value.vars.a = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &Federation_AArgument{}
				return s.resolve_Federation_A(ctx, args)
			},
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "loc"
		     by: "grpc.federation.time.loadLocation('Asia/Tokyo')"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*grpcfedcel.Location, *localValueType]{
			Name: `loc`,
			Type: grpcfed.CELObjectType("grpc.federation.time.Location"),
			Setter: func(value *localValueType, v *grpcfedcel.Location) error {
				value.vars.loc = v
				return nil
			},
			By:                  `grpc.federation.time.loadLocation('Asia/Tokyo')`,
			ByUseContextLibrary: false,
			ByCacheIndex:        14,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "map_value"
		     by: "{1: 'a', 2: 'b', 3: 'c'}"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[map[int64]string, *localValueType]{
			Name: `map_value`,
			Type: grpcfed.CELMapType(grpcfed.CELIntType, grpcfed.CELStringType),
			Setter: func(value *localValueType, v map[int64]string) error {
				value.vars.map_value = v
				return nil
			},
			By:                  `{1: 'a', 2: 'b', 3: 'c'}`,
			ByUseContextLibrary: false,
			ByCacheIndex:        15,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "null_value"
		     by: "null"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[any, *localValueType]{
			Name: `null_value`,
			Type: grpcfed.CELNullType,
			Setter: func(value *localValueType, v any) error {
				value.vars.null_value = v
				return nil
			},
			By:                  `null`,
			ByUseContextLibrary: false,
			ByCacheIndex:        16,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "sorted_items"
		     by: "[user.Item{location:user.Item.Location{addr1:'a'}}, user.Item{location:user.Item.Location{addr1:'b'}}].sortDesc(v, v.location.addr1)"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[[]*user.Item, *localValueType]{
			Name: `sorted_items`,
			Type: grpcfed.CELListType(grpcfed.CELObjectType("user.Item")),
			Setter: func(value *localValueType, v []*user.Item) error {
				value.vars.sorted_items = v
				return nil
			},
			By:                  `[user.Item{location:user.Item.Location{addr1:'a'}}, user.Item{location:user.Item.Location{addr1:'b'}}].sortDesc(v, v.location.addr1)`,
			ByUseContextLibrary: false,
			ByCacheIndex:        17,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "sorted_values"
		     by: "[4, 1, 3, 2].sortAsc(v, v)"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[[]int64, *localValueType]{
			Name: `sorted_values`,
			Type: grpcfed.CELListType(grpcfed.CELIntType),
			Setter: func(value *localValueType, v []int64) error {
				value.vars.sorted_values = v
				return nil
			},
			By:                  `[4, 1, 3, 2].sortAsc(v, v)`,
			ByUseContextLibrary: false,
			ByCacheIndex:        18,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "date"
		     by: "grpc.federation.time.date(2023, 12, 25, 12, 10, 5, 0, grpc.federation.time.UTC())"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*timestamppb.Timestamp, *localValueType]{
			Name: `date`,
			Type: grpcfed.CELObjectType("google.protobuf.Timestamp"),
			Setter: func(value *localValueType, v *timestamppb.Timestamp) error {
				value.vars.date = v
				return nil
			},
			By:                  `grpc.federation.time.date(2023, 12, 25, 12, 10, 5, 0, grpc.federation.time.UTC())`,
			ByUseContextLibrary: false,
			ByCacheIndex:        19,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "rand_source"
		     by: "grpc.federation.rand.newSource(date.unix())"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*grpcfedcel.Source, *localValueType]{
			Name: `rand_source`,
			Type: grpcfed.CELObjectType("grpc.federation.rand.Source"),
			Setter: func(value *localValueType, v *grpcfedcel.Source) error {
				value.vars.rand_source = v
				return nil
			},
			By:                  `grpc.federation.rand.newSource(date.unix())`,
			ByUseContextLibrary: false,
			ByCacheIndex:        20,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "fixed_rand"
		     by: "grpc.federation.rand.new(rand_source)"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*grpcfedcel.Rand, *localValueType]{
			Name: `fixed_rand`,
			Type: grpcfed.CELObjectType("grpc.federation.rand.Rand"),
			Setter: func(value *localValueType, v *grpcfedcel.Rand) error {
				value.vars.fixed_rand = v
				return nil
			},
			By:                  `grpc.federation.rand.new(rand_source)`,
			ByUseContextLibrary: false,
			ByCacheIndex:        21,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "uuid"
		     by: ".grpc.federation.uuid.newRandomFromRand(fixed_rand)"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[*grpcfedcel.UUID, *localValueType]{
			Name: `uuid`,
			Type: grpcfed.CELObjectType("grpc.federation.uuid.UUID"),
			Setter: func(value *localValueType, v *grpcfedcel.UUID) error {
				value.vars.uuid = v
				return nil
			},
			By:                  `.grpc.federation.uuid.newRandomFromRand(fixed_rand)`,
			ByUseContextLibrary: false,
			ByCacheIndex:        22,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {

		// This section's codes are generated by the following proto definition.
		/*
		   def {
		     name: "value1"
		     by: "grpc.federation.metadata.incoming()['key1'][0]"
		   }
		*/
		if err := grpcfed.EvalDef(ctx1, value, grpcfed.Def[string, *localValueType]{
			Name: `value1`,
			Type: grpcfed.CELStringType,
			Setter: func(value *localValueType, v string) error {
				value.vars.value1 = v
				return nil
			},
			By:                  `grpc.federation.metadata.incoming()['key1'][0]`,
			ByUseContextLibrary: true,
			ByCacheIndex:        23,
		}); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	if err := eg.Wait(); err != nil {
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.A = value.vars.a
	req.Date = value.vars.date
	req.FixedRand = value.vars.fixed_rand
	req.Loc = value.vars.loc
	req.MapValue = value.vars.map_value
	req.NullValue = value.vars.null_value
	req.Post = value.vars.post
	req.RandSource = value.vars.rand_source
	req.SortedItems = value.vars.sorted_items
	req.SortedValues = value.vars.sorted_values
	req.Uuid = value.vars.uuid
	req.Value1 = value.vars.value1

	// create a message value to be returned.
	ret := &GetPostResponse{}

	// field binding section.
	// (grpc.federation.field).by = "post"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*Post]{
		Value:             value,
		Expr:              `post`,
		UseContextLibrary: false,
		CacheIndex:        24,
		Setter: func(v *Post) error {
			ret.Post = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "'hello'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `'hello'`,
		UseContextLibrary: false,
		CacheIndex:        25,
		Setter: func(v string) error {
			ret.Str = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "uuid.string()"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `uuid.string()`,
		UseContextLibrary: false,
		CacheIndex:        26,
		Setter: func(v string) error {
			ret.Uuid = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "loc.string()"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `loc.string()`,
		UseContextLibrary: false,
		CacheIndex:        27,
		Setter: func(v string) error {
			ret.Loc = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "value1"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `value1`,
		UseContextLibrary: false,
		CacheIndex:        28,
		Setter: func(v string) error {
			ret.Value1 = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "federation.Item.ItemType.name(federation.Item.ItemType.ITEM_TYPE_1)"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `federation.Item.ItemType.name(federation.Item.ItemType.ITEM_TYPE_1)`,
		UseContextLibrary: false,
		CacheIndex:        29,
		Setter: func(v string) error {
			ret.ItemTypeName = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "federation.Item.Location.LocationType.name(federation.Item.Location.LocationType.LOCATION_TYPE_1)"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `federation.Item.Location.LocationType.name(federation.Item.Location.LocationType.LOCATION_TYPE_1)`,
		UseContextLibrary: false,
		CacheIndex:        30,
		Setter: func(v string) error {
			ret.LocationTypeName = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "user.Item.ItemType.name(user.Item.ItemType.ITEM_TYPE_2)"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `user.Item.ItemType.name(user.Item.ItemType.ITEM_TYPE_2)`,
		UseContextLibrary: false,
		CacheIndex:        31,
		Setter: func(v string) error {
			ret.UserItemTypeName = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "user.Item.ItemType.value('ITEM_TYPE_1')"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[user.Item_ItemType]{
		Value:             value,
		Expr:              `user.Item.ItemType.value('ITEM_TYPE_1')`,
		UseContextLibrary: false,
		CacheIndex:        32,
		Setter: func(v user.Item_ItemType) error {
			itemTypeValueEnumValue, err := s.cast_User_Item_ItemType__to__Federation_Item_ItemType(v)
			if err != nil {
				return err
			}
			ret.ItemTypeValueEnum = itemTypeValueEnumValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "user.Item.ItemType.value('ITEM_TYPE_1')"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[user.Item_ItemType]{
		Value:             value,
		Expr:              `user.Item.ItemType.value('ITEM_TYPE_1')`,
		UseContextLibrary: false,
		CacheIndex:        33,
		Setter: func(v user.Item_ItemType) error {
			itemTypeValueIntValue, err := s.cast_User_Item_ItemType__to__int32(v)
			if err != nil {
				return err
			}
			ret.ItemTypeValueInt = itemTypeValueIntValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "1"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[Item_ItemType]{
		Value:             value,
		Expr:              `1`,
		UseContextLibrary: false,
		CacheIndex:        34,
		Setter: func(v Item_ItemType) error {
			ret.ItemTypeValueCast = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "federation.Item.Location.LocationType.value('LOCATION_TYPE_1')"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[Item_Location_LocationType]{
		Value:             value,
		Expr:              `federation.Item.Location.LocationType.value('LOCATION_TYPE_1')`,
		UseContextLibrary: false,
		CacheIndex:        35,
		Setter: func(v Item_Location_LocationType) error {
			locationTypeValueValue, err := s.cast_Federation_Item_Location_LocationType__to__int32(v)
			if err != nil {
				return err
			}
			ret.LocationTypeValue = locationTypeValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "user.Item.ItemType.value('ITEM_TYPE_2')"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[user.Item_ItemType]{
		Value:             value,
		Expr:              `user.Item.ItemType.value('ITEM_TYPE_2')`,
		UseContextLibrary: false,
		CacheIndex:        36,
		Setter: func(v user.Item_ItemType) error {
			userItemTypeValueValue, err := s.cast_User_Item_ItemType__to__int32(v)
			if err != nil {
				return err
			}
			ret.UserItemTypeValue = userItemTypeValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "a"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*A]{
		Value:             value,
		Expr:              `a`,
		UseContextLibrary: false,
		CacheIndex:        37,
		Setter: func(v *A) error {
			ret.A = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "sorted_values"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]int32]{
		Value:             value,
		Expr:              `sorted_values`,
		UseContextLibrary: false,
		CacheIndex:        38,
		Setter: func(v []int32) error {
			ret.SortedValues = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "sorted_items"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[[]*user.Item]{
		Value:             value,
		Expr:              `sorted_items`,
		UseContextLibrary: false,
		CacheIndex:        39,
		Setter: func(v []*user.Item) error {
			sortedItemsValue, err := s.cast_repeated_User_Item__to__repeated_Federation_Item(v)
			if err != nil {
				return err
			}
			ret.SortedItems = sortedItemsValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "map_value"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[map[int64]string]{
		Value:             value,
		Expr:              `map_value`,
		UseContextLibrary: false,
		CacheIndex:        40,
		Setter: func(v map[int64]string) error {
			mapValueValue, err := s.cast_map_int64_string__to__map_int32_string(v)
			if err != nil {
				return err
			}
			ret.MapValue = mapValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.DoubleValue{value: 1.23}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.DoubleValue]{
		Value:             value,
		Expr:              `google.protobuf.DoubleValue{value: 1.23}`,
		UseContextLibrary: false,
		CacheIndex:        41,
		Setter: func(v *wrapperspb.DoubleValue) error {
			doubleWrapperValueValue, err := s.cast_Google_Protobuf_DoubleValue__to__Google_Protobuf_DoubleValue(v)
			if err != nil {
				return err
			}
			ret.DoubleWrapperValue = doubleWrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.FloatValue{value: 3.45}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.DoubleValue]{
		Value:             value,
		Expr:              `google.protobuf.FloatValue{value: 3.45}`,
		UseContextLibrary: false,
		CacheIndex:        42,
		Setter: func(v *wrapperspb.DoubleValue) error {
			floatWrapperValueValue, err := s.cast_Google_Protobuf_DoubleValue__to__Google_Protobuf_FloatValue(v)
			if err != nil {
				return err
			}
			ret.FloatWrapperValue = floatWrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.Int64Value{value: 1}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.Int64Value]{
		Value:             value,
		Expr:              `google.protobuf.Int64Value{value: 1}`,
		UseContextLibrary: false,
		CacheIndex:        43,
		Setter: func(v *wrapperspb.Int64Value) error {
			i64WrapperValueValue, err := s.cast_Google_Protobuf_Int64Value__to__Google_Protobuf_Int64Value(v)
			if err != nil {
				return err
			}
			ret.I64WrapperValue = i64WrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.UInt64Value{value: uint(2)}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.UInt64Value]{
		Value:             value,
		Expr:              `google.protobuf.UInt64Value{value: uint(2)}`,
		UseContextLibrary: false,
		CacheIndex:        44,
		Setter: func(v *wrapperspb.UInt64Value) error {
			u64WrapperValueValue, err := s.cast_Google_Protobuf_UInt64Value__to__Google_Protobuf_UInt64Value(v)
			if err != nil {
				return err
			}
			ret.U64WrapperValue = u64WrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.Int32Value{value: 3}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.Int64Value]{
		Value:             value,
		Expr:              `google.protobuf.Int32Value{value: 3}`,
		UseContextLibrary: false,
		CacheIndex:        45,
		Setter: func(v *wrapperspb.Int64Value) error {
			i32WrapperValueValue, err := s.cast_Google_Protobuf_Int64Value__to__Google_Protobuf_Int32Value(v)
			if err != nil {
				return err
			}
			ret.I32WrapperValue = i32WrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.UInt32Value{value: uint(4)}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.UInt64Value]{
		Value:             value,
		Expr:              `google.protobuf.UInt32Value{value: uint(4)}`,
		UseContextLibrary: false,
		CacheIndex:        46,
		Setter: func(v *wrapperspb.UInt64Value) error {
			u32WrapperValueValue, err := s.cast_Google_Protobuf_UInt64Value__to__Google_Protobuf_UInt32Value(v)
			if err != nil {
				return err
			}
			ret.U32WrapperValue = u32WrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.BoolValue{value: true}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.BoolValue]{
		Value:             value,
		Expr:              `google.protobuf.BoolValue{value: true}`,
		UseContextLibrary: false,
		CacheIndex:        47,
		Setter: func(v *wrapperspb.BoolValue) error {
			boolWrapperValueValue, err := s.cast_Google_Protobuf_BoolValue__to__Google_Protobuf_BoolValue(v)
			if err != nil {
				return err
			}
			ret.BoolWrapperValue = boolWrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.StringValue{value: 'hello'}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.StringValue]{
		Value:             value,
		Expr:              `google.protobuf.StringValue{value: 'hello'}`,
		UseContextLibrary: false,
		CacheIndex:        48,
		Setter: func(v *wrapperspb.StringValue) error {
			stringWrapperValueValue, err := s.cast_Google_Protobuf_StringValue__to__Google_Protobuf_StringValue(v)
			if err != nil {
				return err
			}
			ret.StringWrapperValue = stringWrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "google.protobuf.BytesValue{value: bytes('world')}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*wrapperspb.BytesValue]{
		Value:             value,
		Expr:              `google.protobuf.BytesValue{value: bytes('world')}`,
		UseContextLibrary: false,
		CacheIndex:        49,
		Setter: func(v *wrapperspb.BytesValue) error {
			bytesWrapperValueValue, err := s.cast_Google_Protobuf_BytesValue__to__Google_Protobuf_BytesValue(v)
			if err != nil {
				return err
			}
			ret.BytesWrapperValue = bytesWrapperValueValue
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "'hello\\nworld'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:             value,
		Expr:              `'hello\nworld'`,
		UseContextLibrary: false,
		CacheIndex:        50,
		Setter: func(v string) error {
			ret.Hello = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "null"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*timestamppb.Timestamp]{
		Value:             value,
		Expr:              `null`,
		UseContextLibrary: false,
		CacheIndex:        51,
		Setter: func(v *timestamppb.Timestamp) error {
			ret.NullTimestamp = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "null_value"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*timestamppb.Timestamp]{
		Value:             value,
		Expr:              `null_value`,
		UseContextLibrary: false,
		CacheIndex:        52,
		Setter: func(v *timestamppb.Timestamp) error {
			ret.NullTimestamp2 = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "true ? null : google.protobuf.Timestamp{}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*timestamppb.Timestamp]{
		Value:             value,
		Expr:              `true ? null : google.protobuf.Timestamp{}`,
		UseContextLibrary: false,
		CacheIndex:        53,
		Setter: func(v *timestamppb.Timestamp) error {
			ret.NullTimestamp3 = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved federation.GetPostResponse", slog.Any("federation.GetPostResponse", s.logvalue_Federation_GetPostResponse(ret)))
	return ret, nil
}

// resolve_Federation_Post resolve "federation.Post" message.
func (s *FederationService) resolve_Federation_Post(ctx context.Context, req *Federation_PostArgument) (*Post, error) {
	ctx, span := s.tracer.Start(ctx, "federation.Post")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve federation.Post", slog.Any("message_args", s.logvalue_Federation_PostArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			post *post.Post
			res  *post.GetPostResponse
			user *User
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.PostArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "res"
	     call {
	       method: "post.PostService/GetPost"
	       request { field: "id", by: "$.id" }
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*post.GetPostResponse, *localValueType]{
		Name: `res`,
		Type: grpcfed.CELObjectType("post.GetPostResponse"),
		Setter: func(value *localValueType, v *post.GetPostResponse) error {
			value.vars.res = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &post.GetPostRequest{}
			// { field: "id", by: "$.id" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
				Value:             value,
				Expr:              `$.id`,
				UseContextLibrary: false,
				CacheIndex:        54,
				Setter: func(v string) error {
					args.Id = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			grpcfed.Logger(ctx).DebugContext(ctx, "call post.PostService/GetPost", slog.Any("post.GetPostRequest", s.logvalue_Post_GetPostRequest(args)))
			return grpcfed.WithTimeout[post.GetPostResponse](ctx, "post.PostService/GetPost", 10000000000 /* 10s */, func(ctx context.Context) (*post.GetPostResponse, error) {
				b := grpcfed.NewConstantBackOff(2000000000) /* 2s */
				b = grpcfed.BackOffWithMaxRetries(b, 3)
				b = grpcfed.BackOffWithContext(b, ctx)
				return grpcfed.WithRetry(ctx, &grpcfed.RetryParam[post.GetPostResponse]{
					Value:             value,
					If:                `true`,
					UseContextLibrary: false,
					CacheIndex:        55,
					BackOff:           b,
					Body: func() (*post.GetPostResponse, error) {
						return s.client.Post_PostServiceClient.GetPost(ctx, args)
					},
				})
			})
		},
	}); err != nil {
		if err := s.errorHandler(ctx, FederationService_DependentMethod_Post_PostService_GetPost, err); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	}

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "post"
	     autobind: true
	     by: "res.post"
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*post.Post, *localValueType]{
		Name: `post`,
		Type: grpcfed.CELObjectType("post.Post"),
		Setter: func(value *localValueType, v *post.Post) error {
			value.vars.post = v
			return nil
		},
		By:                  `res.post`,
		ByUseContextLibrary: false,
		ByCacheIndex:        56,
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "user"
	     message {
	       name: "User"
	       args { inline: "post" }
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*User, *localValueType]{
		Name: `user`,
		Type: grpcfed.CELObjectType("federation.User"),
		Setter: func(value *localValueType, v *User) error {
			value.vars.user = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &Federation_UserArgument{}
			// { inline: "post" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*post.Post]{
				Value:             value,
				Expr:              `post`,
				UseContextLibrary: false,
				CacheIndex:        57,
				Setter: func(v *post.Post) error {
					args.Id = v.GetId()
					args.Title = v.GetTitle()
					args.Content = v.GetContent()
					args.UserId = v.GetUserId()
					return nil
				},
			}); err != nil {
				return nil, err
			}
			return s.resolve_Federation_User(ctx, args)
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Post = value.vars.post
	req.Res = value.vars.res
	req.User = value.vars.user

	// create a message value to be returned.
	ret := &Post{}

	// field binding section.
	ret.Id = value.vars.post.GetId()           // { name: "post", autobind: true }
	ret.Title = value.vars.post.GetTitle()     // { name: "post", autobind: true }
	ret.Content = value.vars.post.GetContent() // { name: "post", autobind: true }
	// (grpc.federation.field).by = "user"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*User]{
		Value:             value,
		Expr:              `user`,
		UseContextLibrary: false,
		CacheIndex:        58,
		Setter: func(v *User) error {
			ret.User = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved federation.Post", slog.Any("federation.Post", s.logvalue_Federation_Post(ret)))
	return ret, nil
}

// resolve_Federation_User resolve "federation.User" message.
func (s *FederationService) resolve_Federation_User(ctx context.Context, req *Federation_UserArgument) (*User, error) {
	ctx, span := s.tracer.Start(ctx, "federation.User")
	defer span.End()

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve federation.User", slog.Any("message_args", s.logvalue_Federation_UserArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			res  *user.GetUserResponse
			user *user.User
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celTypeHelper, s.celEnvOpts, s.celPlugins, "grpc.federation.private.UserArgument", req)}
	defer func() {
		if err := value.Close(ctx); err != nil {
			grpcfed.Logger(ctx).ErrorContext(ctx, err.Error())
		}
	}()

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "res"
	     call {
	       method: "user.UserService/GetUser"
	       request: [
	         { field: "id", by: "$.user_id" },
	         { field: "type", by: "user.Item.ItemType.value('ITEM_TYPE_1')" }
	       ]
	     }
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*user.GetUserResponse, *localValueType]{
		Name: `res`,
		Type: grpcfed.CELObjectType("user.GetUserResponse"),
		Setter: func(value *localValueType, v *user.GetUserResponse) error {
			value.vars.res = v
			return nil
		},
		Message: func(ctx context.Context, value *localValueType) (any, error) {
			args := &user.GetUserRequest{}
			// { field: "id", by: "$.user_id" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
				Value:             value,
				Expr:              `$.user_id`,
				UseContextLibrary: false,
				CacheIndex:        59,
				Setter: func(v string) error {
					args.Id = v
					return nil
				},
			}); err != nil {
				return nil, err
			}
			// { field: "type", by: "user.Item.ItemType.value('ITEM_TYPE_1')" }
			if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[user.Item_ItemType]{
				Value:             value,
				Expr:              `user.Item.ItemType.value('ITEM_TYPE_1')`,
				UseContextLibrary: false,
				CacheIndex:        60,
				Setter: func(v user.Item_ItemType) error {
					typeValue, err := s.cast_User_Item_ItemType__to__int32(v)
					if err != nil {
						return err
					}
					args.Type = typeValue
					return nil
				},
			}); err != nil {
				return nil, err
			}
			grpcfed.Logger(ctx).DebugContext(ctx, "call user.UserService/GetUser", slog.Any("user.GetUserRequest", s.logvalue_User_GetUserRequest(args)))
			return grpcfed.WithTimeout[user.GetUserResponse](ctx, "user.UserService/GetUser", 20000000000 /* 20s */, func(ctx context.Context) (*user.GetUserResponse, error) {
				b := grpcfed.NewExponentialBackOff(&grpcfed.ExponentialBackOffConfig{
					InitialInterval:     1000000000, /* 1s */
					RandomizationFactor: 0.7,
					Multiplier:          1.7,
					MaxInterval:         30000000000, /* 30s */
					MaxElapsedTime:      20000000000, /* 20s */
				})
				b = grpcfed.BackOffWithMaxRetries(b, 3)
				b = grpcfed.BackOffWithContext(b, ctx)
				return grpcfed.WithRetry(ctx, &grpcfed.RetryParam[user.GetUserResponse]{
					Value:             value,
					If:                `true`,
					UseContextLibrary: false,
					CacheIndex:        61,
					BackOff:           b,
					Body: func() (*user.GetUserResponse, error) {
						return s.client.User_UserServiceClient.GetUser(ctx, args)
					},
				})
			})
		},
	}); err != nil {
		if err := s.errorHandler(ctx, FederationService_DependentMethod_User_UserService_GetUser, err); err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
	}

	// This section's codes are generated by the following proto definition.
	/*
	   def {
	     name: "user"
	     autobind: true
	     by: "res.user"
	   }
	*/
	if err := grpcfed.EvalDef(ctx, value, grpcfed.Def[*user.User, *localValueType]{
		Name: `user`,
		Type: grpcfed.CELObjectType("user.User"),
		Setter: func(value *localValueType, v *user.User) error {
			value.vars.user = v
			return nil
		},
		By:                  `res.user`,
		ByUseContextLibrary: false,
		ByCacheIndex:        62,
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Res = value.vars.res
	req.User = value.vars.user

	// create a message value to be returned.
	ret := &User{}

	// field binding section.
	ret.Id = value.vars.user.GetId()     // { name: "user", autobind: true }
	ret.Name = value.vars.user.GetName() // { name: "user", autobind: true }
	{
		itemsValue, err := s.cast_repeated_User_Item__to__repeated_Federation_Item(value.vars.user.GetItems()) // { name: "user", autobind: true }
		if err != nil {
			grpcfed.RecordErrorToSpan(ctx, err)
			return nil, err
		}
		ret.Items = itemsValue
	}
	ret.Profile = value.vars.user.GetProfile() // { name: "user", autobind: true }

	switch {
	case value.vars.user.GetAttrA() != nil:

		attrValue, err := s.cast_User_User_AttrA___to__Federation_User_AttrA_(value.vars.user.GetAttrA())
		if err != nil {
			return nil, err
		}
		ret.Attr = attrValue
	case value.vars.user.GetB() != nil:

		attrValue, err := s.cast_User_User_B__to__Federation_User_B(value.vars.user.GetB())
		if err != nil {
			return nil, err
		}
		ret.Attr = attrValue
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved federation.User", slog.Any("federation.User", s.logvalue_Federation_User(ret)))
	return ret, nil
}

// cast_Federation_Item_Location_LocationType__to__int32 cast from "federation.Item.Location.LocationType" to "int32".
func (s *FederationService) cast_Federation_Item_Location_LocationType__to__int32(from Item_Location_LocationType) (int32, error) {
	return int32(from), nil
}

// cast_Google_Protobuf_BoolValue__to__Google_Protobuf_BoolValue cast from "google.protobuf.BoolValue" to "google.protobuf.BoolValue".
func (s *FederationService) cast_Google_Protobuf_BoolValue__to__Google_Protobuf_BoolValue(from *wrapperspb.BoolValue) (*wrapperspb.BoolValue, error) {
	if from == nil {
		return nil, nil
	}

	valueValue := from.GetValue()

	return &wrapperspb.BoolValue{
		Value: valueValue,
	}, nil
}

// cast_Google_Protobuf_BytesValue__to__Google_Protobuf_BytesValue cast from "google.protobuf.BytesValue" to "google.protobuf.BytesValue".
func (s *FederationService) cast_Google_Protobuf_BytesValue__to__Google_Protobuf_BytesValue(from *wrapperspb.BytesValue) (*wrapperspb.BytesValue, error) {
	if from == nil {
		return nil, nil
	}

	valueValue := from.GetValue()

	return &wrapperspb.BytesValue{
		Value: valueValue,
	}, nil
}

// cast_Google_Protobuf_DoubleValue__to__Google_Protobuf_DoubleValue cast from "google.protobuf.DoubleValue" to "google.protobuf.DoubleValue".
func (s *FederationService) cast_Google_Protobuf_DoubleValue__to__Google_Protobuf_DoubleValue(from *wrapperspb.DoubleValue) (*wrapperspb.DoubleValue, error) {
	if from == nil {
		return nil, nil
	}

	valueValue := from.GetValue()

	return &wrapperspb.DoubleValue{
		Value: valueValue,
	}, nil
}

// cast_Google_Protobuf_DoubleValue__to__Google_Protobuf_FloatValue cast from "google.protobuf.DoubleValue" to "google.protobuf.FloatValue".
func (s *FederationService) cast_Google_Protobuf_DoubleValue__to__Google_Protobuf_FloatValue(from *wrapperspb.DoubleValue) (*wrapperspb.FloatValue, error) {
	if from == nil {
		return nil, nil
	}

	valueValue, err := s.cast_float64__to__float32(from.GetValue())
	if err != nil {
		return nil, err
	}

	return &wrapperspb.FloatValue{
		Value: valueValue,
	}, nil
}

// cast_Google_Protobuf_Int64Value__to__Google_Protobuf_Int32Value cast from "google.protobuf.Int64Value" to "google.protobuf.Int32Value".
func (s *FederationService) cast_Google_Protobuf_Int64Value__to__Google_Protobuf_Int32Value(from *wrapperspb.Int64Value) (*wrapperspb.Int32Value, error) {
	if from == nil {
		return nil, nil
	}

	valueValue, err := s.cast_int64__to__int32(from.GetValue())
	if err != nil {
		return nil, err
	}

	return &wrapperspb.Int32Value{
		Value: valueValue,
	}, nil
}

// cast_Google_Protobuf_Int64Value__to__Google_Protobuf_Int64Value cast from "google.protobuf.Int64Value" to "google.protobuf.Int64Value".
func (s *FederationService) cast_Google_Protobuf_Int64Value__to__Google_Protobuf_Int64Value(from *wrapperspb.Int64Value) (*wrapperspb.Int64Value, error) {
	if from == nil {
		return nil, nil
	}

	valueValue := from.GetValue()

	return &wrapperspb.Int64Value{
		Value: valueValue,
	}, nil
}

// cast_Google_Protobuf_StringValue__to__Google_Protobuf_StringValue cast from "google.protobuf.StringValue" to "google.protobuf.StringValue".
func (s *FederationService) cast_Google_Protobuf_StringValue__to__Google_Protobuf_StringValue(from *wrapperspb.StringValue) (*wrapperspb.StringValue, error) {
	if from == nil {
		return nil, nil
	}

	valueValue := from.GetValue()

	return &wrapperspb.StringValue{
		Value: valueValue,
	}, nil
}

// cast_Google_Protobuf_UInt64Value__to__Google_Protobuf_UInt32Value cast from "google.protobuf.UInt64Value" to "google.protobuf.UInt32Value".
func (s *FederationService) cast_Google_Protobuf_UInt64Value__to__Google_Protobuf_UInt32Value(from *wrapperspb.UInt64Value) (*wrapperspb.UInt32Value, error) {
	if from == nil {
		return nil, nil
	}

	valueValue, err := s.cast_uint64__to__uint32(from.GetValue())
	if err != nil {
		return nil, err
	}

	return &wrapperspb.UInt32Value{
		Value: valueValue,
	}, nil
}

// cast_Google_Protobuf_UInt64Value__to__Google_Protobuf_UInt64Value cast from "google.protobuf.UInt64Value" to "google.protobuf.UInt64Value".
func (s *FederationService) cast_Google_Protobuf_UInt64Value__to__Google_Protobuf_UInt64Value(from *wrapperspb.UInt64Value) (*wrapperspb.UInt64Value, error) {
	if from == nil {
		return nil, nil
	}

	valueValue := from.GetValue()

	return &wrapperspb.UInt64Value{
		Value: valueValue,
	}, nil
}

// cast_User_Item_ItemType__to__Federation_Item_ItemType cast from "user.Item.ItemType" to "federation.Item.ItemType".
func (s *FederationService) cast_User_Item_ItemType__to__Federation_Item_ItemType(from user.Item_ItemType) (Item_ItemType, error) {
	switch from {
	case user.Item_ITEM_TYPE_UNSPECIFIED:
		return Item_ITEM_TYPE_UNSPECIFIED, nil
	case user.Item_ITEM_TYPE_1:
		return Item_ITEM_TYPE_1, nil
	case user.Item_ITEM_TYPE_2:
		return Item_ITEM_TYPE_2, nil
	case user.Item_ITEM_TYPE_3:
		return Item_ITEM_TYPE_3, nil
	default:
		return 0, nil
	}
}

// cast_User_Item_ItemType__to__int32 cast from "user.Item.ItemType" to "int32".
func (s *FederationService) cast_User_Item_ItemType__to__int32(from user.Item_ItemType) (int32, error) {
	return int32(from), nil
}

// cast_User_Item_Location_AddrA___to__Federation_Item_Location_AddrA_ cast from "user.Item.Location.addr_a" to "federation.Item.Location.addr_a".
func (s *FederationService) cast_User_Item_Location_AddrA___to__Federation_Item_Location_AddrA_(from *user.Item_Location_AddrA) (*Item_Location_AddrA_, error) {
	if from == nil {
		return nil, nil
	}

	addrAValue, err := s.cast_User_Item_Location_AddrA__to__Federation_Item_Location_AddrA(from)
	if err != nil {
		return nil, err
	}
	return &Item_Location_AddrA_{AddrA: addrAValue}, nil
}

// cast_User_Item_Location_AddrA__to__Federation_Item_Location_AddrA cast from "user.Item.Location.AddrA" to "federation.Item.Location.AddrA".
func (s *FederationService) cast_User_Item_Location_AddrA__to__Federation_Item_Location_AddrA(from *user.Item_Location_AddrA) (*Item_Location_AddrA, error) {
	if from == nil {
		return nil, nil
	}

	fooValue := from.GetFoo()

	return &Item_Location_AddrA{
		Foo: fooValue,
	}, nil
}

// cast_User_Item_Location_AddrB__to__Federation_Item_Location_AddrB cast from "user.Item.Location.AddrB" to "federation.Item.Location.AddrB".
func (s *FederationService) cast_User_Item_Location_AddrB__to__Federation_Item_Location_AddrB(from *user.Item_Location_AddrB) (*Item_Location_AddrB, error) {
	if from == nil {
		return nil, nil
	}

	barValue := from.GetBar()

	return &Item_Location_AddrB{
		Bar: barValue,
	}, nil
}

// cast_User_Item_Location_B__to__Federation_Item_Location_B cast from "user.Item.Location.b" to "federation.Item.Location.b".
func (s *FederationService) cast_User_Item_Location_B__to__Federation_Item_Location_B(from *user.Item_Location_AddrB) (*Item_Location_B, error) {
	if from == nil {
		return nil, nil
	}

	bValue, err := s.cast_User_Item_Location_AddrB__to__Federation_Item_Location_AddrB(from)
	if err != nil {
		return nil, err
	}
	return &Item_Location_B{B: bValue}, nil
}

// cast_User_Item_Location__to__Federation_Item_Location cast from "user.Item.Location" to "federation.Item.Location".
func (s *FederationService) cast_User_Item_Location__to__Federation_Item_Location(from *user.Item_Location) (*Item_Location, error) {
	if from == nil {
		return nil, nil
	}

	addr1Value := from.GetAddr1()
	addr2Value := from.GetAddr2()

	ret := &Item_Location{
		Addr1: addr1Value,
		Addr2: addr2Value,
	}
	switch {

	case from.GetAddrA() != nil:
		addr3Value, err := s.cast_User_Item_Location_AddrA___to__Federation_Item_Location_AddrA_(from.GetAddrA())
		if err != nil {
			return nil, err
		}
		ret.Addr3 = addr3Value
	case from.GetB() != nil:
		addr3Value, err := s.cast_User_Item_Location_B__to__Federation_Item_Location_B(from.GetB())
		if err != nil {
			return nil, err
		}
		ret.Addr3 = addr3Value
	}
	return ret, nil
}

// cast_User_Item__to__Federation_Item cast from "user.Item" to "federation.Item".
func (s *FederationService) cast_User_Item__to__Federation_Item(from *user.Item) (*Item, error) {
	if from == nil {
		return nil, nil
	}

	nameValue := from.GetName()
	typeValue, err := s.cast_User_Item_ItemType__to__Federation_Item_ItemType(from.GetType())
	if err != nil {
		return nil, err
	}
	valueValue := from.GetValue()
	locationValue, err := s.cast_User_Item_Location__to__Federation_Item_Location(from.GetLocation())
	if err != nil {
		return nil, err
	}

	return &Item{
		Name:     nameValue,
		Type:     typeValue,
		Value:    valueValue,
		Location: locationValue,
	}, nil
}

// cast_User_User_AttrA___to__Federation_User_AttrA_ cast from "user.User.attr_a" to "federation.User.attr_a".
func (s *FederationService) cast_User_User_AttrA___to__Federation_User_AttrA_(from *user.User_AttrA) (*User_AttrA_, error) {
	if from == nil {
		return nil, nil
	}

	attrAValue, err := s.cast_User_User_AttrA__to__Federation_User_AttrA(from)
	if err != nil {
		return nil, err
	}
	return &User_AttrA_{AttrA: attrAValue}, nil
}

// cast_User_User_AttrA__to__Federation_User_AttrA cast from "user.User.AttrA" to "federation.User.AttrA".
func (s *FederationService) cast_User_User_AttrA__to__Federation_User_AttrA(from *user.User_AttrA) (*User_AttrA, error) {
	if from == nil {
		return nil, nil
	}

	fooValue := from.GetFoo()

	return &User_AttrA{
		Foo: fooValue,
	}, nil
}

// cast_User_User_AttrB__to__Federation_User_AttrB cast from "user.User.AttrB" to "federation.User.AttrB".
func (s *FederationService) cast_User_User_AttrB__to__Federation_User_AttrB(from *user.User_AttrB) (*User_AttrB, error) {
	if from == nil {
		return nil, nil
	}

	barValue := from.GetBar()

	return &User_AttrB{
		Bar: barValue,
	}, nil
}

// cast_User_User_B__to__Federation_User_B cast from "user.User.b" to "federation.User.b".
func (s *FederationService) cast_User_User_B__to__Federation_User_B(from *user.User_AttrB) (*User_B, error) {
	if from == nil {
		return nil, nil
	}

	bValue, err := s.cast_User_User_AttrB__to__Federation_User_AttrB(from)
	if err != nil {
		return nil, err
	}
	return &User_B{B: bValue}, nil
}

// cast_float64__to__float32 cast from "double" to "float".
func (s *FederationService) cast_float64__to__float32(from float64) (float32, error) {
	return float32(from), nil
}

// cast_int64__to__Federation_Item_ItemType cast from "int64" to "federation.Item.ItemType".
func (s *FederationService) cast_int64__to__Federation_Item_ItemType(from int64) (Item_ItemType, error) {
	return Item_ItemType(from), nil
}

// cast_int64__to__int32 cast from "int64" to "int32".
func (s *FederationService) cast_int64__to__int32(from int64) (int32, error) {
	return grpcfed.Int64ToInt32(from)
}

// cast_map_int64_string__to__map_int32_string cast from "map<int64, string>" to "map<int32, string>".
func (s *FederationService) cast_map_int64_string__to__map_int32_string(from map[int64]string) (map[int32]string, error) {
	ret := map[int32]string{}
	for k, v := range from {
		key, err := s.cast_int64__to__int32(k)
		if err != nil {
			return nil, err
		}
		val := v
		ret[key] = val
	}
	return ret, nil
}

// cast_repeated_User_Item__to__repeated_Federation_Item cast from "repeated user.Item" to "repeated federation.Item".
func (s *FederationService) cast_repeated_User_Item__to__repeated_Federation_Item(from []*user.Item) ([]*Item, error) {
	ret := make([]*Item, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_User_Item__to__Federation_Item(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_repeated_int64__to__repeated_int32 cast from "repeated int64" to "repeated int32".
func (s *FederationService) cast_repeated_int64__to__repeated_int32(from []int64) ([]int32, error) {
	ret := make([]int32, 0, len(from))
	for _, v := range from {
		casted, err := s.cast_int64__to__int32(v)
		if err != nil {
			return nil, err
		}
		ret = append(ret, casted)
	}
	return ret, nil
}

// cast_uint64__to__uint32 cast from "uint64" to "uint32".
func (s *FederationService) cast_uint64__to__uint32(from uint64) (uint32, error) {
	return grpcfed.Uint64ToUint32(from)
}

func (s *FederationService) logvalue_Federation_A(v *A) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("b", s.logvalue_Federation_A_B(v.GetB())),
	)
}

func (s *FederationService) logvalue_Federation_AArgument(v *Federation_AArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Federation_A_B(v *A_B) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("foo", s.logvalue_Federation_A_B_C(v.GetFoo())),
		slog.Any("bar", s.logvalue_Federation_A_B_C(v.GetBar())),
	)
}

func (s *FederationService) logvalue_Federation_A_BArgument(v *Federation_A_BArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Federation_A_B_C(v *A_B_C) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("type", v.GetType()),
	)
}

func (s *FederationService) logvalue_Federation_A_B_CArgument(v *Federation_A_B_CArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("type", v.Type),
	)
}

func (s *FederationService) logvalue_Federation_GetPostResponse(v *GetPostResponse) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("post", s.logvalue_Federation_Post(v.GetPost())),
		slog.String("str", v.GetStr()),
		slog.String("uuid", v.GetUuid()),
		slog.String("loc", v.GetLoc()),
		slog.String("value1", v.GetValue1()),
		slog.String("item_type_name", v.GetItemTypeName()),
		slog.String("location_type_name", v.GetLocationTypeName()),
		slog.String("user_item_type_name", v.GetUserItemTypeName()),
		slog.String("item_type_value_enum", s.logvalue_Federation_Item_ItemType(v.GetItemTypeValueEnum()).String()),
		slog.Int64("item_type_value_int", int64(v.GetItemTypeValueInt())),
		slog.String("item_type_value_cast", s.logvalue_Federation_Item_ItemType(v.GetItemTypeValueCast()).String()),
		slog.Int64("location_type_value", int64(v.GetLocationTypeValue())),
		slog.Int64("user_item_type_value", int64(v.GetUserItemTypeValue())),
		slog.Any("a", s.logvalue_Federation_A(v.GetA())),
		slog.Any("sorted_values", v.GetSortedValues()),
		slog.Any("sorted_items", s.logvalue_repeated_Federation_Item(v.GetSortedItems())),
		slog.Any("map_value", s.logvalue_Federation_GetPostResponse_MapValueEntry(v.GetMapValue())),
		slog.Any("double_wrapper_value", s.logvalue_Google_Protobuf_DoubleValue(v.GetDoubleWrapperValue())),
		slog.Any("float_wrapper_value", s.logvalue_Google_Protobuf_FloatValue(v.GetFloatWrapperValue())),
		slog.Any("i64_wrapper_value", s.logvalue_Google_Protobuf_Int64Value(v.GetI64WrapperValue())),
		slog.Any("u64_wrapper_value", s.logvalue_Google_Protobuf_UInt64Value(v.GetU64WrapperValue())),
		slog.Any("i32_wrapper_value", s.logvalue_Google_Protobuf_Int32Value(v.GetI32WrapperValue())),
		slog.Any("u32_wrapper_value", s.logvalue_Google_Protobuf_UInt32Value(v.GetU32WrapperValue())),
		slog.Any("bool_wrapper_value", s.logvalue_Google_Protobuf_BoolValue(v.GetBoolWrapperValue())),
		slog.Any("string_wrapper_value", s.logvalue_Google_Protobuf_StringValue(v.GetStringWrapperValue())),
		slog.Any("bytes_wrapper_value", s.logvalue_Google_Protobuf_BytesValue(v.GetBytesWrapperValue())),
		slog.String("hello", v.GetHello()),
		slog.Any("null_timestamp", s.logvalue_Google_Protobuf_Timestamp(v.GetNullTimestamp())),
		slog.Any("null_timestamp2", s.logvalue_Google_Protobuf_Timestamp(v.GetNullTimestamp2())),
		slog.Any("null_timestamp3", s.logvalue_Google_Protobuf_Timestamp(v.GetNullTimestamp3())),
	)
}

func (s *FederationService) logvalue_Federation_GetPostResponseArgument(v *Federation_GetPostResponseArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.Id),
	)
}

func (s *FederationService) logvalue_Federation_GetPostResponse_MapValueEntry(v map[int32]string) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for key, value := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(key),
			Value: slog.AnyValue(value),
		})
	}
	return slog.GroupValue(attrs...)
}

func (s *FederationService) logvalue_Federation_Item(v *Item) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("name", v.GetName()),
		slog.String("type", s.logvalue_Federation_Item_ItemType(v.GetType()).String()),
		slog.Int64("value", v.GetValue()),
		slog.Any("location", s.logvalue_Federation_Item_Location(v.GetLocation())),
	)
}

func (s *FederationService) logvalue_Federation_Item_ItemType(v Item_ItemType) slog.Value {
	switch v {
	case Item_ITEM_TYPE_UNSPECIFIED:
		return slog.StringValue("ITEM_TYPE_UNSPECIFIED")
	case Item_ITEM_TYPE_1:
		return slog.StringValue("ITEM_TYPE_1")
	case Item_ITEM_TYPE_2:
		return slog.StringValue("ITEM_TYPE_2")
	case Item_ITEM_TYPE_3:
		return slog.StringValue("ITEM_TYPE_3")
	}
	return slog.StringValue("")
}

func (s *FederationService) logvalue_Federation_Item_Location(v *Item_Location) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("addr1", v.GetAddr1()),
		slog.String("addr2", v.GetAddr2()),
		slog.Any("addr_a", s.logvalue_Federation_Item_Location_AddrA(v.GetAddrA())),
		slog.Any("b", s.logvalue_Federation_Item_Location_AddrB(v.GetB())),
	)
}

func (s *FederationService) logvalue_Federation_Item_Location_AddrA(v *Item_Location_AddrA) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("foo", v.GetFoo()),
	)
}

func (s *FederationService) logvalue_Federation_Item_Location_AddrB(v *Item_Location_AddrB) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("bar", v.GetBar()),
	)
}

func (s *FederationService) logvalue_Federation_Item_Location_LocationType(v Item_Location_LocationType) slog.Value {
	switch v {
	case Item_Location_LOCATION_TYPE_0:
		return slog.StringValue("LOCATION_TYPE_0")
	case Item_Location_LOCATION_TYPE_1:
		return slog.StringValue("LOCATION_TYPE_1")
	}
	return slog.StringValue("")
}

func (s *FederationService) logvalue_Federation_Post(v *Post) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.GetId()),
		slog.String("title", v.GetTitle()),
		slog.String("content", v.GetContent()),
		slog.Any("user", s.logvalue_Federation_User(v.GetUser())),
	)
}

func (s *FederationService) logvalue_Federation_PostArgument(v *Federation_PostArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.Id),
	)
}

func (s *FederationService) logvalue_Federation_User(v *User) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.GetId()),
		slog.String("name", v.GetName()),
		slog.Any("items", s.logvalue_repeated_Federation_Item(v.GetItems())),
		slog.Any("profile", s.logvalue_Federation_User_ProfileEntry(v.GetProfile())),
		slog.Any("attr_a", s.logvalue_Federation_User_AttrA(v.GetAttrA())),
		slog.Any("b", s.logvalue_Federation_User_AttrB(v.GetB())),
	)
}

func (s *FederationService) logvalue_Federation_UserArgument(v *Federation_UserArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.Id),
		slog.String("title", v.Title),
		slog.String("content", v.Content),
		slog.String("user_id", v.UserId),
	)
}

func (s *FederationService) logvalue_Federation_User_AttrA(v *User_AttrA) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("foo", v.GetFoo()),
	)
}

func (s *FederationService) logvalue_Federation_User_AttrB(v *User_AttrB) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Bool("bar", v.GetBar()),
	)
}

func (s *FederationService) logvalue_Federation_User_ProfileEntry(v map[string]*anypb.Any) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for key, value := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(key),
			Value: s.logvalue_Google_Protobuf_Any(value),
		})
	}
	return slog.GroupValue(attrs...)
}

func (s *FederationService) logvalue_Google_Protobuf_Any(v *anypb.Any) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("type_url", v.GetTypeUrl()),
		slog.String("value", string(v.GetValue())),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_BoolValue(v *wrapperspb.BoolValue) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Bool("value", v.GetValue()),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_BytesValue(v *wrapperspb.BytesValue) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("value", string(v.GetValue())),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_DoubleValue(v *wrapperspb.DoubleValue) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Float64("value", v.GetValue()),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_FloatValue(v *wrapperspb.FloatValue) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Float64("value", float64(v.GetValue())),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_Int32Value(v *wrapperspb.Int32Value) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("value", int64(v.GetValue())),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_Int64Value(v *wrapperspb.Int64Value) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("value", v.GetValue()),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_StringValue(v *wrapperspb.StringValue) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("value", v.GetValue()),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_Timestamp(v *timestamppb.Timestamp) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("seconds", v.GetSeconds()),
		slog.Int64("nanos", int64(v.GetNanos())),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_UInt32Value(v *wrapperspb.UInt32Value) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Uint64("value", uint64(v.GetValue())),
	)
}

func (s *FederationService) logvalue_Google_Protobuf_UInt64Value(v *wrapperspb.UInt64Value) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Uint64("value", v.GetValue()),
	)
}

func (s *FederationService) logvalue_Post_GetPostRequest(v *post.GetPostRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.GetId()),
	)
}

func (s *FederationService) logvalue_Post_GetPostsRequest(v *post.GetPostsRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.GetIds()),
	)
}

func (s *FederationService) logvalue_User_GetUserRequest(v *user.GetUserRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.GetId()),
		slog.Int64("type", int64(v.GetType())),
	)
}

func (s *FederationService) logvalue_User_GetUsersRequest(v *user.GetUsersRequest) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("ids", v.GetIds()),
	)
}

func (s *FederationService) logvalue_repeated_Federation_Item(v []*Item) slog.Value {
	attrs := make([]slog.Attr, 0, len(v))
	for idx, vv := range v {
		attrs = append(attrs, slog.Attr{
			Key:   grpcfed.ToLogAttrKey(idx),
			Value: s.logvalue_Federation_Item(vv),
		})
	}
	return slog.GroupValue(attrs...)
}
