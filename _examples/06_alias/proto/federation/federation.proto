syntax = "proto3";

package org.federation;

import "grpc/federation/federation.proto";
import "post/post.proto";

option go_package = "example/federation;federation";

option (grpc.federation.file)= {
  import: ["post/v2/post.proto"]
};

service FederationService {
  option (grpc.federation.service) = {};
  rpc GetPost(GetPostRequest) returns (GetPostResponse) {};
}

message GetPostRequest {
  string id = 1;

  message ConditionA {
    option (grpc.federation.message).alias = "org.post.PostConditionA";
    string prop = 1;
  }
  message ConditionB {
    option (grpc.federation.message).alias = "org.post.PostConditionB";
  }
  oneof condition {
    ConditionA a = 2;
    ConditionB condition_b = 3;
  }
}

message GetPostResponse {
  option (grpc.federation.message) = {
    def [
      {
        name: "post"
        message {
          name: "Post"
          args [
            { name: "id", by: "$.id" },
            { name: "a", by: "$.a" },
            { name: "b", by: "$.condition_b" }
          ]
        }
      }
    ]
  };
  Post post = 1 [(grpc.federation.field).by = "post"];
}

message Post {
  option (grpc.federation.message) = {
    def {
      name: "res"
      call {
        method: "org.post.PostService/GetPost"
        request [
          { field: "id", by: "$.id" },
          { field: "a", by: "$.a", if : "$.a != null" },
          { field: "b", by: "$.b", if : "$.b != null" }
        ]
      }
    }
    def { name: "post", by: "res.post", autobind: true }
    def {
      name: "res2"
      call {
        method: "org.post.v2.PostService/GetPost"
        request { field: "id", by: "$.id" }
      }
    }
    def { name: "data2", by: "res2.post.data" }
    def { name: "data_type" by: "grpc.federation.enum.select(true, org.post.PostDataType.from(org.post.PostDataType.POST_TYPE_B), org.post.v2.PostDataType.value('POST_V2_TYPE_B'))" }
    def { name: "data_type2" by: "grpc.federation.enum.select(true, data_type, org.post.v2.PostDataType.value('POST_V2_TYPE_C'))" }
  };
  string id = 1;
  PostData data = 2;
  PostData data2 = 3 [(grpc.federation.field).by = "data2"];
  PostType type = 4 [(grpc.federation.field).by = "data_type2"];
  org.post.M m = 5 [(grpc.federation.field).by = "M{x: 'xxx'}"];
}

enum PostType {
  option (grpc.federation.enum) = {
    alias: [ "org.post.PostDataType", "org.post.v2.PostDataType" ]
  };

  POST_TYPE_UNKNOWN = 0 [(grpc.federation.enum_value).default = true];
  POST_TYPE_FOO = 1 [(grpc.federation.enum_value) = { alias: ["POST_TYPE_A"] }];
  POST_TYPE_BAR = 2 [(grpc.federation.enum_value) = { 
    alias: [
      "org.post.PostDataType.POST_TYPE_B",
      "org.post.PostDataType.POST_TYPE_C",
      "org.post.v2.PostDataType.POST_V2_TYPE_B",
      "org.post.v2.PostDataType.POST_V2_TYPE_C"
    ]
  }];
}

message PostData {
  option (grpc.federation.message) = {
    alias: [ "org.post.PostData", "org.post.v2.PostData" ]
  };

  PostType type = 1;
  string title = 2;
  PostContent content = 3;
}

message PostContent {
  option (grpc.federation.message) = {
    alias: [ "org.post.PostContent", "org.post.v2.PostContent" ]
  };

  enum Category {
    option (grpc.federation.enum) = {
      alias: [ "org.post.PostContent.Category", "org.post.v2.PostContent.Category" ]
    };
  
    CATEGORY_A = 0;
    CATEGORY_B = 1;
  };

  Category category = 1;
  string head = 2;
  string body = 3;
  string dup_body = 4 [(grpc.federation.field).alias = "body"];
  map<int32, int32> counts = 5;
}

message M {
  option (grpc.federation.message).alias = "org.post.M";

  string x = 1;
}