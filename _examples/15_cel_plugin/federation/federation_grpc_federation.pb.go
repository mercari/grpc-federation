// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
// versions:
//
//	protoc-gen-grpc-federation: (devel)
//
// source: federation/federation.proto
package federation

import (
	"context"
	"io"
	"log/slog"
	"reflect"

	grpcfed "github.com/mercari/grpc-federation/grpc/federation"
	grpcfedcel "github.com/mercari/grpc-federation/grpc/federation/cel"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"

	pluginpb "example/plugin"
)

var (
	_ = reflect.Invalid // to avoid "imported and not used error"
)

// Example_Regexp_ExampleArgument is argument for "example.regexp.Example" message.
type FederationService_Example_Regexp_ExampleArgument struct {
	V     int64
	Value int64
}

// Org_Federation_ExampleResponseArgument is argument for "org.federation.ExampleResponse" message.
type FederationService_Org_Federation_ExampleResponseArgument struct {
	Exp    *pluginpb.Example
	ExpMsg *pluginpb.Example
	Exps   []*pluginpb.Example
	Str    string
	V      []*pluginpb.Example
}

// Org_Federation_IsMatchResponseArgument is argument for "org.federation.IsMatchResponse" message.
type FederationService_Org_Federation_IsMatchResponseArgument struct {
	Expr    string
	Matched bool
	Re      *pluginpb.Regexp
	Target  string
}

// FederationServiceConfig configuration required to initialize the service that use GRPC Federation.
type FederationServiceConfig struct {
	// CELPlugin If you use the plugin feature to extend the CEL API,
	// you must write a plugin and output WebAssembly.
	// In this field, configure to load wasm with the path to the WebAssembly file and the sha256 value.
	CELPlugin *FederationServiceCELPluginConfig
	// ErrorHandler Federation Service often needs to convert errors received from downstream services.
	// If an error occurs during method execution in the Federation Service, this error handler is called and the returned error is treated as a final error.
	ErrorHandler grpcfed.ErrorHandler
	// Logger sets the logger used to output Debug/Info/Error information.
	Logger *slog.Logger
}

// FederationServiceClientFactory provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
type FederationServiceClientFactory interface {
}

// FederationServiceClientConfig helper to create gRPC client.
// Hints for creating a gRPC Client.
type FederationServiceClientConfig struct {
	// Service FQDN ( `<package-name>.<service-name>` ) of the service on Protocol Buffers.
	Service string
}

// FederationServiceDependentClientSet has a gRPC client for all services on which the federation service depends.
// This is provided as an argument when implementing the custom resolver.
type FederationServiceDependentClientSet struct {
}

// FederationServiceResolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
type FederationServiceResolver interface {
}

// FederationServiceCELPluginWasmConfig type alias for grpcfedcel.WasmConfig.
type FederationServiceCELPluginWasmConfig = grpcfedcel.WasmConfig

// FederationServiceCELPluginConfig hints for loading a WebAssembly based plugin.
type FederationServiceCELPluginConfig struct {
	Regexp   FederationServiceCELPluginWasmConfig
	CacheDir string
}

// FederationServiceUnimplementedResolver a structure implemented to satisfy the Resolver interface.
// An Unimplemented error is always returned.
// This is intended for use when there are many Resolver interfaces that do not need to be implemented,
// by embedding them in a resolver structure that you have created.
type FederationServiceUnimplementedResolver struct{}

// FederationService represents Federation Service.
type FederationService struct {
	UnimplementedFederationServiceServer
	cfg                FederationServiceConfig
	logger             *slog.Logger
	errorHandler       grpcfed.ErrorHandler
	celCacheMap        *grpcfed.CELCacheMap
	tracer             trace.Tracer
	celTypeHelper      *grpcfed.CELTypeHelper
	celEnvOpts         []grpcfed.CELEnvOption
	celPluginInstances []*grpcfedcel.CELPluginInstance
	client             *FederationServiceDependentClientSet
}

// NewFederationService creates FederationService instance by FederationServiceConfig.
func NewFederationService(cfg FederationServiceConfig) (*FederationService, error) {
	if cfg.CELPlugin == nil {
		return nil, grpcfed.ErrCELPluginConfig
	}
	logger := cfg.Logger
	if logger == nil {
		logger = slog.New(slog.NewJSONHandler(io.Discard, nil))
	}
	errorHandler := cfg.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(ctx context.Context, methodName string, err error) error { return err }
	}
	celTypeHelperFieldMap := grpcfed.CELTypeHelperFieldMap{
		"grpc.federation.private.example.regexp.ExampleArgument": {
			"value": grpcfed.NewCELFieldType(grpcfed.CELIntType, "Value"),
		},
		"grpc.federation.private.org.federation.ExampleResponseArgument": {},
		"grpc.federation.private.org.federation.IsMatchResponseArgument": {
			"expr":   grpcfed.NewCELFieldType(grpcfed.CELStringType, "Expr"),
			"target": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Target"),
		},
	}
	celTypeHelper := grpcfed.NewCELTypeHelper("org.federation", celTypeHelperFieldMap)
	var celEnvOpts []grpcfed.CELEnvOption
	celEnvOpts = append(celEnvOpts, grpcfed.NewDefaultEnvOptions(celTypeHelper)...)
	var celPluginInstances []*grpcfedcel.CELPluginInstance
	{
		plugin, err := grpcfedcel.NewCELPlugin(context.Background(), grpcfedcel.CELPluginConfig{
			Name:     "regexp",
			Wasm:     cfg.CELPlugin.Regexp,
			CacheDir: cfg.CELPlugin.CacheDir,
			Functions: []*grpcfedcel.CELFunction{
				{
					Name: "example.regexp.compile",
					ID:   "example_regexp_compile_string_example_regexp_Regexp",
					Args: []*grpcfed.CELTypeDeclare{
						grpcfed.CELStringType,
					},
					Return:   grpcfed.NewCELObjectType("example.regexp.Regexp"),
					IsMethod: false,
				},
				{
					Name:     "example.regexp.newExample",
					ID:       "example_regexp_newExample_example_regexp_Example",
					Args:     []*grpcfed.CELTypeDeclare{},
					Return:   grpcfed.NewCELObjectType("example.regexp.Example"),
					IsMethod: false,
				},
				{
					Name:     "example.regexp.newExamples",
					ID:       "example_regexp_newExamples_repeated example_regexp_Example",
					Args:     []*grpcfed.CELTypeDeclare{},
					Return:   grpcfed.NewCELListType(grpcfed.NewCELObjectType("example.regexp.Example")),
					IsMethod: false,
				},
				{
					Name: "example.regexp.filterExamples",
					ID:   "example_regexp_filterExamples_repeated example_regexp_Example_repeated example_regexp_Example",
					Args: []*grpcfed.CELTypeDeclare{
						grpcfed.NewCELListType(grpcfed.NewCELObjectType("example.regexp.Example")),
					},
					Return:   grpcfed.NewCELListType(grpcfed.NewCELObjectType("example.regexp.Example")),
					IsMethod: false,
				},
				{
					Name: "matchString",
					ID:   "example_regexp_Regexp_matchString_example_regexp_Regexp_string_bool",
					Args: []*grpcfed.CELTypeDeclare{
						grpcfed.NewCELObjectType("example.regexp.Regexp"),
						grpcfed.CELStringType,
					},
					Return:   grpcfed.CELBoolType,
					IsMethod: true,
				},
				{
					Name: "concat",
					ID:   "example_regexp_Example_concat_example_regexp_Example_repeated string_string",
					Args: []*grpcfed.CELTypeDeclare{
						grpcfed.NewCELObjectType("example.regexp.Example"),
						grpcfed.NewCELListType(grpcfed.CELStringType),
					},
					Return:   grpcfed.CELStringType,
					IsMethod: true,
				},
				{
					Name: "mySplit",
					ID:   "example_regexp_Example_mySplit_example_regexp_Example_string_string_repeated string",
					Args: []*grpcfed.CELTypeDeclare{
						grpcfed.NewCELObjectType("example.regexp.Example"),
						grpcfed.CELStringType,
						grpcfed.CELStringType,
					},
					Return:   grpcfed.NewCELListType(grpcfed.CELStringType),
					IsMethod: true,
				},
			},
			Capability: &grpcfedcel.CELPluginCapability{},
		})
		if err != nil {
			return nil, err
		}
		ctx := context.Background()
		instance, err := plugin.CreateInstance(ctx, celTypeHelper.CELRegistry())
		if err != nil {
			return nil, err
		}
		if err := instance.ValidatePlugin(ctx); err != nil {
			return nil, err
		}
		celPluginInstances = append(celPluginInstances, instance)
		celEnvOpts = append(celEnvOpts, grpcfed.CELLib(instance))
	}
	svc := &FederationService{
		cfg:                cfg,
		logger:             logger,
		errorHandler:       errorHandler,
		celEnvOpts:         celEnvOpts,
		celTypeHelper:      celTypeHelper,
		celCacheMap:        grpcfed.NewCELCacheMap(),
		tracer:             otel.Tracer("org.federation.FederationService"),
		celPluginInstances: celPluginInstances,
		client:             &FederationServiceDependentClientSet{},
	}
	return svc, nil
}

// CleanupFederationService cleanup all resources to prevent goroutine leaks.
func CleanupFederationService(ctx context.Context, svc *FederationService) {
	svc.cleanup(ctx)
}

func (s *FederationService) cleanup(ctx context.Context) {
	for _, instance := range s.celPluginInstances {
		instance.Close(ctx)
	}
}

// IsMatch implements "org.federation.FederationService/IsMatch" method.
func (s *FederationService) IsMatch(ctx context.Context, req *IsMatchRequest) (res *IsMatchResponse, e error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.FederationService/IsMatch")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, grpcfed.StackTrace())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()

	defer func() {
		// cleanup plugin instance memory.
		for _, instance := range s.celPluginInstances {
			instance.GC()
		}
	}()
	res, err := s.resolve_Org_Federation_IsMatchResponse(ctx, &FederationService_Org_Federation_IsMatchResponseArgument{
		Expr:   req.GetExpr(),
		Target: req.GetTarget(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// Example implements "org.federation.FederationService/Example" method.
func (s *FederationService) Example(ctx context.Context, req *ExampleRequest) (res *ExampleResponse, e error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.FederationService/Example")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, grpcfed.StackTrace())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()

	defer func() {
		// cleanup plugin instance memory.
		for _, instance := range s.celPluginInstances {
			instance.GC()
		}
	}()
	res, err := s.resolve_Org_Federation_ExampleResponse(ctx, &FederationService_Org_Federation_ExampleResponseArgument{})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// resolve_Example_Regexp_Example resolve "example.regexp.Example" message.
func (s *FederationService) resolve_Example_Regexp_Example(ctx context.Context, req *FederationService_Example_Regexp_ExampleArgument) (*pluginpb.Example, error) {
	ctx, span := s.tracer.Start(ctx, "example.regexp.Example")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve example.regexp.Example", slog.Any("message_args", s.logvalue_Example_Regexp_ExampleArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			V int64
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.example.regexp.ExampleArgument", req)}
	/*
		def {
		  name: "v"
		  by: "$.value + 1"
		}
	*/
	def_v := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[int64, *localValueType]{
			Name: `v`,
			Type: grpcfed.CELIntType,
			Setter: func(value *localValueType, v int64) error {
				value.vars.V = v
				return nil
			},
			By:           `$.value + 1`,
			ByCacheIndex: 1,
		})
	}

	if err := def_v(ctx); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.V = value.vars.V

	// create a message value to be returned.
	ret := &pluginpb.Example{}

	// field binding section.
	// (grpc.federation.field).by = "v"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
		Value:      value,
		Expr:       `v`,
		CacheIndex: 2,
		Setter: func(v int64) error {
			ret.Value = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved example.regexp.Example", slog.Any("example.regexp.Example", s.logvalue_Example_Regexp_Example(ret)))
	return ret, nil
}

// resolve_Org_Federation_ExampleResponse resolve "org.federation.ExampleResponse" message.
func (s *FederationService) resolve_Org_Federation_ExampleResponse(ctx context.Context, req *FederationService_Org_Federation_ExampleResponseArgument) (*ExampleResponse, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.ExampleResponse")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.ExampleResponse", slog.Any("message_args", s.logvalue_Org_Federation_ExampleResponseArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			Exp    *pluginpb.Example
			ExpMsg *pluginpb.Example
			Exps   []*pluginpb.Example
			Str    string
			V      []*pluginpb.Example
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.org.federation.ExampleResponseArgument", req)}
	/*
		def {
		  name: "exps"
		  by: "example.regexp.newExamples()"
		}
	*/
	def_exps := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[[]*pluginpb.Example, *localValueType]{
			Name: `exps`,
			Type: grpcfed.CELListType(grpcfed.CELObjectType("example.regexp.Example")),
			Setter: func(value *localValueType, v []*pluginpb.Example) error {
				value.vars.Exps = v
				return nil
			},
			By:           `example.regexp.newExamples()`,
			ByCacheIndex: 3,
		})
	}

	/*
		def {
		  name: "v"
		  by: "example.regexp.filterExamples(exps)"
		}
	*/
	def_v := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[[]*pluginpb.Example, *localValueType]{
			Name: `v`,
			Type: grpcfed.CELListType(grpcfed.CELObjectType("example.regexp.Example")),
			Setter: func(value *localValueType, v []*pluginpb.Example) error {
				value.vars.V = v
				return nil
			},
			By:           `example.regexp.filterExamples(exps)`,
			ByCacheIndex: 4,
		})
	}

	/*
		def {
		  name: "exp"
		  by: "example.regexp.newExample()"
		}
	*/
	def_exp := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*pluginpb.Example, *localValueType]{
			Name: `exp`,
			Type: grpcfed.CELObjectType("example.regexp.Example"),
			Setter: func(value *localValueType, v *pluginpb.Example) error {
				value.vars.Exp = v
				return nil
			},
			By:           `example.regexp.newExample()`,
			ByCacheIndex: 5,
		})
	}

	/*
		def {
		  name: "str"
		  by: "exp.concat(exp.mySplit('/a/b/c', '/'))"
		}
	*/
	def_str := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[string, *localValueType]{
			Name: `str`,
			Type: grpcfed.CELStringType,
			Setter: func(value *localValueType, v string) error {
				value.vars.Str = v
				return nil
			},
			By:           `exp.concat(exp.mySplit('/a/b/c', '/'))`,
			ByCacheIndex: 6,
		})
	}

	/*
		def {
		  name: "exp_msg"
		  message {
		    name: "Example"
		    args { name: "value", by: "2" }
		  }
		}
	*/
	def_exp_msg := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*pluginpb.Example, *localValueType]{
			Name: `exp_msg`,
			Type: grpcfed.CELObjectType("example.regexp.Example"),
			Setter: func(value *localValueType, v *pluginpb.Example) error {
				value.vars.ExpMsg = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &FederationService_Example_Regexp_ExampleArgument{}
				// { name: "value", by: "2" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
					Value:      value,
					Expr:       `2`,
					CacheIndex: 7,
					Setter: func(v int64) error {
						args.Value = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				ret, err := s.resolve_Example_Regexp_Example(ctx, args)
				if err != nil {
					return nil, err
				}
				return ret, nil
			},
		})
	}

	// A tree view of message dependencies is shown below.
	/*
	         exp_msg ─┐
	    exp ─┐        │
	             str ─┤
	   exps ─┐        │
	               v ─┤
	*/
	eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_exp_msg(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_exp(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		if err := def_str(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_exps(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		if err := def_v(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	if err := eg.Wait(); err != nil {
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Exp = value.vars.Exp
	req.ExpMsg = value.vars.ExpMsg
	req.Exps = value.vars.Exps
	req.Str = value.vars.Str
	req.V = value.vars.V

	// create a message value to be returned.
	ret := &ExampleResponse{}

	// field binding section.
	// (grpc.federation.field).by = "v.size()"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
		Value:      value,
		Expr:       `v.size()`,
		CacheIndex: 8,
		Setter: func(v int64) error {
			ret.Size = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "str"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `str`,
		CacheIndex: 9,
		Setter: func(v string) error {
			ret.Str = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "exp_msg.value"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[int64]{
		Value:      value,
		Expr:       `exp_msg.value`,
		CacheIndex: 10,
		Setter: func(v int64) error {
			ret.Value = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.ExampleResponse", slog.Any("org.federation.ExampleResponse", s.logvalue_Org_Federation_ExampleResponse(ret)))
	return ret, nil
}

// resolve_Org_Federation_IsMatchResponse resolve "org.federation.IsMatchResponse" message.
func (s *FederationService) resolve_Org_Federation_IsMatchResponse(ctx context.Context, req *FederationService_Org_Federation_IsMatchResponseArgument) (*IsMatchResponse, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.IsMatchResponse")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.IsMatchResponse", slog.Any("message_args", s.logvalue_Org_Federation_IsMatchResponseArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			Matched bool
			Re      *pluginpb.Regexp
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.org.federation.IsMatchResponseArgument", req)}
	/*
		def {
		  name: "re"
		  by: "example.regexp.compile($.expr)"
		}
	*/
	def_re := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*pluginpb.Regexp, *localValueType]{
			Name: `re`,
			Type: grpcfed.CELObjectType("example.regexp.Regexp"),
			Setter: func(value *localValueType, v *pluginpb.Regexp) error {
				value.vars.Re = v
				return nil
			},
			By:           `example.regexp.compile($.expr)`,
			ByCacheIndex: 11,
		})
	}

	/*
		def {
		  name: "matched"
		  by: "re.matchString($.target)"
		}
	*/
	def_matched := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[bool, *localValueType]{
			Name: `matched`,
			Type: grpcfed.CELBoolType,
			Setter: func(value *localValueType, v bool) error {
				value.vars.Matched = v
				return nil
			},
			By:           `re.matchString($.target)`,
			ByCacheIndex: 12,
		})
	}

	if err := def_re(ctx); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	if err := def_matched(ctx); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.Matched = value.vars.Matched
	req.Re = value.vars.Re

	// create a message value to be returned.
	ret := &IsMatchResponse{}

	// field binding section.
	// (grpc.federation.field).by = "matched"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[bool]{
		Value:      value,
		Expr:       `matched`,
		CacheIndex: 13,
		Setter: func(v bool) error {
			ret.Result = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.IsMatchResponse", slog.Any("org.federation.IsMatchResponse", s.logvalue_Org_Federation_IsMatchResponse(ret)))
	return ret, nil
}

func (s *FederationService) logvalue_Example_Regexp_Example(v *pluginpb.Example) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("value", v.GetValue()),
	)
}

func (s *FederationService) logvalue_Example_Regexp_ExampleArgument(v *FederationService_Example_Regexp_ExampleArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("value", v.Value),
	)
}

func (s *FederationService) logvalue_Org_Federation_ExampleResponse(v *ExampleResponse) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("size", v.GetSize()),
		slog.String("str", v.GetStr()),
		slog.Int64("value", v.GetValue()),
	)
}

func (s *FederationService) logvalue_Org_Federation_ExampleResponseArgument(v *FederationService_Org_Federation_ExampleResponseArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Org_Federation_IsMatchResponse(v *IsMatchResponse) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Bool("result", v.GetResult()),
	)
}

func (s *FederationService) logvalue_Org_Federation_IsMatchResponseArgument(v *FederationService_Org_Federation_IsMatchResponseArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("expr", v.Expr),
		slog.String("target", v.Target),
	)
}
