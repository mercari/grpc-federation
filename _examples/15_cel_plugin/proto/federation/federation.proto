syntax = "proto3";

package org.federation;

import "grpc/federation/federation.proto";

option go_package = "example/federation;federation";
option (grpc.federation.file)= {
  import: [
    "plugin/plugin.proto"
  ]
};

service FederationService {
  option (grpc.federation.service) = {};
  rpc IsMatch(IsMatchRequest) returns (IsMatchResponse) {};
  rpc Example(ExampleRequest) returns (ExampleResponse) {};
}

message IsMatchRequest {
  string expr = 1;
  string target = 2;
}
    
message IsMatchResponse {
  option (grpc.federation.message) = {
    def { name: "re" by: "example.regexp.compile($.expr)" }
    def { name: "matched" by: "re.matchString($.target)" }
  };
  bool result = 1 [(grpc.federation.field).by = "matched"];
}

message ExampleRequest{}

message ExampleResponse {
  option (grpc.federation.message) = {
    def { name: "v" by: "example.regexp.filterExamples(example.regexp.newExamples())" }
    def { name: "exp" by: "example.regexp.newExample()"}
    def { name: "str" by: "exp.concat(exp.mySplit('/a/b/c', '/'))"}
  };
  int64 size = 1 [(grpc.federation.field).by = "v.size()"];
  string str = 2 [(grpc.federation.field).by = "str"];
}