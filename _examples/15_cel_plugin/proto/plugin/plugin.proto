syntax = "proto3";

package example.regexp;

import "grpc/federation/federation.proto";

option go_package = "example/plugin;pluginpb";

message Regexp {
  uint32 ptr = 1; // store raw pointer value.
}

message Example {
  option (grpc.federation.message) = {
    def { name: "v" by: "$.value + 1" }
  };
  int64 value = 1 [(grpc.federation.field).by = "v"];
}

option (grpc.federation.file).plugin.export = {
  name: "regexp"
  types: [
    {
      name: "Regexp"
      desc: "Regexp is the representation of a compiled regular expression"
      methods: [
        {
          name: "matchString"
          desc: "matchString reports whether the string s contains any match of the regular expression"
          args {
            name: "s"
            type { kind: STRING }
            desc: "target text"
          }
          return { kind: BOOL }
        }
      ]
    },
    {
      name: "Example"
      desc: "example type"
      methods: [
        {
          name: "concat"
          args { type { repeated {kind: STRING} } }
          return { kind: STRING }
        },
        {
          name: "mySplit"
          args { name: "s" type {kind: STRING} }
          args { name: "sep" type {kind: STRING} }
          return { repeated {kind: STRING} }
        }
      ]
    }
  ]
  functions: [
    {
      name: "compile"
      desc: "compile parses a regular expression and returns, if successful, a Regexp that can be used to match against text"
      args {
        name: "expr"
        type { kind: STRING }
        desc: "a regular expression text"
      }
      return { message: "Regexp" }
    },
    {
      name: "newExample"
      return { message: "Example" }
    },
    {
      name: "newExamples"
      return { repeated {message: "Example"} }
    },
    {
      name: "filterExamples"
      args {type {repeated {message: "Example"}}}
      return { repeated {message: "Example"} }
    }
  ]
  variables: [
    {
      name: "val"
      desc: "a variable for test"
      type { kind: STRING }
    }
  ]
};
