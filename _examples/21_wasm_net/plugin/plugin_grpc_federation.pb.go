// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
// versions:
//
//	protoc-gen-grpc-federation: (devel)
//
// source: plugin/plugin.proto
package pluginpb

import (
	"bufio"
	"context"
	"fmt"
	"os"
	"reflect"
	"runtime"

	grpcfed "github.com/mercari/grpc-federation/grpc/federation"
	"google.golang.org/grpc/metadata"
)

var (
	_ = reflect.Invalid // to avoid "imported and not used error"
)

type NetPlugin interface {
	Example_Net_HttpGet(context.Context, string) (string, error)
}

func RegisterNetPlugin(plug NetPlugin) {
	reader := bufio.NewReader(os.Stdin)
	for {
		content, err := reader.ReadString('\n')
		if err != nil {
			continue
		}
		if content == "" {
			continue
		}
		if content == "exit\n" {
			return
		}
		if content == "gc\n" {
			runtime.GC()
			continue
		}
		if content == "version\n" {
			b, _ := grpcfed.EncodeCELPluginVersion(grpcfed.CELPluginVersionSchema{
				ProtocolVersion:   grpcfed.CELPluginProtocolVersion,
				FederationVersion: "(devel)",
				Functions: []string{
					"example_net_httpGet_string_string",
				},
			})
			_, _ = os.Stdout.Write(append(b, '\n'))
			continue
		}
		res, err := handleNetPlugin([]byte(content), plug)
		if err != nil {
			res = grpcfed.ToErrorCELPluginResponse(err)
		}
		encoded, err := grpcfed.EncodeCELPluginResponse(res)
		if err != nil {
			fmt.Fprintf(os.Stderr, "fatal error: failed to encode cel plugin response: %s\n", err.Error())
			os.Exit(1)
		}
		_, _ = os.Stdout.Write(append(encoded, '\n'))
	}
}

func handleNetPlugin(content []byte, plug NetPlugin) (*grpcfed.CELPluginResponse, error) {
	defer func() {
		if e := recover(); e != nil {
			res = grpcfed.ToErrorCELPluginResponse(errors.New(fmt.Sprintf("%v", e)))
		}
	}()

	req, err := grpcfed.DecodeCELPluginRequest(content)
	if err != nil {
		return nil, err
	}
	md := make(metadata.MD)
	for _, m := range req.GetMetadata() {
		md[m.GetKey()] = m.GetValues()
	}
	ctx := metadata.NewIncomingContext(context.Background(), md)
	switch req.GetMethod() {
	case "example_net_httpGet_string_string":
		if len(req.GetArgs()) != 1 {
			return nil, fmt.Errorf("%s: invalid argument number: %d. expected number is %d", req.GetMethod(), len(req.GetArgs()), 1)
		}
		arg0, err := grpcfed.ToString(req.GetArgs()[0])
		if err != nil {
			return nil, err
		}
		ret, err := plug.Example_Net_HttpGet(ctx, arg0)
		if err != nil {
			return nil, err
		}
		return grpcfed.ToStringCELPluginResponse(ret)
	}
	return nil, fmt.Errorf("unexpected method name: %s", req.GetMethod())
}
