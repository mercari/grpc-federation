// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
// versions:
//
//	protoc-gen-grpc-federation: (devel)
//
// source: plugin/plugin.proto
package pluginpb

import (
	"context"
	"errors"
	"fmt"
	"io"
	"net/http"
	"reflect"
	"runtime"

	grpcfed "github.com/mercari/grpc-federation/grpc/federation"
	grpcfednet "github.com/mercari/grpc-federation/grpc/federation/net"
	"google.golang.org/grpc/metadata"
)

var (
	_ = reflect.Invalid // to avoid "imported and not used error"
)

type NetPlugin interface {
	Example_Net_HttpGet(context.Context, string) (string, error)
}

//go:wasmimport wasi_go_net server_is_ready
//go:noescape
func server_is_ready(uint32, uint32)

func init() {
	http.DefaultTransport = grpcfednet.DefaultTransport()
}

func RegisterNetPlugin(plug NetPlugin) {
	ln, err := grpcfednet.Listen("tcp", ":0")
	if err != nil {
		panic(err)
	}
	addr := ln.Addr().String()
	http.HandleFunc("/version", func(w http.ResponseWriter, _ *http.Request) {
		b, _ := grpcfed.EncodeCELPluginVersion(grpcfed.CELPluginVersionSchema{
			ProtocolVersion:   grpcfed.CELPluginProtocolVersion,
			FederationVersion: "(devel)",
			Functions: []string{
				"example_net_httpGet_string_string",
			},
		})
		w.Write(b)
	})

	block := make(chan struct{})

	http.HandleFunc("/exit", func(w http.ResponseWriter, _ *http.Request) {
		w.WriteHeader(http.StatusOK)
		block <- struct{}{}
	})

	http.HandleFunc("/gc", func(w http.ResponseWriter, _ *http.Request) {
		runtime.GC()
		w.WriteHeader(http.StatusOK)
	})

	http.HandleFunc("/", func(w http.ResponseWriter, req *http.Request) {
		defer req.Body.Close()
		b, err := io.ReadAll(req.Body)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			w.Write([]byte(err.Error()))
			return
		}
		res, err := handleNetPlugin(b, plug)
		if err != nil {
			res = grpcfed.ToErrorCELPluginResponse(err)
		}
		encoded, err := grpcfed.EncodeCELPluginResponse(res)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			w.Write([]byte(err.Error()))
			return
		}
		w.WriteHeader(http.StatusOK)
		w.Write(encoded)
	})
	server := http.Server{}

	go func() {
		if err := server.Serve(ln); err != nil {
			panic(err)
		}
	}()

	for {
		if _, err := http.Get(fmt.Sprintf("http://%s", addr)); err == nil {
			server_is_ready(grpcfednet.StringToPtr(addr), uint32(len(addr)))
			break
		}
	}

	<-block
}

func handleNetPlugin(content []byte, plug NetPlugin) (res *grpcfed.CELPluginResponse, e error) {
	defer func() {
		if e := recover(); e != nil {
			res = grpcfed.ToErrorCELPluginResponse(errors.New(fmt.Sprintf("%v", e)))
		}
	}()

	req, err := grpcfed.DecodeCELPluginRequest(content)
	if err != nil {
		return nil, err
	}
	md := make(metadata.MD)
	for _, m := range req.GetMetadata() {
		md[m.GetKey()] = m.GetValues()
	}
	ctx := metadata.NewIncomingContext(context.Background(), md)
	switch req.GetMethod() {
	case "example_net_httpGet_string_string":
		if len(req.GetArgs()) != 1 {
			return nil, fmt.Errorf("%s: invalid argument number: %d. expected number is %d", req.GetMethod(), len(req.GetArgs()), 1)
		}
		arg0, err := grpcfed.ToString(req.GetArgs()[0])
		if err != nil {
			return nil, err
		}
		ret, err := plug.Example_Net_HttpGet(ctx, arg0)
		if err != nil {
			return nil, err
		}
		return grpcfed.ToStringCELPluginResponse(ret)
	}
	return nil, fmt.Errorf("unexpected method name: %s", req.GetMethod())
}
