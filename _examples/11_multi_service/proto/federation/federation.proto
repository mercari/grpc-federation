syntax = "proto3";

package federation;

import "grpc/federation/federation.proto";
import "federation/reaction.proto";

option go_package = "example/federation;federation";

option (grpc.federation.file) = {
  import: ["favorite/favorite.proto"]
};

service FederationService {
  option (grpc.federation.service) = {
    env {
      var {
        name: "name"
        type { kind: STRING }
        option {
          default: "federation"
        }
      }
      var {
        name: "federation"
        type { kind: STRING }
      }
    }
    var {
      name: "upper_name"
      by: "grpc.federation.strings.toUpper(grpc.federation.env.name)"
    }
    var {
      name: "federation_service_variable"
      by: "1"
    }
    var {
      validation {
        if: "grpc.federation.env.name == ''"
        message: "'name environment variable is unspecified'"
      }
    }
  };
  rpc GetPost(GetPostRequest) returns (GetPostResponse) {};
  rpc GetName(GetNameRequest) returns (GetNameResponse) {};
}

service PrivateService {
  option (grpc.federation.service) = {
    env {
      var {
        name: "name"
        type { kind: STRING }
        option {
          default: "private"
        }
      }
      var {
        name: "private"
        type { kind: STRING }
      }
    }
    var {
      name: "upper_name"
      by: "grpc.federation.strings.toUpper(grpc.federation.env.name)"
    }
    var {
      name: "private_service_enum"
      enum {
        name: "MyFavoriteType"
        by: "favorite.FavoriteType.value('TYPE_1')"
      }
    }
    var {
      name: "private_service_user"
      message {
        name: "User"
        args [
          {name: "id" by: "'private_service_user_id'"},
          {name: "name" by: "'private_service_user_name'"}
        ]
      }
    }
    var { name: "users" by: "[private_service_user]"}
    var {
      name: "private_service_user_names"
      map {
        iterator {
          name: "iter"
          src: "users"
        }
        by: "iter.name"
      }
    }
  };
  rpc GetPost(GetPostRequest) returns (GetPostResponse) {};
  rpc GetName(GetNameRequest) returns (GetNameResponse) {};
}

service DebugService {
  option (grpc.federation.service) = {};
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {};
}

message GetPostRequest {
  string id = 1;
}

message GetPostResponse {
  option (grpc.federation.message).def = {
    name: "p"
    message { name: "Post" }
  };
  Post post = 1 [(grpc.federation.field).by = "p"];
  string upper_name = 2 [(grpc.federation.field).by = "grpc.federation.var.upper_name"];
}

message Post {
  option (grpc.federation.message).def = {
    name: "u"
    message {
      name: "User"
      args { name: "id", by: "'foo'" }
      args { name: "name", by: "'bar'" }
    }
  };
  option (grpc.federation.message).def = {
    name: "favorite_value" by: "favorite.FavoriteType.value('TYPE1')"
  };
  option (grpc.federation.message).def = {
    name: "cmp" by: "favorite_value == favorite.FavoriteType.TYPE1"
  };
  option (grpc.federation.message).def = {
    name: "reaction"
    message {
      name: "Reaction"
      args { name: "v" by: "favorite_value" }
    }
  };

  string id = 1 [(grpc.federation.field).by = "'post-id'"];
  string title = 2 [(grpc.federation.field).by = "'title'"];
  string content = 3 [(grpc.federation.field).by = "'content'"];
  User user = 4 [(grpc.federation.field).by = "u"];
  Reaction reaction = 5 [(grpc.federation.field).by = "reaction"];
  MyFavoriteType favorite_value = 6 [(grpc.federation.field).by = "favorite_value"];
  bool cmp = 7 [(grpc.federation.field).by = "cmp"];
}

enum MyFavoriteType {
  option (grpc.federation.enum).alias = "favorite.FavoriteType";

  UNKNOWN = 0 [(grpc.federation.enum_value).alias = "UNKNOWN"];
  TYPE1 = 5000 [(grpc.federation.enum_value).alias = "TYPE1"];
}

message User {
  string id = 1 [(grpc.federation.field).by = "$.id"];
  string name = 2 [(grpc.federation.field).by = "$.name"];
}

message GetNameRequest {
}

message GetNameResponse {
  string name = 1 [(grpc.federation.field).by = "grpc.federation.env.name"];
}

message GetStatusRequest {
}

message GetStatusResponse {
  option (grpc.federation.message).def = {
    name: "u"
    message {
      name: "User"
      args { name: "id", by: "'xxxx'" }
      args { name: "name", by: "'yyyy'" }
    }
  };

  User user = 1 [(grpc.federation.field).by = "u"];
}
