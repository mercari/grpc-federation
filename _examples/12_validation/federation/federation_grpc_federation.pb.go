// Code generated by protoc-gen-grpc-federation. DO NOT EDIT!
// versions:
//
//	protoc-gen-grpc-federation: (devel)
//
// source: federation/federation.proto
package federation

import (
	"context"
	"io"
	"log/slog"
	"reflect"

	grpcfed "github.com/mercari/grpc-federation/grpc/federation"
	grpcfedcel "github.com/mercari/grpc-federation/grpc/federation/cel"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/trace"
)

var (
	_ = reflect.Invalid // to avoid "imported and not used error"
)

// Org_Federation_CustomHandlerMessageVariable represents variable definitions in "org.federation.CustomHandlerMessage".
type FederationService_Org_Federation_CustomHandlerMessageVariable struct {
}

// Org_Federation_CustomHandlerMessageArgument is argument for "org.federation.CustomHandlerMessage" message.
type FederationService_Org_Federation_CustomHandlerMessageArgument struct {
	Arg string
	FederationService_Org_Federation_CustomHandlerMessageVariable
}

// Org_Federation_CustomMessageVariable represents variable definitions in "org.federation.CustomMessage".
type FederationService_Org_Federation_CustomMessageVariable struct {
}

// Org_Federation_CustomMessageArgument is argument for "org.federation.CustomMessage" message.
type FederationService_Org_Federation_CustomMessageArgument struct {
	Message string
	FederationService_Org_Federation_CustomMessageVariable
}

// Org_Federation_GetPostResponseVariable represents variable definitions in "org.federation.GetPostResponse".
type FederationService_Org_Federation_GetPostResponseVariable struct {
	Condition           bool
	CustomMessage       *CustomMessage
	Post                *Post
	XDef5ErrDetail0Msg0 *CustomMessage
	XDef5ErrDetail0Msg1 *CustomMessage
}

// Org_Federation_GetPostResponseArgument is argument for "org.federation.GetPostResponse" message.
type FederationService_Org_Federation_GetPostResponseArgument struct {
	Id string
	FederationService_Org_Federation_GetPostResponseVariable
}

// Org_Federation_PostVariable represents variable definitions in "org.federation.Post".
type FederationService_Org_Federation_PostVariable struct {
}

// Org_Federation_PostArgument is argument for "org.federation.Post" message.
type FederationService_Org_Federation_PostArgument struct {
	FederationService_Org_Federation_PostVariable
}

// FederationServiceConfig configuration required to initialize the service that use GRPC Federation.
type FederationServiceConfig struct {
	// Resolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
	// If this interface is not provided, an error is returned during initialization.
	Resolver FederationServiceResolver // required
	// ErrorHandler Federation Service often needs to convert errors received from downstream services.
	// If an error occurs during method execution in the Federation Service, this error handler is called and the returned error is treated as a final error.
	ErrorHandler grpcfed.ErrorHandler
	// Logger sets the logger used to output Debug/Info/Error information.
	Logger *slog.Logger
}

// FederationServiceClientFactory provides a factory that creates the gRPC Client needed to invoke methods of the gRPC Service on which the Federation Service depends.
type FederationServiceClientFactory interface {
}

// FederationServiceClientConfig helper to create gRPC client.
// Hints for creating a gRPC Client.
type FederationServiceClientConfig struct {
	// Service FQDN ( `<package-name>.<service-name>` ) of the service on Protocol Buffers.
	Service string
}

// FederationServiceDependentClientSet has a gRPC client for all services on which the federation service depends.
// This is provided as an argument when implementing the custom resolver.
type FederationServiceDependentClientSet struct {
}

// FederationServiceResolver provides an interface to directly implement message resolver and field resolver not defined in Protocol Buffers.
type FederationServiceResolver interface {
	// Resolve_Org_Federation_CustomHandlerMessage implements resolver for "org.federation.CustomHandlerMessage".
	Resolve_Org_Federation_CustomHandlerMessage(context.Context, *FederationService_Org_Federation_CustomHandlerMessageArgument) (*CustomHandlerMessage, error)
}

// FederationServiceCELPluginWasmConfig type alias for grpcfedcel.WasmConfig.
type FederationServiceCELPluginWasmConfig = grpcfedcel.WasmConfig

// FederationServiceCELPluginConfig hints for loading a WebAssembly based plugin.
type FederationServiceCELPluginConfig struct {
	CacheDir string
}

// FederationServiceUnimplementedResolver a structure implemented to satisfy the Resolver interface.
// An Unimplemented error is always returned.
// This is intended for use when there are many Resolver interfaces that do not need to be implemented,
// by embedding them in a resolver structure that you have created.
type FederationServiceUnimplementedResolver struct{}

// Resolve_Org_Federation_CustomHandlerMessage resolve "org.federation.CustomHandlerMessage".
// This method always returns Unimplemented error.
func (FederationServiceUnimplementedResolver) Resolve_Org_Federation_CustomHandlerMessage(context.Context, *FederationService_Org_Federation_CustomHandlerMessageArgument) (ret *CustomHandlerMessage, e error) {
	e = grpcfed.GRPCErrorf(grpcfed.UnimplementedCode, "method Resolve_Org_Federation_CustomHandlerMessage not implemented")
	return
}

// FederationService represents Federation Service.
type FederationService struct {
	UnimplementedFederationServiceServer
	cfg                FederationServiceConfig
	logger             *slog.Logger
	errorHandler       grpcfed.ErrorHandler
	celCacheMap        *grpcfed.CELCacheMap
	tracer             trace.Tracer
	resolver           FederationServiceResolver
	celTypeHelper      *grpcfed.CELTypeHelper
	celEnvOpts         []grpcfed.CELEnvOption
	celPluginInstances []*grpcfedcel.CELPluginInstance
	client             *FederationServiceDependentClientSet
}

// NewFederationService creates FederationService instance by FederationServiceConfig.
func NewFederationService(cfg FederationServiceConfig) (*FederationService, error) {
	if cfg.Resolver == nil {
		return nil, grpcfed.ErrResolverConfig
	}
	logger := cfg.Logger
	if logger == nil {
		logger = slog.New(slog.NewJSONHandler(io.Discard, nil))
	}
	errorHandler := cfg.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(ctx context.Context, methodName string, err error) error { return err }
	}
	celTypeHelperFieldMap := grpcfed.CELTypeHelperFieldMap{
		"grpc.federation.private.org.federation.CustomHandlerMessageArgument": {
			"arg": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Arg"),
		},
		"grpc.federation.private.org.federation.CustomMessageArgument": {
			"message": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Message"),
		},
		"grpc.federation.private.org.federation.GetPostResponseArgument": {
			"id": grpcfed.NewCELFieldType(grpcfed.CELStringType, "Id"),
		},
		"grpc.federation.private.org.federation.PostArgument": {},
	}
	celTypeHelper := grpcfed.NewCELTypeHelper("org.federation", celTypeHelperFieldMap)
	var celEnvOpts []grpcfed.CELEnvOption
	celEnvOpts = append(celEnvOpts, grpcfed.NewDefaultEnvOptions(celTypeHelper)...)
	svc := &FederationService{
		cfg:           cfg,
		logger:        logger,
		errorHandler:  errorHandler,
		celEnvOpts:    celEnvOpts,
		celTypeHelper: celTypeHelper,
		celCacheMap:   grpcfed.NewCELCacheMap(),
		tracer:        otel.Tracer("org.federation.FederationService"),
		resolver:      cfg.Resolver,
		client:        &FederationServiceDependentClientSet{},
	}
	if resolver, ok := cfg.Resolver.(grpcfed.CustomResolverInitializer); ok {
		ctx := context.Background()
		if err := resolver.Init(ctx); err != nil {
			return nil, err
		}
	}
	return svc, nil
}

// CleanupFederationService cleanup all resources to prevent goroutine leaks.
func CleanupFederationService(ctx context.Context, svc *FederationService) {
	svc.cleanup(ctx)
}

func (s *FederationService) cleanup(ctx context.Context) {
	for _, instance := range s.celPluginInstances {
		instance.Close(ctx)
	}
}

// GetPost implements "org.federation.FederationService/GetPost" method.
func (s *FederationService) GetPost(ctx context.Context, req *GetPostRequest) (res *GetPostResponse, e error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.FederationService/GetPost")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, s.logger)
	ctx = grpcfed.WithCELCacheMap(ctx, s.celCacheMap)
	defer func() {
		if r := recover(); r != nil {
			e = grpcfed.RecoverError(r, grpcfed.StackTrace())
			grpcfed.OutputErrorLog(ctx, e)
		}
	}()

	defer func() {
		// cleanup plugin instance memory.
		for _, instance := range s.celPluginInstances {
			instance.GC()
		}
	}()
	res, err := s.resolve_Org_Federation_GetPostResponse(ctx, &FederationService_Org_Federation_GetPostResponseArgument{
		Id: req.GetId(),
	})
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		grpcfed.OutputErrorLog(ctx, err)
		return nil, err
	}
	return res, nil
}

// resolve_Org_Federation_CustomHandlerMessage resolve "org.federation.CustomHandlerMessage" message.
func (s *FederationService) resolve_Org_Federation_CustomHandlerMessage(ctx context.Context, req *FederationService_Org_Federation_CustomHandlerMessageArgument) (*CustomHandlerMessage, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.CustomHandlerMessage")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.CustomHandlerMessage", slog.Any("message_args", s.logvalue_Org_Federation_CustomHandlerMessageArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			XDef0 bool
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.org.federation.CustomHandlerMessageArgument", req)}
	/*
		def {
		  name: "_def0"
		  validation {
		    error {
		      code: FAILED_PRECONDITION
		      if: "$.arg == 'wrong'"
		    }
		  }
		}
	*/
	def__def0 := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[bool, *localValueType]{
			Name: `_def0`,
			Type: grpcfed.CELBoolType,
			Setter: func(value *localValueType, v bool) error {
				value.vars.XDef0 = v
				return nil
			},
			Validation: func(ctx context.Context, value *localValueType) error {
				var stat *grpcfed.Status
				if err := grpcfed.If(ctx, &grpcfed.IfParam[*localValueType]{
					Value:      value,
					Expr:       `$.arg == 'wrong'`,
					CacheIndex: 1,
					Body: func(value *localValueType) error {
						errorMessage := "error"
						stat = grpcfed.NewGRPCStatus(grpcfed.FailedPreconditionCode, errorMessage)
						return nil
					},
				}); err != nil {
					return err
				}
				return grpcfed.NewErrorWithLogAttrs(stat.Err(), slog.LevelError, grpcfed.LogAttrs(ctx))
			},
		})
	}

	if err := def__def0(ctx); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	// create a message value to be returned.
	// `custom_resolver = true` in "grpc.federation.message" option.
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx)) // create a new reference to logger.
	ret, err := s.resolver.Resolve_Org_Federation_CustomHandlerMessage(ctx, req)
	if err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.CustomHandlerMessage", slog.Any("org.federation.CustomHandlerMessage", s.logvalue_Org_Federation_CustomHandlerMessage(ret)))
	return ret, nil
}

// resolve_Org_Federation_CustomMessage resolve "org.federation.CustomMessage" message.
func (s *FederationService) resolve_Org_Federation_CustomMessage(ctx context.Context, req *FederationService_Org_Federation_CustomMessageArgument) (*CustomMessage, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.CustomMessage")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.CustomMessage", slog.Any("message_args", s.logvalue_Org_Federation_CustomMessageArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.org.federation.CustomMessageArgument", req)}

	// create a message value to be returned.
	ret := &CustomMessage{}

	// field binding section.
	// (grpc.federation.field).by = "$.message"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `$.message`,
		CacheIndex: 2,
		Setter: func(v string) error {
			ret.Message = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.CustomMessage", slog.Any("org.federation.CustomMessage", s.logvalue_Org_Federation_CustomMessage(ret)))
	return ret, nil
}

// resolve_Org_Federation_GetPostResponse resolve "org.federation.GetPostResponse" message.
func (s *FederationService) resolve_Org_Federation_GetPostResponse(ctx context.Context, req *FederationService_Org_Federation_GetPostResponseArgument) (*GetPostResponse, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.GetPostResponse")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.GetPostResponse", slog.Any("message_args", s.logvalue_Org_Federation_GetPostResponseArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
			Condition               bool
			CustomHandler           *CustomHandlerMessage
			CustomMessage           *CustomMessage
			CustomMessageValidation bool
			Post                    *Post
			XDef10                  bool
			XDef3                   bool
			XDef4                   bool
			XDef5                   bool
			XDef5Def0               bool
			XDef5ErrDetail0Msg0     *CustomMessage
			XDef5ErrDetail0Msg1     *CustomMessage
			XDef6                   bool
			XDef8                   bool
			XDef9                   bool
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.org.federation.GetPostResponseArgument", req)}
	/*
		def {
		  name: "post"
		  message {
		    name: "Post"
		  }
		}
	*/
	def_post := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*Post, *localValueType]{
			Name: `post`,
			Type: grpcfed.CELObjectType("org.federation.Post"),
			Setter: func(value *localValueType, v *Post) error {
				value.vars.Post = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &FederationService_Org_Federation_PostArgument{}
				ret, err := s.resolve_Org_Federation_Post(ctx, args)
				if err != nil {
					return nil, err
				}
				return ret, nil
			},
		})
	}

	/*
		def {
		  name: "customHandler"
		  message {
		    name: "CustomHandlerMessage"
		    args { name: "arg", by: "'some-arg'" }
		  }
		}
	*/
	def_customHandler := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*CustomHandlerMessage, *localValueType]{
			Name: `customHandler`,
			Type: grpcfed.CELObjectType("org.federation.CustomHandlerMessage"),
			Setter: func(value *localValueType, v *CustomHandlerMessage) error {
				value.vars.CustomHandler = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &FederationService_Org_Federation_CustomHandlerMessageArgument{}
				// { name: "arg", by: "'some-arg'" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:      value,
					Expr:       `'some-arg'`,
					CacheIndex: 3,
					Setter: func(v string) error {
						args.Arg = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				ret, err := s.resolve_Org_Federation_CustomHandlerMessage(ctx, args)
				if err != nil {
					return nil, err
				}
				return ret, nil
			},
		})
	}

	/*
		def {
		  name: "customMessage"
		  message {
		    name: "CustomMessage"
		    args { name: "message", by: "'some-message'" }
		  }
		}
	*/
	def_customMessage := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[*CustomMessage, *localValueType]{
			Name: `customMessage`,
			Type: grpcfed.CELObjectType("org.federation.CustomMessage"),
			Setter: func(value *localValueType, v *CustomMessage) error {
				value.vars.CustomMessage = v
				return nil
			},
			Message: func(ctx context.Context, value *localValueType) (any, error) {
				args := &FederationService_Org_Federation_CustomMessageArgument{}
				// { name: "message", by: "'some-message'" }
				if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
					Value:      value,
					Expr:       `'some-message'`,
					CacheIndex: 4,
					Setter: func(v string) error {
						args.Message = v
						return nil
					},
				}); err != nil {
					return nil, err
				}
				ret, err := s.resolve_Org_Federation_CustomMessage(ctx, args)
				if err != nil {
					return nil, err
				}
				return ret, nil
			},
		})
	}

	/*
		def {
		  name: "_def3"
		  validation {
		    error {
		      code: FAILED_PRECONDITION
		      if: "post.id != 'some-id'"
		      message: "'validation1 failed!'"
		    }
		  }
		}
	*/
	def__def3 := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[bool, *localValueType]{
			Name: `_def3`,
			Type: grpcfed.CELBoolType,
			Setter: func(value *localValueType, v bool) error {
				value.vars.XDef3 = v
				return nil
			},
			Validation: func(ctx context.Context, value *localValueType) error {
				var stat *grpcfed.Status
				if err := grpcfed.If(ctx, &grpcfed.IfParam[*localValueType]{
					Value:      value,
					Expr:       `post.id != 'some-id'`,
					CacheIndex: 5,
					Body: func(value *localValueType) error {
						errmsg, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
							Value:      value,
							Expr:       `'validation1 failed!'`,
							OutType:    reflect.TypeOf(""),
							CacheIndex: 6,
						})
						if err != nil {
							return err
						}
						errorMessage := errmsg.(string)
						stat = grpcfed.NewGRPCStatus(grpcfed.FailedPreconditionCode, errorMessage)
						return nil
					},
				}); err != nil {
					return err
				}
				return grpcfed.NewErrorWithLogAttrs(stat.Err(), slog.LevelError, grpcfed.LogAttrs(ctx))
			},
		})
	}

	/*
		def {
		  name: "_def4"
		  validation {
		    error {
		      code: FAILED_PRECONDITION
		      if: "post.id != 'some-id'"
		      message: "'validation2 failed!'"
		    }
		  }
		}
	*/
	def__def4 := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[bool, *localValueType]{
			Name: `_def4`,
			Type: grpcfed.CELBoolType,
			Setter: func(value *localValueType, v bool) error {
				value.vars.XDef4 = v
				return nil
			},
			Validation: func(ctx context.Context, value *localValueType) error {
				var stat *grpcfed.Status
				if err := grpcfed.If(ctx, &grpcfed.IfParam[*localValueType]{
					Value:      value,
					Expr:       `post.id != 'some-id'`,
					CacheIndex: 7,
					Body: func(value *localValueType) error {
						errmsg, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
							Value:      value,
							Expr:       `'validation2 failed!'`,
							OutType:    reflect.TypeOf(""),
							CacheIndex: 8,
						})
						if err != nil {
							return err
						}
						errorMessage := errmsg.(string)
						stat = grpcfed.NewGRPCStatus(grpcfed.FailedPreconditionCode, errorMessage)
						return nil
					},
				}); err != nil {
					return err
				}
				return grpcfed.NewErrorWithLogAttrs(stat.Err(), slog.LevelError, grpcfed.LogAttrs(ctx))
			},
		})
	}

	/*
		def {
		  name: "_def5"
		  validation {
		    error {
		      code: FAILED_PRECONDITION
		      if: "$.id != 'correct-id'"
		      message: "'validation3 failed!'"
		      details {
		        if: "true"
		        message: [
		          {...},
		          {...}
		        ]
		        precondition_failure {...}
		        bad_request {...}
		        localized_message {...}
		      }
		    }
		  }
		}
	*/
	def__def5 := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[bool, *localValueType]{
			Name: `_def5`,
			Type: grpcfed.CELBoolType,
			Setter: func(value *localValueType, v bool) error {
				value.vars.XDef5 = v
				return nil
			},
			Validation: func(ctx context.Context, value *localValueType) error {
				var stat *grpcfed.Status
				if _, err := func() (any, error) {
					/*
						def {
						  name: "_def5_def0"
						  by: "grpc.federation.log.add({'validation3_attrs': true})"
						}
					*/
					def__def5_def0 := func(ctx context.Context) error {
						return grpcfed.EvalDef(ctx, value, grpcfed.Def[bool, *localValueType]{
							Name: `_def5_def0`,
							Type: grpcfed.CELBoolType,
							Setter: func(value *localValueType, v bool) error {
								value.vars.XDef5Def0 = v
								return nil
							},
							By:           `grpc.federation.log.add({'validation3_attrs': true})`,
							ByCacheIndex: 9,
						})
					}

					if err := def__def5_def0(ctx); err != nil {
						grpcfed.RecordErrorToSpan(ctx, err)
						return nil, err
					}
					return nil, nil
				}(); err != nil {
					return err
				}
				if err := grpcfed.If(ctx, &grpcfed.IfParam[*localValueType]{
					Value:      value,
					Expr:       `$.id != 'correct-id'`,
					CacheIndex: 10,
					Body: func(value *localValueType) error {
						errmsg, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
							Value:      value,
							Expr:       `'validation3 failed!'`,
							OutType:    reflect.TypeOf(""),
							CacheIndex: 11,
						})
						if err != nil {
							return err
						}
						errorMessage := errmsg.(string)
						var details []grpcfed.ProtoMessage
						if err := grpcfed.If(ctx, &grpcfed.IfParam[*localValueType]{
							Value:      value,
							Expr:       `true`,
							CacheIndex: 12,
							Body: func(value *localValueType) error {
								if _, err := func() (any, error) {
									/*
										def {
										  name: "_def5_err_detail0_msg0"
										  message {
										    name: "CustomMessage"
										    args { name: "message", by: "'message1'" }
										  }
										}
									*/
									def__def5_err_detail0_msg0 := func(ctx context.Context) error {
										return grpcfed.EvalDef(ctx, value, grpcfed.Def[*CustomMessage, *localValueType]{
											Name: `_def5_err_detail0_msg0`,
											Type: grpcfed.CELObjectType("org.federation.CustomMessage"),
											Setter: func(value *localValueType, v *CustomMessage) error {
												value.vars.XDef5ErrDetail0Msg0 = v
												return nil
											},
											Message: func(ctx context.Context, value *localValueType) (any, error) {
												args := &FederationService_Org_Federation_CustomMessageArgument{}
												// { name: "message", by: "'message1'" }
												if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
													Value:      value,
													Expr:       `'message1'`,
													CacheIndex: 13,
													Setter: func(v string) error {
														args.Message = v
														return nil
													},
												}); err != nil {
													return nil, err
												}
												ret, err := s.resolve_Org_Federation_CustomMessage(ctx, args)
												if err != nil {
													return nil, err
												}
												return ret, nil
											},
										})
									}

									/*
										def {
										  name: "_def5_err_detail0_msg1"
										  message {
										    name: "CustomMessage"
										    args { name: "message", by: "'message2'" }
										  }
										}
									*/
									def__def5_err_detail0_msg1 := func(ctx context.Context) error {
										return grpcfed.EvalDef(ctx, value, grpcfed.Def[*CustomMessage, *localValueType]{
											Name: `_def5_err_detail0_msg1`,
											Type: grpcfed.CELObjectType("org.federation.CustomMessage"),
											Setter: func(value *localValueType, v *CustomMessage) error {
												value.vars.XDef5ErrDetail0Msg1 = v
												return nil
											},
											Message: func(ctx context.Context, value *localValueType) (any, error) {
												args := &FederationService_Org_Federation_CustomMessageArgument{}
												// { name: "message", by: "'message2'" }
												if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
													Value:      value,
													Expr:       `'message2'`,
													CacheIndex: 14,
													Setter: func(v string) error {
														args.Message = v
														return nil
													},
												}); err != nil {
													return nil, err
												}
												ret, err := s.resolve_Org_Federation_CustomMessage(ctx, args)
												if err != nil {
													return nil, err
												}
												return ret, nil
											},
										})
									}

									// A tree view of message dependencies is shown below.
									/*
									   _def5_err_detail0_msg0 ─┐
									   _def5_err_detail0_msg1 ─┤
									*/
									eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)

									grpcfed.GoWithRecover(eg, func() (any, error) {
										if err := def__def5_err_detail0_msg0(ctx1); err != nil {
											grpcfed.RecordErrorToSpan(ctx1, err)
											return nil, err
										}
										return nil, nil
									})

									grpcfed.GoWithRecover(eg, func() (any, error) {
										if err := def__def5_err_detail0_msg1(ctx1); err != nil {
											grpcfed.RecordErrorToSpan(ctx1, err)
											return nil, err
										}
										return nil, nil
									})

									if err := eg.Wait(); err != nil {
										return nil, err
									}
									return nil, nil
								}(); err != nil {
									return err
								}
								if detail := grpcfed.CustomMessage(ctx, &grpcfed.CustomMessageParam{
									Value:            value,
									MessageValueName: "_def5_err_detail0_msg0",
									CacheIndex:       15,
									MessageIndex:     0,
								}); detail != nil {
									details = append(details, detail)
								}
								if detail := grpcfed.CustomMessage(ctx, &grpcfed.CustomMessageParam{
									Value:            value,
									MessageValueName: "_def5_err_detail0_msg1",
									CacheIndex:       16,
									MessageIndex:     1,
								}); detail != nil {
									details = append(details, detail)
								}
								{
									detail, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
										Value:      value,
										Expr:       `CustomMessage{message: 'foo'}`,
										OutType:    reflect.TypeOf((*CustomMessage)(nil)),
										CacheIndex: 17,
									})
									if err != nil {
										grpcfed.Logger(ctx).ErrorContext(ctx, "failed setting error details", slog.String("error", err.Error()))
									}
									if detail != nil {
										details = append(details, detail.(grpcfed.ProtoMessage))
									}
								}
								if detail := grpcfed.PreconditionFailure(ctx, value, []*grpcfed.PreconditionFailureViolation{
									{
										Type:              `'type1'`,
										Subject:           `post.id`,
										Desc:              `'description1'`,
										TypeCacheIndex:    18,
										SubjectCacheIndex: 19,
										DescCacheIndex:    20,
									},
								}); detail != nil {
									details = append(details, detail)
								}
								if detail := grpcfed.BadRequest(ctx, value, []*grpcfed.BadRequestFieldViolation{
									{
										Field:           `post.id`,
										Desc:            `'description2'`,
										FieldCacheIndex: 21,
										DescCacheIndex:  22,
									},
								}); detail != nil {
									details = append(details, detail)
								}
								if detail := grpcfed.LocalizedMessage(ctx, &grpcfed.LocalizedMessageParam{
									Value:      value,
									Locale:     "en-US",
									Message:    `post.content`,
									CacheIndex: 23,
								}); detail != nil {
									details = append(details, detail)
								}
								return nil
							},
						}); err != nil {
							return err
						}
						status := grpcfed.NewGRPCStatus(grpcfed.FailedPreconditionCode, errorMessage)
						statusWithDetails, err := status.WithDetails(details...)
						if err != nil {
							grpcfed.Logger(ctx).ErrorContext(ctx, "failed setting error details", slog.String("error", err.Error()))
							stat = status
						} else {
							stat = statusWithDetails
						}
						return nil
					},
				}); err != nil {
					return err
				}
				return grpcfed.NewErrorWithLogAttrs(stat.Err(), slog.LevelWarn, grpcfed.LogAttrs(ctx))
			},
		})
	}

	/*
		def {
		  name: "_def6"
		  validation {
		    error {
		      code: FAILED_PRECONDITION
		      if: "condition"
		      message: "'validation4 failed!'"
		    }
		  }
		}
	*/
	def__def6 := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[bool, *localValueType]{
			Name: `_def6`,
			Type: grpcfed.CELBoolType,
			Setter: func(value *localValueType, v bool) error {
				value.vars.XDef6 = v
				return nil
			},
			Validation: func(ctx context.Context, value *localValueType) error {
				var stat *grpcfed.Status
				if _, err := func() (any, error) {
					/*
						def {
						  name: "condition"
						  by: "post.id != 'some-id'"
						}
					*/
					def_condition := func(ctx context.Context) error {
						return grpcfed.EvalDef(ctx, value, grpcfed.Def[bool, *localValueType]{
							Name: `condition`,
							Type: grpcfed.CELBoolType,
							Setter: func(value *localValueType, v bool) error {
								value.vars.Condition = v
								return nil
							},
							By:           `post.id != 'some-id'`,
							ByCacheIndex: 24,
						})
					}

					if err := def_condition(ctx); err != nil {
						grpcfed.RecordErrorToSpan(ctx, err)
						return nil, err
					}
					return nil, nil
				}(); err != nil {
					return err
				}
				if err := grpcfed.If(ctx, &grpcfed.IfParam[*localValueType]{
					Value:      value,
					Expr:       `condition`,
					CacheIndex: 25,
					Body: func(value *localValueType) error {
						errmsg, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
							Value:      value,
							Expr:       `'validation4 failed!'`,
							OutType:    reflect.TypeOf(""),
							CacheIndex: 26,
						})
						if err != nil {
							return err
						}
						errorMessage := errmsg.(string)
						stat = grpcfed.NewGRPCStatus(grpcfed.FailedPreconditionCode, errorMessage)
						return nil
					},
				}); err != nil {
					return err
				}
				return grpcfed.NewErrorWithLogAttrs(stat.Err(), slog.LevelError, grpcfed.LogAttrs(ctx))
			},
		})
	}

	/*
		def {
		  name: "customMessageValidation"
		  validation {
		    error {
		      code: INTERNAL
		      if: "customMessage.message == ''"
		      message: "'custom message is empty'"
		    }
		  }
		}
	*/
	def_customMessageValidation := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[bool, *localValueType]{
			Name: `customMessageValidation`,
			Type: grpcfed.CELBoolType,
			Setter: func(value *localValueType, v bool) error {
				value.vars.CustomMessageValidation = v
				return nil
			},
			Validation: func(ctx context.Context, value *localValueType) error {
				var stat *grpcfed.Status
				if err := grpcfed.If(ctx, &grpcfed.IfParam[*localValueType]{
					Value:      value,
					Expr:       `customMessage.message == ''`,
					CacheIndex: 27,
					Body: func(value *localValueType) error {
						errmsg, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
							Value:      value,
							Expr:       `'custom message is empty'`,
							OutType:    reflect.TypeOf(""),
							CacheIndex: 28,
						})
						if err != nil {
							return err
						}
						errorMessage := errmsg.(string)
						stat = grpcfed.NewGRPCStatus(grpcfed.InternalCode, errorMessage)
						return nil
					},
				}); err != nil {
					return err
				}
				return grpcfed.NewErrorWithLogAttrs(stat.Err(), slog.LevelError, grpcfed.LogAttrs(ctx))
			},
		})
	}

	/*
		def {
		  name: "_def8"
		  validation {
		    error {
		      code: INTERNAL
		      if: "post.item == null"
		      message: "'item is null'"
		    }
		  }
		}
	*/
	def__def8 := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[bool, *localValueType]{
			Name: `_def8`,
			Type: grpcfed.CELBoolType,
			Setter: func(value *localValueType, v bool) error {
				value.vars.XDef8 = v
				return nil
			},
			Validation: func(ctx context.Context, value *localValueType) error {
				var stat *grpcfed.Status
				if err := grpcfed.If(ctx, &grpcfed.IfParam[*localValueType]{
					Value:      value,
					Expr:       `post.item == null`,
					CacheIndex: 29,
					Body: func(value *localValueType) error {
						errmsg, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
							Value:      value,
							Expr:       `'item is null'`,
							OutType:    reflect.TypeOf(""),
							CacheIndex: 30,
						})
						if err != nil {
							return err
						}
						errorMessage := errmsg.(string)
						stat = grpcfed.NewGRPCStatus(grpcfed.InternalCode, errorMessage)
						return nil
					},
				}); err != nil {
					return err
				}
				return grpcfed.NewErrorWithLogAttrs(stat.Err(), slog.LevelError, grpcfed.LogAttrs(ctx))
			},
		})
	}

	/*
		def {
		  name: "_def9"
		  validation {
		    error {
		      code: INTERNAL
		      if: "post.item.item_id == 0"
		      message: "'item id is zero'"
		    }
		  }
		}
	*/
	def__def9 := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[bool, *localValueType]{
			Name: `_def9`,
			Type: grpcfed.CELBoolType,
			Setter: func(value *localValueType, v bool) error {
				value.vars.XDef9 = v
				return nil
			},
			Validation: func(ctx context.Context, value *localValueType) error {
				var stat *grpcfed.Status
				if err := grpcfed.If(ctx, &grpcfed.IfParam[*localValueType]{
					Value:      value,
					Expr:       `post.item.item_id == 0`,
					CacheIndex: 31,
					Body: func(value *localValueType) error {
						errmsg, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
							Value:      value,
							Expr:       `'item id is zero'`,
							OutType:    reflect.TypeOf(""),
							CacheIndex: 32,
						})
						if err != nil {
							return err
						}
						errorMessage := errmsg.(string)
						stat = grpcfed.NewGRPCStatus(grpcfed.InternalCode, errorMessage)
						return nil
					},
				}); err != nil {
					return err
				}
				return grpcfed.NewErrorWithLogAttrs(stat.Err(), slog.LevelError, grpcfed.LogAttrs(ctx))
			},
		})
	}

	/*
		def {
		  name: "_def10"
		  validation {
		    error {
		      code: INTERNAL
		      if: "post.item.name == ''"
		      message: "'item name is empty'"
		    }
		  }
		}
	*/
	def__def10 := func(ctx context.Context) error {
		return grpcfed.EvalDef(ctx, value, grpcfed.Def[bool, *localValueType]{
			Name: `_def10`,
			Type: grpcfed.CELBoolType,
			Setter: func(value *localValueType, v bool) error {
				value.vars.XDef10 = v
				return nil
			},
			Validation: func(ctx context.Context, value *localValueType) error {
				var stat *grpcfed.Status
				if err := grpcfed.If(ctx, &grpcfed.IfParam[*localValueType]{
					Value:      value,
					Expr:       `post.item.name == ''`,
					CacheIndex: 33,
					Body: func(value *localValueType) error {
						errmsg, err := grpcfed.EvalCEL(ctx, &grpcfed.EvalCELRequest{
							Value:      value,
							Expr:       `'item name is empty'`,
							OutType:    reflect.TypeOf(""),
							CacheIndex: 34,
						})
						if err != nil {
							return err
						}
						errorMessage := errmsg.(string)
						stat = grpcfed.NewGRPCStatus(grpcfed.InternalCode, errorMessage)
						return nil
					},
				}); err != nil {
					return err
				}
				return grpcfed.NewErrorWithLogAttrs(stat.Err(), slog.LevelError, grpcfed.LogAttrs(ctx))
			},
		})
	}

	// A tree view of message dependencies is shown below.
	/*
	   post ─┐
	         _def3 ─┐
	                _def4 ─┐
	                       _def5 ─┐
	                                      _def6 ─┐
	                              customMessage ─┤
	                                             customMessageValidation ─┐
	                                                                      _def8 ─┐
	                                                                             _def9 ─┐
	                                                                                           _def10 ─┐
	                                                                                    customHandler ─┤
	*/
	eg, ctx1 := grpcfed.ErrorGroupWithContext(ctx)

	grpcfed.GoWithRecover(eg, func() (any, error) {
		eg, ctx2 := grpcfed.ErrorGroupWithContext(ctx1)
		grpcfed.GoWithRecover(eg, func() (any, error) {
			if err := def_post(ctx2); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			if err := def__def3(ctx2); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			if err := def__def4(ctx2); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			if err := def__def5(ctx2); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			if err := def__def6(ctx2); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			return nil, nil
		})
		grpcfed.GoWithRecover(eg, func() (any, error) {
			if err := def_customMessage(ctx2); err != nil {
				grpcfed.RecordErrorToSpan(ctx2, err)
				return nil, err
			}
			return nil, nil
		})
		if err := eg.Wait(); err != nil {
			return nil, err
		}
		if err := def_customMessageValidation(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		if err := def__def8(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		if err := def__def9(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		if err := def__def10(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	grpcfed.GoWithRecover(eg, func() (any, error) {
		if err := def_customHandler(ctx1); err != nil {
			grpcfed.RecordErrorToSpan(ctx1, err)
			return nil, err
		}
		return nil, nil
	})

	if err := eg.Wait(); err != nil {
		return nil, err
	}

	// assign named parameters to message arguments to pass to the custom resolver.
	req.FederationService_Org_Federation_GetPostResponseVariable.Condition = value.vars.Condition
	req.FederationService_Org_Federation_GetPostResponseVariable.CustomMessage = value.vars.CustomMessage
	req.FederationService_Org_Federation_GetPostResponseVariable.Post = value.vars.Post
	req.FederationService_Org_Federation_GetPostResponseVariable.XDef5ErrDetail0Msg0 = value.vars.XDef5ErrDetail0Msg0
	req.FederationService_Org_Federation_GetPostResponseVariable.XDef5ErrDetail0Msg1 = value.vars.XDef5ErrDetail0Msg1

	// create a message value to be returned.
	ret := &GetPostResponse{}

	// field binding section.
	// (grpc.federation.field).by = "post"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*Post]{
		Value:      value,
		Expr:       `post`,
		CacheIndex: 35,
		Setter: func(v *Post) error {
			ret.Post = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.GetPostResponse", slog.Any("org.federation.GetPostResponse", s.logvalue_Org_Federation_GetPostResponse(ret)))
	return ret, nil
}

// resolve_Org_Federation_Post resolve "org.federation.Post" message.
func (s *FederationService) resolve_Org_Federation_Post(ctx context.Context, req *FederationService_Org_Federation_PostArgument) (*Post, error) {
	ctx, span := s.tracer.Start(ctx, "org.federation.Post")
	defer span.End()
	ctx = grpcfed.WithLogger(ctx, grpcfed.Logger(ctx), grpcfed.LogAttrs(ctx)...)

	grpcfed.Logger(ctx).DebugContext(ctx, "resolve org.federation.Post", slog.Any("message_args", s.logvalue_Org_Federation_PostArgument(req)))
	type localValueType struct {
		*grpcfed.LocalValue
		vars struct {
		}
	}
	value := &localValueType{LocalValue: grpcfed.NewLocalValue(ctx, s.celEnvOpts, "grpc.federation.private.org.federation.PostArgument", req)}

	// create a message value to be returned.
	ret := &Post{}

	// field binding section.
	// (grpc.federation.field).by = "'some-id'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `'some-id'`,
		CacheIndex: 36,
		Setter: func(v string) error {
			ret.Id = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "'some-title'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `'some-title'`,
		CacheIndex: 37,
		Setter: func(v string) error {
			ret.Title = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "'some-content'"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[string]{
		Value:      value,
		Expr:       `'some-content'`,
		CacheIndex: 38,
		Setter: func(v string) error {
			ret.Content = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}
	// (grpc.federation.field).by = "Item{item_id: 2, name: 'item-name2'}"
	if err := grpcfed.SetCELValue(ctx, &grpcfed.SetCELValueParam[*Item]{
		Value:      value,
		Expr:       `Item{item_id: 2, name: 'item-name2'}`,
		CacheIndex: 39,
		Setter: func(v *Item) error {
			ret.Item = v
			return nil
		},
	}); err != nil {
		grpcfed.RecordErrorToSpan(ctx, err)
		return nil, err
	}

	grpcfed.Logger(ctx).DebugContext(ctx, "resolved org.federation.Post", slog.Any("org.federation.Post", s.logvalue_Org_Federation_Post(ret)))
	return ret, nil
}

func (s *FederationService) logvalue_Org_Federation_CustomHandlerMessage(v *CustomHandlerMessage) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}

func (s *FederationService) logvalue_Org_Federation_CustomHandlerMessageArgument(v *FederationService_Org_Federation_CustomHandlerMessageArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("arg", v.Arg),
	)
}

func (s *FederationService) logvalue_Org_Federation_CustomMessage(v *CustomMessage) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("message", v.GetMessage()),
	)
}

func (s *FederationService) logvalue_Org_Federation_CustomMessageArgument(v *FederationService_Org_Federation_CustomMessageArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("message", v.Message),
	)
}

func (s *FederationService) logvalue_Org_Federation_GetPostResponse(v *GetPostResponse) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Any("post", s.logvalue_Org_Federation_Post(v.GetPost())),
	)
}

func (s *FederationService) logvalue_Org_Federation_GetPostResponseArgument(v *FederationService_Org_Federation_GetPostResponseArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.Id),
	)
}

func (s *FederationService) logvalue_Org_Federation_Item(v *Item) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.Int64("item_id", int64(v.GetItemId())),
		slog.String("name", v.GetName()),
	)
}

func (s *FederationService) logvalue_Org_Federation_Post(v *Post) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue(
		slog.String("id", v.GetId()),
		slog.String("title", v.GetTitle()),
		slog.String("content", v.GetContent()),
		slog.Any("item", s.logvalue_Org_Federation_Item(v.GetItem())),
	)
}

func (s *FederationService) logvalue_Org_Federation_PostArgument(v *FederationService_Org_Federation_PostArgument) slog.Value {
	if v == nil {
		return slog.GroupValue()
	}
	return slog.GroupValue()
}
