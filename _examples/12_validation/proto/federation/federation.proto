syntax = "proto3";

package org.federation;

import "google/protobuf/any.proto";
import "grpc/federation/federation.proto";

option go_package = "example/federation;federation";

service FederationService {
  option (grpc.federation.service) = {};
  rpc GetPost(GetPostRequest) returns (GetPostResponse) {};
}

message GetPostRequest {
  string id = 1;
}

message GetPostResponse {
  option (grpc.federation.message) = {
    def [
      { name: "post" message { name: "Post" } },
      {
        name: "customHandler"
        message {
          name: "CustomHandlerMessage",
          args: {name: "arg", by: "'some-arg'"}
        }
      },
      {
        name: "customMessage"
        message {
          name: "CustomMessage",
          args: {name: "message", by: "'some-message'"}
        }
      },
      {
        validation {
          error {
            code: FAILED_PRECONDITION
            message: "'validation1 failed!'",
            if: "post.id != 'some-id'"
          }
        }
      },
      {
        validation {
          error {
            code: FAILED_PRECONDITION
            message: "'validation2 failed!'",
            if: "post.id != 'some-id'"
          }
        }
      },
      {
        validation {
          error: {
            log_level: WARN
            def [
              { by: "grpc.federation.log.add({'validation3_attrs': true})" }
            ]
            code: FAILED_PRECONDITION,
            message: "'validation3 failed!'",
            if: "$.id != 'correct-id'"
            details: {
              by: "CustomMessage{message: 'foo'}"
              message: [
                {
                  name: "CustomMessage",
                  args: {
                    name: "message",
                    by: "'message1'"
                  }
                },
                {
                  name: "CustomMessage",
                  args: {
                    name: "message",
                    by: "'message2'"
                  }
                }
              ]
              precondition_failure {
                violations: [
                  {
                    type: "'type1'"
                    subject: "post.id"
                    description: "'description1'"
                  }
                ]
              }
              bad_request {
                field_violations: [
                  {
                    field: "post.id"
                    description: "'description2'"
                  }
                ]
              }
              localized_message {
                locale: "en-US"
                message: "post.content"
              }
            }
          }
        }
      },
      {
        validation {
          error {
            def [
              {
                name: "condition",
                by: "post.id != 'some-id'"
              }
            ]
            code: FAILED_PRECONDITION
            message: "'validation4 failed!'",
            if: "condition"
          }
        }
      },
      {
        name: "customMessageValidation"
        validation : {error {code : INTERNAL message : "'custom message is empty'" if : "customMessage.message == ''"}}
      },
      {validation : {error {code : INTERNAL message : "'item is null'" if : "post.item == null"}}},
      {validation : {error {code : INTERNAL message : "'item id is zero'" if : "post.item.item_id == 0"}}},
      {validation : {error {code : INTERNAL message : "'item name is empty'" if : "post.item.name == ''"}}}
    ]
  };
  Post post = 1 [(grpc.federation.field).by = "post"];
}

message Post {
  string id = 1 [(grpc.federation.field).by = "'some-id'"];
  string title = 2 [(grpc.federation.field).by = "'some-title'"];
  string content = 3 [(grpc.federation.field).by = "'some-content'"];
  Item item = 4 [(grpc.federation.field).by = "Item{item_id: 2, name: 'item-name2'}"];
}

message Item {
  int32 item_id = 1 [(grpc.federation.field).by = "1"];
  string name = 2 [(grpc.federation.field).by = "'item-name'"];
}

message CustomMessage {
  string message = 1 [(grpc.federation.field).by = "$.message"];
}

message CustomHandlerMessage {
  option (grpc.federation.message) = {
    def {
      validation {
        error {
          code: FAILED_PRECONDITION
          if: "$.arg == 'wrong'"
        }
      }
    }
    custom_resolver: true
  };
}
