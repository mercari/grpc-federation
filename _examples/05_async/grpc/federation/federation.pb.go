// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: grpc/federation/federation.proto

package federation

import (
	code "google.golang.org/genproto/googleapis/rpc/code"
	errdetails "google.golang.org/genproto/googleapis/rpc/errdetails"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnumRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// alias mapping between enums defined in other packages and enums defined on the federation service side.
	// The alias is the FQDN ( <package-name>.<enum-name> ) to the enum.
	// If this definition exists, type conversion is automatically performed before the enum value assignment operation.
	// If a enum with this option has a value that is not present in the enum specified by alias, and the alias option is not specified for that value, an error is occurred.
	Alias *string `protobuf:"bytes,1,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
}

func (x *EnumRule) Reset() {
	*x = EnumRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumRule) ProtoMessage() {}

func (x *EnumRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumRule.ProtoReflect.Descriptor instead.
func (*EnumRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{0}
}

func (x *EnumRule) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

type EnumValueRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// specifies the default value of the enum.
	// All values other than those specified in alias will be default values.
	Default *bool `protobuf:"varint,1,opt,name=default,proto3,oneof" json:"default,omitempty"`
	// alias can be used when alias is specified in grpc.federation.enum option,
	// and specifies the value name to be referenced among the enums specified in alias of enum option.
	// multiple value names can be specified for alias.
	Alias []string `protobuf:"bytes,2,rep,name=alias,proto3" json:"alias,omitempty"`
}

func (x *EnumValueRule) Reset() {
	*x = EnumValueRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumValueRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumValueRule) ProtoMessage() {}

func (x *EnumValueRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumValueRule.ProtoReflect.Descriptor instead.
func (*EnumValueRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{1}
}

func (x *EnumValueRule) GetDefault() bool {
	if x != nil && x.Default != nil {
		return *x.Default
	}
	return false
}

func (x *EnumValueRule) GetAlias() []string {
	if x != nil {
		return x.Alias
	}
	return nil
}

type OneofRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OneofRule) Reset() {
	*x = OneofRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneofRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofRule) ProtoMessage() {}

func (x *OneofRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofRule.ProtoReflect.Descriptor instead.
func (*OneofRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{2}
}

// ServiceRule define GRPC Federation rules for the service.
type ServiceRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dependencies defines a unique name for all services on which federation service depends.
	// The name will be used when creating the gRPC client.
	Dependencies []*ServiceDependency `protobuf:"bytes,1,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *ServiceRule) Reset() {
	*x = ServiceRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRule) ProtoMessage() {}

func (x *ServiceRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRule.ProtoReflect.Descriptor instead.
func (*ServiceRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceRule) GetDependencies() []*ServiceDependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

// ServiceDependency assigns a uniquely determined name to the service.
type ServiceDependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name to be used when initializing the gRPC client.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// service is the name of the dependent service.
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
}

func (x *ServiceDependency) Reset() {
	*x = ServiceDependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceDependency) ProtoMessage() {}

func (x *ServiceDependency) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceDependency.ProtoReflect.Descriptor instead.
func (*ServiceDependency) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{4}
}

func (x *ServiceDependency) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ServiceDependency) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

type MethodRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the time to timeout. If the specified time period elapses, DEADLINE_EXCEEDED status is returned.
	// If you want to handle this error, you need to implement a custom error handler in Go.
	// The format is the same as Go's time.Duration format. See https://pkg.go.dev/time#ParseDuration.
	Timeout *string `protobuf:"bytes,1,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
}

func (x *MethodRule) Reset() {
	*x = MethodRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodRule) ProtoMessage() {}

func (x *MethodRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodRule.ProtoReflect.Descriptor instead.
func (*MethodRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{5}
}

func (x *MethodRule) GetTimeout() string {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return ""
}

// MessageRule define GRPC Federation rules for the message.
type MessageRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resolver defines how to call methods to obtain the values needed to compose the message.
	Resolver *Resolver `protobuf:"bytes,1,opt,name=resolver,proto3,oneof" json:"resolver,omitempty"`
	// messages defines a list of dependent messages that must be retrieved to compose a message.
	Messages []*Message `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	// if custom_resolver is true, the resolver for this message is implemented by Go.
	// If there are any values retrieved by resolver or messages, they are passed as arguments for custom resolver.
	// Each field of the message returned by the custom resolver is automatically bound.
	// If you want to change the binding process for a particular field, set `custom_resolver=true` option for that field.
	CustomResolver *bool `protobuf:"varint,3,opt,name=custom_resolver,json=customResolver,proto3,oneof" json:"custom_resolver,omitempty"`
	// alias mapping between messages defined in other packages and messages defined on the federation service side.
	// The alias is the FQDN ( <package-name>.<message-name> ) to the message.
	// If this definition exists, type conversion is automatically performed before the field assignment operation.
	// If a message with this option has a field that is not present in the message specified by alias, and the alias option is not specified for that field, an error is occurred.
	Alias *string `protobuf:"bytes,4,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// validations defines a list of validations that must run using variables defined within the current scope.
	// The validations in the same Validation block run in order, starting from the validation that is ready for evaluation.
	// It determines success or failure when all the validations in the same Validation block have been completed.
	// If the Validation block is marked as failure, an error is returned without waiting for the other Validation blocks.
	Validations []*Validation `protobuf:"bytes,5,rep,name=validations,proto3" json:"validations,omitempty"`
}

func (x *MessageRule) Reset() {
	*x = MessageRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRule) ProtoMessage() {}

func (x *MessageRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRule.ProtoReflect.Descriptor instead.
func (*MessageRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{6}
}

func (x *MessageRule) GetResolver() *Resolver {
	if x != nil {
		return x.Resolver
	}
	return nil
}

func (x *MessageRule) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *MessageRule) GetCustomResolver() bool {
	if x != nil && x.CustomResolver != nil {
		return *x.CustomResolver
	}
	return false
}

func (x *MessageRule) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *MessageRule) GetValidations() []*Validation {
	if x != nil {
		return x.Validations
	}
	return nil
}

// Resolver define the gRPC method, how to call it, and which value to use in the return value.
type Resolver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method specify the FQDN for the gRPC method. format is `<package-name>.<service-name>/<method-name>`.
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// request specify request parameters for the gRPC method.
	Request []*MethodRequest `protobuf:"bytes,2,rep,name=request,proto3" json:"request,omitempty"`
	// response specify which value in the gRPC method response is referenced by which name.
	Response []*MethodResponse `protobuf:"bytes,3,rep,name=response,proto3" json:"response,omitempty"`
	// the time to timeout. If the specified time period elapses, DEADLINE_EXCEEDED status is returned.
	// If you want to handle this error, you need to implement a custom error handler in Go.
	// The format is the same as Go's time.Duration format. See https://pkg.go.dev/time#ParseDuration.
	Timeout *string `protobuf:"bytes,4,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	// retry specifies the retry policy if the method call fails.
	Retry *RetryPolicy `protobuf:"bytes,5,opt,name=retry,proto3,oneof" json:"retry,omitempty"`
}

func (x *Resolver) Reset() {
	*x = Resolver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resolver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resolver) ProtoMessage() {}

func (x *Resolver) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resolver.ProtoReflect.Descriptor instead.
func (*Resolver) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{7}
}

func (x *Resolver) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Resolver) GetRequest() []*MethodRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *Resolver) GetResponse() []*MethodResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *Resolver) GetTimeout() string {
	if x != nil && x.Timeout != nil {
		return *x.Timeout
	}
	return ""
}

func (x *Resolver) GetRetry() *RetryPolicy {
	if x != nil {
		return x.Retry
	}
	return nil
}

// RetryPolicy define the retry policy if the method call fails.
type RetryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Policy:
	//
	//	*RetryPolicy_Constant
	//	*RetryPolicy_Exponential
	Policy isRetryPolicy_Policy `protobuf_oneof:"policy"`
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{8}
}

func (m *RetryPolicy) GetPolicy() isRetryPolicy_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *RetryPolicy) GetConstant() *RetryPolicyConstant {
	if x, ok := x.GetPolicy().(*RetryPolicy_Constant); ok {
		return x.Constant
	}
	return nil
}

func (x *RetryPolicy) GetExponential() *RetryPolicyExponential {
	if x, ok := x.GetPolicy().(*RetryPolicy_Exponential); ok {
		return x.Exponential
	}
	return nil
}

type isRetryPolicy_Policy interface {
	isRetryPolicy_Policy()
}

type RetryPolicy_Constant struct {
	// retry according to the "constant" policy.
	Constant *RetryPolicyConstant `protobuf:"bytes,1,opt,name=constant,proto3,oneof"`
}

type RetryPolicy_Exponential struct {
	// retry according to the "exponential backoff" policy.
	// The following Go library is used in the implementation,
	// so please refer to the library documentation for how to specify each parameter.
	// https://pkg.go.dev/github.com/cenkalti/backoff/v4#section-readme.
	Exponential *RetryPolicyExponential `protobuf:"bytes,2,opt,name=exponential,proto3,oneof"`
}

func (*RetryPolicy_Constant) isRetryPolicy_Policy() {}

func (*RetryPolicy_Exponential) isRetryPolicy_Policy() {}

// RetryPolicyConstant define "constant" based retry policy.
type RetryPolicyConstant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// interval value. ( default value is 1s ).
	Interval *string `protobuf:"bytes,1,opt,name=interval,proto3,oneof" json:"interval,omitempty"`
	// max retry count. ( default value is 5. If zero is specified, it never stops )
	MaxRetries *uint64 `protobuf:"varint,2,opt,name=max_retries,json=maxRetries,proto3,oneof" json:"max_retries,omitempty"`
}

func (x *RetryPolicyConstant) Reset() {
	*x = RetryPolicyConstant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicyConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicyConstant) ProtoMessage() {}

func (x *RetryPolicyConstant) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicyConstant.ProtoReflect.Descriptor instead.
func (*RetryPolicyConstant) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{9}
}

func (x *RetryPolicyConstant) GetInterval() string {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return ""
}

func (x *RetryPolicyConstant) GetMaxRetries() uint64 {
	if x != nil && x.MaxRetries != nil {
		return *x.MaxRetries
	}
	return 0
}

// RetryPolicyExponential define "exponential backoff" based retry policy.
type RetryPolicyExponential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// initial interval value. ( default value is "500ms" ).
	InitialInterval *string `protobuf:"bytes,1,opt,name=initial_interval,json=initialInterval,proto3,oneof" json:"initial_interval,omitempty"`
	// randomization factor value. ( default value is 0.5 ).
	RandomizationFactor *float64 `protobuf:"fixed64,2,opt,name=randomization_factor,json=randomizationFactor,proto3,oneof" json:"randomization_factor,omitempty"`
	// multiplier. ( default value is 1.5 ).
	Multiplier *float64 `protobuf:"fixed64,3,opt,name=multiplier,proto3,oneof" json:"multiplier,omitempty"`
	// max interval value. ( default value is "60s" ).
	MaxInterval *string `protobuf:"bytes,4,opt,name=max_interval,json=maxInterval,proto3,oneof" json:"max_interval,omitempty"`
	// max retry count. ( default value is 5. If zero is specified, it never stops ).
	MaxRetries *uint64 `protobuf:"varint,5,opt,name=max_retries,json=maxRetries,proto3,oneof" json:"max_retries,omitempty"`
}

func (x *RetryPolicyExponential) Reset() {
	*x = RetryPolicyExponential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicyExponential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicyExponential) ProtoMessage() {}

func (x *RetryPolicyExponential) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicyExponential.ProtoReflect.Descriptor instead.
func (*RetryPolicyExponential) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{10}
}

func (x *RetryPolicyExponential) GetInitialInterval() string {
	if x != nil && x.InitialInterval != nil {
		return *x.InitialInterval
	}
	return ""
}

func (x *RetryPolicyExponential) GetRandomizationFactor() float64 {
	if x != nil && x.RandomizationFactor != nil {
		return *x.RandomizationFactor
	}
	return 0
}

func (x *RetryPolicyExponential) GetMultiplier() float64 {
	if x != nil && x.Multiplier != nil {
		return *x.Multiplier
	}
	return 0
}

func (x *RetryPolicyExponential) GetMaxInterval() string {
	if x != nil && x.MaxInterval != nil {
		return *x.MaxInterval
	}
	return ""
}

func (x *RetryPolicyExponential) GetMaxRetries() uint64 {
	if x != nil && x.MaxRetries != nil {
		return *x.MaxRetries
	}
	return 0
}

// MethodRequest define parameters to be used for gRPC method request.
type MethodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// field name of the request message.
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// by used to refer to a name or message argument defined in a MessageRule, use `$.` to refer to the message argument.
	// Use CEL (https://github.com/google/cel-spec) to evaluate the expression.
	// Variables are already defined in MessageRule can be used.
	By *string `protobuf:"bytes,2,opt,name=by,proto3,oneof" json:"by,omitempty"`
	// double literal value.
	Double *float64 `protobuf:"fixed64,3,opt,name=double,proto3,oneof" json:"double,omitempty"`
	// repeated double literal values.
	Doubles []float64 `protobuf:"fixed64,4,rep,packed,name=doubles,proto3" json:"doubles,omitempty"`
	// float literal value.
	Float *float32 `protobuf:"fixed32,5,opt,name=float,proto3,oneof" json:"float,omitempty"`
	// repeated float literal values.
	Floats []float32 `protobuf:"fixed32,6,rep,packed,name=floats,proto3" json:"floats,omitempty"`
	// int32 literal value.
	Int32 *int32 `protobuf:"varint,7,opt,name=int32,proto3,oneof" json:"int32,omitempty"`
	// repeated int32 literal values.
	Int32S []int32 `protobuf:"varint,8,rep,packed,name=int32s,proto3" json:"int32s,omitempty"`
	// int64 literal value.
	Int64 *int64 `protobuf:"varint,9,opt,name=int64,proto3,oneof" json:"int64,omitempty"`
	// repeated int64 literal values.
	Int64S []int64 `protobuf:"varint,10,rep,packed,name=int64s,proto3" json:"int64s,omitempty"`
	// uint32 literal value.
	Uint32 *uint32 `protobuf:"varint,11,opt,name=uint32,proto3,oneof" json:"uint32,omitempty"`
	// repeated uint32 literal values.
	Uint32S []uint32 `protobuf:"varint,12,rep,packed,name=uint32s,proto3" json:"uint32s,omitempty"`
	// uint64 literal value.
	Uint64 *uint64 `protobuf:"varint,13,opt,name=uint64,proto3,oneof" json:"uint64,omitempty"`
	// repeated uint64 literal values.
	Uint64S []uint64 `protobuf:"varint,14,rep,packed,name=uint64s,proto3" json:"uint64s,omitempty"`
	// sint32 literal value.
	Sint32 *int32 `protobuf:"zigzag32,15,opt,name=sint32,proto3,oneof" json:"sint32,omitempty"`
	// repeated sint32 literal values.
	Sint32S []int32 `protobuf:"zigzag32,16,rep,packed,name=sint32s,proto3" json:"sint32s,omitempty"`
	// sint64 literal value.
	Sint64 *int64 `protobuf:"zigzag64,17,opt,name=sint64,proto3,oneof" json:"sint64,omitempty"`
	// repeated sint64 literal values.
	Sint64S []int64 `protobuf:"zigzag64,18,rep,packed,name=sint64s,proto3" json:"sint64s,omitempty"`
	// fixed32 literal value.
	Fixed32 *uint32 `protobuf:"fixed32,19,opt,name=fixed32,proto3,oneof" json:"fixed32,omitempty"`
	// repeated fixed32 literal values.
	Fixed32S []uint32 `protobuf:"fixed32,20,rep,packed,name=fixed32s,proto3" json:"fixed32s,omitempty"`
	// fixed64 literal value.
	Fixed64 *uint64 `protobuf:"fixed64,21,opt,name=fixed64,proto3,oneof" json:"fixed64,omitempty"`
	// repeated fixed64 literal values.
	Fixed64S []uint64 `protobuf:"fixed64,22,rep,packed,name=fixed64s,proto3" json:"fixed64s,omitempty"`
	// sfixed32 literal value.
	Sfixed32 *int32 `protobuf:"fixed32,23,opt,name=sfixed32,proto3,oneof" json:"sfixed32,omitempty"`
	// repeated sfixed32 literal values.
	Sfixed32S []int32 `protobuf:"fixed32,24,rep,packed,name=sfixed32s,proto3" json:"sfixed32s,omitempty"`
	// sfixed64 literal value.
	Sfixed64 *int64 `protobuf:"fixed64,25,opt,name=sfixed64,proto3,oneof" json:"sfixed64,omitempty"`
	// repeated sfixed64 literal values.
	Sfixed64S []int64 `protobuf:"fixed64,26,rep,packed,name=sfixed64s,proto3" json:"sfixed64s,omitempty"`
	// bool literal value.
	Bool *bool `protobuf:"varint,27,opt,name=bool,proto3,oneof" json:"bool,omitempty"`
	// repeated bool literal values.
	Bools []bool `protobuf:"varint,28,rep,packed,name=bools,proto3" json:"bools,omitempty"`
	// string literal value.
	String_ *string `protobuf:"bytes,29,opt,name=string,proto3,oneof" json:"string,omitempty"`
	// repeated string literal values.
	Strings []string `protobuf:"bytes,30,rep,name=strings,proto3" json:"strings,omitempty"`
	// bytes literal value.
	ByteString []byte `protobuf:"bytes,31,opt,name=byte_string,json=byteString,proto3,oneof" json:"byte_string,omitempty"`
	// repeated bytes literal values.
	ByteStrings [][]byte `protobuf:"bytes,32,rep,name=byte_strings,json=byteStrings,proto3" json:"byte_strings,omitempty"`
	// message literal value.
	Message *MessageValue `protobuf:"bytes,33,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// repeated message literal values.
	Messages []*MessageValue `protobuf:"bytes,34,rep,name=messages,proto3" json:"messages,omitempty"`
	// enum literal value.
	Enum *string `protobuf:"bytes,35,opt,name=enum,proto3,oneof" json:"enum,omitempty"`
	// repeated enum literal values.
	Enums []string `protobuf:"bytes,36,rep,name=enums,proto3" json:"enums,omitempty"`
	// env literal value.
	Env *string `protobuf:"bytes,37,opt,name=env,proto3,oneof" json:"env,omitempty"`
	// repeated env literal values.
	Envs []string `protobuf:"bytes,38,rep,name=envs,proto3" json:"envs,omitempty"`
}

func (x *MethodRequest) Reset() {
	*x = MethodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodRequest) ProtoMessage() {}

func (x *MethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodRequest.ProtoReflect.Descriptor instead.
func (*MethodRequest) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{11}
}

func (x *MethodRequest) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *MethodRequest) GetBy() string {
	if x != nil && x.By != nil {
		return *x.By
	}
	return ""
}

func (x *MethodRequest) GetDouble() float64 {
	if x != nil && x.Double != nil {
		return *x.Double
	}
	return 0
}

func (x *MethodRequest) GetDoubles() []float64 {
	if x != nil {
		return x.Doubles
	}
	return nil
}

func (x *MethodRequest) GetFloat() float32 {
	if x != nil && x.Float != nil {
		return *x.Float
	}
	return 0
}

func (x *MethodRequest) GetFloats() []float32 {
	if x != nil {
		return x.Floats
	}
	return nil
}

func (x *MethodRequest) GetInt32() int32 {
	if x != nil && x.Int32 != nil {
		return *x.Int32
	}
	return 0
}

func (x *MethodRequest) GetInt32S() []int32 {
	if x != nil {
		return x.Int32S
	}
	return nil
}

func (x *MethodRequest) GetInt64() int64 {
	if x != nil && x.Int64 != nil {
		return *x.Int64
	}
	return 0
}

func (x *MethodRequest) GetInt64S() []int64 {
	if x != nil {
		return x.Int64S
	}
	return nil
}

func (x *MethodRequest) GetUint32() uint32 {
	if x != nil && x.Uint32 != nil {
		return *x.Uint32
	}
	return 0
}

func (x *MethodRequest) GetUint32S() []uint32 {
	if x != nil {
		return x.Uint32S
	}
	return nil
}

func (x *MethodRequest) GetUint64() uint64 {
	if x != nil && x.Uint64 != nil {
		return *x.Uint64
	}
	return 0
}

func (x *MethodRequest) GetUint64S() []uint64 {
	if x != nil {
		return x.Uint64S
	}
	return nil
}

func (x *MethodRequest) GetSint32() int32 {
	if x != nil && x.Sint32 != nil {
		return *x.Sint32
	}
	return 0
}

func (x *MethodRequest) GetSint32S() []int32 {
	if x != nil {
		return x.Sint32S
	}
	return nil
}

func (x *MethodRequest) GetSint64() int64 {
	if x != nil && x.Sint64 != nil {
		return *x.Sint64
	}
	return 0
}

func (x *MethodRequest) GetSint64S() []int64 {
	if x != nil {
		return x.Sint64S
	}
	return nil
}

func (x *MethodRequest) GetFixed32() uint32 {
	if x != nil && x.Fixed32 != nil {
		return *x.Fixed32
	}
	return 0
}

func (x *MethodRequest) GetFixed32S() []uint32 {
	if x != nil {
		return x.Fixed32S
	}
	return nil
}

func (x *MethodRequest) GetFixed64() uint64 {
	if x != nil && x.Fixed64 != nil {
		return *x.Fixed64
	}
	return 0
}

func (x *MethodRequest) GetFixed64S() []uint64 {
	if x != nil {
		return x.Fixed64S
	}
	return nil
}

func (x *MethodRequest) GetSfixed32() int32 {
	if x != nil && x.Sfixed32 != nil {
		return *x.Sfixed32
	}
	return 0
}

func (x *MethodRequest) GetSfixed32S() []int32 {
	if x != nil {
		return x.Sfixed32S
	}
	return nil
}

func (x *MethodRequest) GetSfixed64() int64 {
	if x != nil && x.Sfixed64 != nil {
		return *x.Sfixed64
	}
	return 0
}

func (x *MethodRequest) GetSfixed64S() []int64 {
	if x != nil {
		return x.Sfixed64S
	}
	return nil
}

func (x *MethodRequest) GetBool() bool {
	if x != nil && x.Bool != nil {
		return *x.Bool
	}
	return false
}

func (x *MethodRequest) GetBools() []bool {
	if x != nil {
		return x.Bools
	}
	return nil
}

func (x *MethodRequest) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

func (x *MethodRequest) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *MethodRequest) GetByteString() []byte {
	if x != nil {
		return x.ByteString
	}
	return nil
}

func (x *MethodRequest) GetByteStrings() [][]byte {
	if x != nil {
		return x.ByteStrings
	}
	return nil
}

func (x *MethodRequest) GetMessage() *MessageValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MethodRequest) GetMessages() []*MessageValue {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *MethodRequest) GetEnum() string {
	if x != nil && x.Enum != nil {
		return *x.Enum
	}
	return ""
}

func (x *MethodRequest) GetEnums() []string {
	if x != nil {
		return x.Enums
	}
	return nil
}

func (x *MethodRequest) GetEnv() string {
	if x != nil && x.Env != nil {
		return *x.Env
	}
	return ""
}

func (x *MethodRequest) GetEnvs() []string {
	if x != nil {
		return x.Envs
	}
	return nil
}

// MethodResponse define which value of the method response is referenced.
type MethodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name specify the unique name that can be used in a `MessageRule` / `FieldRule` for the same message for a specific field in the response.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// field name in response message.
	Field *string `protobuf:"bytes,2,opt,name=field,proto3,oneof" json:"field,omitempty"`
	// autobind if the value referenced by `field` is a message type,
	// the value of a field with the same name and type as the field name of its own message is automatically assigned to the value of the field in the message.
	// If multiple autobinds are used at the same message,
	// you must explicitly use the `grpc.federation.field` option to do the binding yourself, since duplicate field names cannot be correctly determined as one.
	Autobind *bool `protobuf:"varint,3,opt,name=autobind,proto3,oneof" json:"autobind,omitempty"`
}

func (x *MethodResponse) Reset() {
	*x = MethodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodResponse) ProtoMessage() {}

func (x *MethodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodResponse.ProtoReflect.Descriptor instead.
func (*MethodResponse) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{12}
}

func (x *MethodResponse) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *MethodResponse) GetField() string {
	if x != nil && x.Field != nil {
		return *x.Field
	}
	return ""
}

func (x *MethodResponse) GetAutobind() bool {
	if x != nil && x.Autobind != nil {
		return *x.Autobind
	}
	return false
}

// Message define dependent message.
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name specify a unique name for the dependent message.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// message specify the message to be referred to by FQDN. format is `<package-name>.<message-name>`.
	// <package-name> can be omitted when referring to messages in the same package.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// args specify the parameters needed to retrieve the message. This is called the message argument.
	Args []*Argument `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	// autobind the value of a field with the same name and type as the field name of this message is automatically assigned to the field value in the message.
	// If multiple autobinds are used at the same message,
	// you must explicitly use the `grpc.federation.field` option to do the binding yourself, since duplicate field names cannot be correctly determined as one.
	Autobind *bool `protobuf:"varint,4,opt,name=autobind,proto3,oneof" json:"autobind,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{13}
}

func (x *Message) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Message) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Message) GetArgs() []*Argument {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Message) GetAutobind() bool {
	if x != nil && x.Autobind != nil {
		return *x.Autobind
	}
	return false
}

// Argument define message argument.
type Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the message argument.
	// Use this name to refer to the message argument.
	// For example, if `foo` is specified as the name, it is referenced by `$.foo`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// by used to refer to a name or message argument defined in a MessageRule, use `$.` to refer to the message argument.
	// Use CEL (https://github.com/google/cel-spec) to evaluate the expression.
	// Variables are already defined in MessageRule can be used.
	By *string `protobuf:"bytes,2,opt,name=by,proto3,oneof" json:"by,omitempty"`
	// inline like by, it refers to the specified value and expands all fields beyond it.
	// For this reason, the referenced value must always be of message type.
	Inline *string `protobuf:"bytes,3,opt,name=inline,proto3,oneof" json:"inline,omitempty"`
	// double literal value.
	Double *float64 `protobuf:"fixed64,4,opt,name=double,proto3,oneof" json:"double,omitempty"`
	// repeated double literal values.
	Doubles []float64 `protobuf:"fixed64,5,rep,packed,name=doubles,proto3" json:"doubles,omitempty"`
	// float literal value.
	Float *float32 `protobuf:"fixed32,6,opt,name=float,proto3,oneof" json:"float,omitempty"`
	// repeated float literal values.
	Floats []float32 `protobuf:"fixed32,7,rep,packed,name=floats,proto3" json:"floats,omitempty"`
	// int32 literal value.
	Int32 *int32 `protobuf:"varint,8,opt,name=int32,proto3,oneof" json:"int32,omitempty"`
	// repeated int32 literal values.
	Int32S []int32 `protobuf:"varint,9,rep,packed,name=int32s,proto3" json:"int32s,omitempty"`
	// int64 literal value.
	Int64 *int64 `protobuf:"varint,10,opt,name=int64,proto3,oneof" json:"int64,omitempty"`
	// repeated int64 literal values.
	Int64S []int64 `protobuf:"varint,11,rep,packed,name=int64s,proto3" json:"int64s,omitempty"`
	// uint32 literal value.
	Uint32 *uint32 `protobuf:"varint,12,opt,name=uint32,proto3,oneof" json:"uint32,omitempty"`
	// repeated uint32 literal values.
	Uint32S []uint32 `protobuf:"varint,13,rep,packed,name=uint32s,proto3" json:"uint32s,omitempty"`
	// uint64 literal value.
	Uint64 *uint64 `protobuf:"varint,14,opt,name=uint64,proto3,oneof" json:"uint64,omitempty"`
	// repeated uint64 literal values.
	Uint64S []uint64 `protobuf:"varint,15,rep,packed,name=uint64s,proto3" json:"uint64s,omitempty"`
	// sint32 literal value.
	Sint32 *int32 `protobuf:"zigzag32,16,opt,name=sint32,proto3,oneof" json:"sint32,omitempty"`
	// repeated sint32 literal values.
	Sint32S []int32 `protobuf:"zigzag32,17,rep,packed,name=sint32s,proto3" json:"sint32s,omitempty"`
	// sint64 literal value.
	Sint64 *int64 `protobuf:"zigzag64,18,opt,name=sint64,proto3,oneof" json:"sint64,omitempty"`
	// repeated sint64 literal values.
	Sint64S []int64 `protobuf:"zigzag64,19,rep,packed,name=sint64s,proto3" json:"sint64s,omitempty"`
	// fixed32 literal value.
	Fixed32 *uint32 `protobuf:"fixed32,20,opt,name=fixed32,proto3,oneof" json:"fixed32,omitempty"`
	// repeated fixed32 literal values.
	Fixed32S []uint32 `protobuf:"fixed32,21,rep,packed,name=fixed32s,proto3" json:"fixed32s,omitempty"`
	// fixed64 literal value.
	Fixed64 *uint64 `protobuf:"fixed64,22,opt,name=fixed64,proto3,oneof" json:"fixed64,omitempty"`
	// repeated fixed64 literal values.
	Fixed64S []uint64 `protobuf:"fixed64,23,rep,packed,name=fixed64s,proto3" json:"fixed64s,omitempty"`
	// sfixed32 literal value.
	Sfixed32 *int32 `protobuf:"fixed32,24,opt,name=sfixed32,proto3,oneof" json:"sfixed32,omitempty"`
	// repeated sfixed32 literal values.
	Sfixed32S []int32 `protobuf:"fixed32,25,rep,packed,name=sfixed32s,proto3" json:"sfixed32s,omitempty"`
	// sfixed64 literal value.
	Sfixed64 *int64 `protobuf:"fixed64,26,opt,name=sfixed64,proto3,oneof" json:"sfixed64,omitempty"`
	// repeated sfixed64 literal values.
	Sfixed64S []int64 `protobuf:"fixed64,27,rep,packed,name=sfixed64s,proto3" json:"sfixed64s,omitempty"`
	// bool literal value.
	Bool *bool `protobuf:"varint,28,opt,name=bool,proto3,oneof" json:"bool,omitempty"`
	// repeated bool literal values.
	Bools []bool `protobuf:"varint,29,rep,packed,name=bools,proto3" json:"bools,omitempty"`
	// string literal value.
	String_ *string `protobuf:"bytes,30,opt,name=string,proto3,oneof" json:"string,omitempty"`
	// repeated string literal values.
	Strings []string `protobuf:"bytes,31,rep,name=strings,proto3" json:"strings,omitempty"`
	// bytes literal value.
	ByteString []byte `protobuf:"bytes,32,opt,name=byte_string,json=byteString,proto3,oneof" json:"byte_string,omitempty"`
	// repeated bytes literal values.
	ByteStrings [][]byte `protobuf:"bytes,33,rep,name=byte_strings,json=byteStrings,proto3" json:"byte_strings,omitempty"`
	// message literal value.
	Message *MessageValue `protobuf:"bytes,34,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// repeated message literal values.
	Messages []*MessageValue `protobuf:"bytes,35,rep,name=messages,proto3" json:"messages,omitempty"`
	// enum literal value.
	Enum *string `protobuf:"bytes,36,opt,name=enum,proto3,oneof" json:"enum,omitempty"`
	// repeated enum literal values.
	Enums []string `protobuf:"bytes,37,rep,name=enums,proto3" json:"enums,omitempty"`
	// env literal value.
	Env *string `protobuf:"bytes,38,opt,name=env,proto3,oneof" json:"env,omitempty"`
	// repeated env literal values.
	Envs []string `protobuf:"bytes,39,rep,name=envs,proto3" json:"envs,omitempty"`
}

func (x *Argument) Reset() {
	*x = Argument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Argument) ProtoMessage() {}

func (x *Argument) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Argument.ProtoReflect.Descriptor instead.
func (*Argument) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{14}
}

func (x *Argument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Argument) GetBy() string {
	if x != nil && x.By != nil {
		return *x.By
	}
	return ""
}

func (x *Argument) GetInline() string {
	if x != nil && x.Inline != nil {
		return *x.Inline
	}
	return ""
}

func (x *Argument) GetDouble() float64 {
	if x != nil && x.Double != nil {
		return *x.Double
	}
	return 0
}

func (x *Argument) GetDoubles() []float64 {
	if x != nil {
		return x.Doubles
	}
	return nil
}

func (x *Argument) GetFloat() float32 {
	if x != nil && x.Float != nil {
		return *x.Float
	}
	return 0
}

func (x *Argument) GetFloats() []float32 {
	if x != nil {
		return x.Floats
	}
	return nil
}

func (x *Argument) GetInt32() int32 {
	if x != nil && x.Int32 != nil {
		return *x.Int32
	}
	return 0
}

func (x *Argument) GetInt32S() []int32 {
	if x != nil {
		return x.Int32S
	}
	return nil
}

func (x *Argument) GetInt64() int64 {
	if x != nil && x.Int64 != nil {
		return *x.Int64
	}
	return 0
}

func (x *Argument) GetInt64S() []int64 {
	if x != nil {
		return x.Int64S
	}
	return nil
}

func (x *Argument) GetUint32() uint32 {
	if x != nil && x.Uint32 != nil {
		return *x.Uint32
	}
	return 0
}

func (x *Argument) GetUint32S() []uint32 {
	if x != nil {
		return x.Uint32S
	}
	return nil
}

func (x *Argument) GetUint64() uint64 {
	if x != nil && x.Uint64 != nil {
		return *x.Uint64
	}
	return 0
}

func (x *Argument) GetUint64S() []uint64 {
	if x != nil {
		return x.Uint64S
	}
	return nil
}

func (x *Argument) GetSint32() int32 {
	if x != nil && x.Sint32 != nil {
		return *x.Sint32
	}
	return 0
}

func (x *Argument) GetSint32S() []int32 {
	if x != nil {
		return x.Sint32S
	}
	return nil
}

func (x *Argument) GetSint64() int64 {
	if x != nil && x.Sint64 != nil {
		return *x.Sint64
	}
	return 0
}

func (x *Argument) GetSint64S() []int64 {
	if x != nil {
		return x.Sint64S
	}
	return nil
}

func (x *Argument) GetFixed32() uint32 {
	if x != nil && x.Fixed32 != nil {
		return *x.Fixed32
	}
	return 0
}

func (x *Argument) GetFixed32S() []uint32 {
	if x != nil {
		return x.Fixed32S
	}
	return nil
}

func (x *Argument) GetFixed64() uint64 {
	if x != nil && x.Fixed64 != nil {
		return *x.Fixed64
	}
	return 0
}

func (x *Argument) GetFixed64S() []uint64 {
	if x != nil {
		return x.Fixed64S
	}
	return nil
}

func (x *Argument) GetSfixed32() int32 {
	if x != nil && x.Sfixed32 != nil {
		return *x.Sfixed32
	}
	return 0
}

func (x *Argument) GetSfixed32S() []int32 {
	if x != nil {
		return x.Sfixed32S
	}
	return nil
}

func (x *Argument) GetSfixed64() int64 {
	if x != nil && x.Sfixed64 != nil {
		return *x.Sfixed64
	}
	return 0
}

func (x *Argument) GetSfixed64S() []int64 {
	if x != nil {
		return x.Sfixed64S
	}
	return nil
}

func (x *Argument) GetBool() bool {
	if x != nil && x.Bool != nil {
		return *x.Bool
	}
	return false
}

func (x *Argument) GetBools() []bool {
	if x != nil {
		return x.Bools
	}
	return nil
}

func (x *Argument) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

func (x *Argument) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *Argument) GetByteString() []byte {
	if x != nil {
		return x.ByteString
	}
	return nil
}

func (x *Argument) GetByteStrings() [][]byte {
	if x != nil {
		return x.ByteStrings
	}
	return nil
}

func (x *Argument) GetMessage() *MessageValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Argument) GetMessages() []*MessageValue {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *Argument) GetEnum() string {
	if x != nil && x.Enum != nil {
		return *x.Enum
	}
	return ""
}

func (x *Argument) GetEnums() []string {
	if x != nil {
		return x.Enums
	}
	return nil
}

func (x *Argument) GetEnv() string {
	if x != nil && x.Env != nil {
		return *x.Env
	}
	return ""
}

func (x *Argument) GetEnvs() []string {
	if x != nil {
		return x.Envs
	}
	return nil
}

// FieldRule define GRPC Federation rules for the field of message.
type FieldRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If custom_resolver is true, the field binding process is to be implemented in Go.
	// If there are any values retrieved by grpc.federation.message option, they are passed as arguments for custom resolver.
	CustomResolver *bool `protobuf:"varint,1,opt,name=custom_resolver,json=customResolver,proto3,oneof" json:"custom_resolver,omitempty"`
	// by used to refer to a name or message argument defined in a MessageRule, use `$.` to refer to the message argument.
	// Use CEL (https://github.com/google/cel-spec) to evaluate the expression.
	// Variables are already defined in MessageRule can be used.
	By *string `protobuf:"bytes,2,opt,name=by,proto3,oneof" json:"by,omitempty"`
	// alias can be used when alias is specified in grpc.federation.message option,
	// and specifies the field name to be referenced among the messages specified in alias of message option.
	// If the specified field has the same type or can be converted automatically, its value is assigned.
	Alias *string `protobuf:"bytes,3,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	// double literal value.
	Double *float64 `protobuf:"fixed64,4,opt,name=double,proto3,oneof" json:"double,omitempty"`
	// repeated double literal values.
	Doubles []float64 `protobuf:"fixed64,5,rep,packed,name=doubles,proto3" json:"doubles,omitempty"`
	// float literal value.
	Float *float32 `protobuf:"fixed32,6,opt,name=float,proto3,oneof" json:"float,omitempty"`
	// repeated float literal values.
	Floats []float32 `protobuf:"fixed32,7,rep,packed,name=floats,proto3" json:"floats,omitempty"`
	// int32 literal value.
	Int32 *int32 `protobuf:"varint,8,opt,name=int32,proto3,oneof" json:"int32,omitempty"`
	// repeated int32 literal values.
	Int32S []int32 `protobuf:"varint,9,rep,packed,name=int32s,proto3" json:"int32s,omitempty"`
	// int64 literal value.
	Int64 *int64 `protobuf:"varint,10,opt,name=int64,proto3,oneof" json:"int64,omitempty"`
	// repeated int64 literal values.
	Int64S []int64 `protobuf:"varint,11,rep,packed,name=int64s,proto3" json:"int64s,omitempty"`
	// uint32 literal value.
	Uint32 *uint32 `protobuf:"varint,12,opt,name=uint32,proto3,oneof" json:"uint32,omitempty"`
	// repeated uint32 literal values.
	Uint32S []uint32 `protobuf:"varint,13,rep,packed,name=uint32s,proto3" json:"uint32s,omitempty"`
	// uint64 literal value.
	Uint64 *uint64 `protobuf:"varint,14,opt,name=uint64,proto3,oneof" json:"uint64,omitempty"`
	// repeated uint64 literal values.
	Uint64S []uint64 `protobuf:"varint,15,rep,packed,name=uint64s,proto3" json:"uint64s,omitempty"`
	// sint32 literal value.
	Sint32 *int32 `protobuf:"zigzag32,16,opt,name=sint32,proto3,oneof" json:"sint32,omitempty"`
	// repeated sint32 literal values.
	Sint32S []int32 `protobuf:"zigzag32,17,rep,packed,name=sint32s,proto3" json:"sint32s,omitempty"`
	// sint64 literal value.
	Sint64 *int64 `protobuf:"zigzag64,18,opt,name=sint64,proto3,oneof" json:"sint64,omitempty"`
	// repeated sint64 literal values.
	Sint64S []int64 `protobuf:"zigzag64,19,rep,packed,name=sint64s,proto3" json:"sint64s,omitempty"`
	// fixed32 literal value.
	Fixed32 *uint32 `protobuf:"fixed32,20,opt,name=fixed32,proto3,oneof" json:"fixed32,omitempty"`
	// repeated fixed32 literal values.
	Fixed32S []uint32 `protobuf:"fixed32,21,rep,packed,name=fixed32s,proto3" json:"fixed32s,omitempty"`
	// fixed64 literal value.
	Fixed64 *uint64 `protobuf:"fixed64,22,opt,name=fixed64,proto3,oneof" json:"fixed64,omitempty"`
	// repeated fixed64 literal values.
	Fixed64S []uint64 `protobuf:"fixed64,23,rep,packed,name=fixed64s,proto3" json:"fixed64s,omitempty"`
	// sfixed32 literal value.
	Sfixed32 *int32 `protobuf:"fixed32,24,opt,name=sfixed32,proto3,oneof" json:"sfixed32,omitempty"`
	// repeated sfixed32 literal values.
	Sfixed32S []int32 `protobuf:"fixed32,25,rep,packed,name=sfixed32s,proto3" json:"sfixed32s,omitempty"`
	// sfixed64 literal value.
	Sfixed64 *int64 `protobuf:"fixed64,26,opt,name=sfixed64,proto3,oneof" json:"sfixed64,omitempty"`
	// repeated sfixed64 literal values.
	Sfixed64S []int64 `protobuf:"fixed64,27,rep,packed,name=sfixed64s,proto3" json:"sfixed64s,omitempty"`
	// bool literal value.
	Bool *bool `protobuf:"varint,28,opt,name=bool,proto3,oneof" json:"bool,omitempty"`
	// repeated bool literal values.
	Bools []bool `protobuf:"varint,29,rep,packed,name=bools,proto3" json:"bools,omitempty"`
	// string literal value.
	String_ *string `protobuf:"bytes,30,opt,name=string,proto3,oneof" json:"string,omitempty"`
	// repeated string literal values.
	Strings []string `protobuf:"bytes,31,rep,name=strings,proto3" json:"strings,omitempty"`
	// bytes literal value.
	ByteString []byte `protobuf:"bytes,32,opt,name=byte_string,json=byteString,proto3,oneof" json:"byte_string,omitempty"`
	// repeated bytes literal values.
	ByteStrings [][]byte `protobuf:"bytes,33,rep,name=byte_strings,json=byteStrings,proto3" json:"byte_strings,omitempty"`
	// message literal value.
	Message *MessageValue `protobuf:"bytes,34,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// repeated message literal values.
	Messages []*MessageValue `protobuf:"bytes,35,rep,name=messages,proto3" json:"messages,omitempty"`
	// enum literal value.
	Enum *string `protobuf:"bytes,36,opt,name=enum,proto3,oneof" json:"enum,omitempty"`
	// repeated enum literal values.
	Enums []string `protobuf:"bytes,37,rep,name=enums,proto3" json:"enums,omitempty"`
	// env literal value.
	Env *string `protobuf:"bytes,38,opt,name=env,proto3,oneof" json:"env,omitempty"`
	// repeated env literal values.
	Envs []string `protobuf:"bytes,39,rep,name=envs,proto3" json:"envs,omitempty"`
	// use to evaluate any one of fields. this field only available in oneof.
	Oneof *FieldOneof `protobuf:"bytes,40,opt,name=oneof,proto3" json:"oneof,omitempty"`
}

func (x *FieldRule) Reset() {
	*x = FieldRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRule) ProtoMessage() {}

func (x *FieldRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRule.ProtoReflect.Descriptor instead.
func (*FieldRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{15}
}

func (x *FieldRule) GetCustomResolver() bool {
	if x != nil && x.CustomResolver != nil {
		return *x.CustomResolver
	}
	return false
}

func (x *FieldRule) GetBy() string {
	if x != nil && x.By != nil {
		return *x.By
	}
	return ""
}

func (x *FieldRule) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *FieldRule) GetDouble() float64 {
	if x != nil && x.Double != nil {
		return *x.Double
	}
	return 0
}

func (x *FieldRule) GetDoubles() []float64 {
	if x != nil {
		return x.Doubles
	}
	return nil
}

func (x *FieldRule) GetFloat() float32 {
	if x != nil && x.Float != nil {
		return *x.Float
	}
	return 0
}

func (x *FieldRule) GetFloats() []float32 {
	if x != nil {
		return x.Floats
	}
	return nil
}

func (x *FieldRule) GetInt32() int32 {
	if x != nil && x.Int32 != nil {
		return *x.Int32
	}
	return 0
}

func (x *FieldRule) GetInt32S() []int32 {
	if x != nil {
		return x.Int32S
	}
	return nil
}

func (x *FieldRule) GetInt64() int64 {
	if x != nil && x.Int64 != nil {
		return *x.Int64
	}
	return 0
}

func (x *FieldRule) GetInt64S() []int64 {
	if x != nil {
		return x.Int64S
	}
	return nil
}

func (x *FieldRule) GetUint32() uint32 {
	if x != nil && x.Uint32 != nil {
		return *x.Uint32
	}
	return 0
}

func (x *FieldRule) GetUint32S() []uint32 {
	if x != nil {
		return x.Uint32S
	}
	return nil
}

func (x *FieldRule) GetUint64() uint64 {
	if x != nil && x.Uint64 != nil {
		return *x.Uint64
	}
	return 0
}

func (x *FieldRule) GetUint64S() []uint64 {
	if x != nil {
		return x.Uint64S
	}
	return nil
}

func (x *FieldRule) GetSint32() int32 {
	if x != nil && x.Sint32 != nil {
		return *x.Sint32
	}
	return 0
}

func (x *FieldRule) GetSint32S() []int32 {
	if x != nil {
		return x.Sint32S
	}
	return nil
}

func (x *FieldRule) GetSint64() int64 {
	if x != nil && x.Sint64 != nil {
		return *x.Sint64
	}
	return 0
}

func (x *FieldRule) GetSint64S() []int64 {
	if x != nil {
		return x.Sint64S
	}
	return nil
}

func (x *FieldRule) GetFixed32() uint32 {
	if x != nil && x.Fixed32 != nil {
		return *x.Fixed32
	}
	return 0
}

func (x *FieldRule) GetFixed32S() []uint32 {
	if x != nil {
		return x.Fixed32S
	}
	return nil
}

func (x *FieldRule) GetFixed64() uint64 {
	if x != nil && x.Fixed64 != nil {
		return *x.Fixed64
	}
	return 0
}

func (x *FieldRule) GetFixed64S() []uint64 {
	if x != nil {
		return x.Fixed64S
	}
	return nil
}

func (x *FieldRule) GetSfixed32() int32 {
	if x != nil && x.Sfixed32 != nil {
		return *x.Sfixed32
	}
	return 0
}

func (x *FieldRule) GetSfixed32S() []int32 {
	if x != nil {
		return x.Sfixed32S
	}
	return nil
}

func (x *FieldRule) GetSfixed64() int64 {
	if x != nil && x.Sfixed64 != nil {
		return *x.Sfixed64
	}
	return 0
}

func (x *FieldRule) GetSfixed64S() []int64 {
	if x != nil {
		return x.Sfixed64S
	}
	return nil
}

func (x *FieldRule) GetBool() bool {
	if x != nil && x.Bool != nil {
		return *x.Bool
	}
	return false
}

func (x *FieldRule) GetBools() []bool {
	if x != nil {
		return x.Bools
	}
	return nil
}

func (x *FieldRule) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

func (x *FieldRule) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *FieldRule) GetByteString() []byte {
	if x != nil {
		return x.ByteString
	}
	return nil
}

func (x *FieldRule) GetByteStrings() [][]byte {
	if x != nil {
		return x.ByteStrings
	}
	return nil
}

func (x *FieldRule) GetMessage() *MessageValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *FieldRule) GetMessages() []*MessageValue {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *FieldRule) GetEnum() string {
	if x != nil && x.Enum != nil {
		return *x.Enum
	}
	return ""
}

func (x *FieldRule) GetEnums() []string {
	if x != nil {
		return x.Enums
	}
	return nil
}

func (x *FieldRule) GetEnv() string {
	if x != nil && x.Env != nil {
		return *x.Env
	}
	return ""
}

func (x *FieldRule) GetEnvs() []string {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *FieldRule) GetOneof() *FieldOneof {
	if x != nil {
		return x.Oneof
	}
	return nil
}

// FieldOneof evaluate "messages" or other field only if expr is true and assign to the oneof field.
// This feature only available in oneof.
type FieldOneof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cond specify either `expr` or `default`. Only one `default` can be set per oneof.
	//
	// Types that are assignable to Cond:
	//
	//	*FieldOneof_Expr
	//	*FieldOneof_Default
	Cond isFieldOneof_Cond `protobuf_oneof:"cond"`
	// messages defines a list of dependent messages that must be retrieved to compose a message.
	Messages []*Message `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
	// by used to refer to a name or message argument defined in a MessageRule, use `$.` to refer to the message argument.
	// Use CEL (https://github.com/google/cel-spec) to evaluate the expression.
	// Variables are already defined in MessageRule and FieldOneOf's messages field can be used.
	By string `protobuf:"bytes,4,opt,name=by,proto3" json:"by,omitempty"`
}

func (x *FieldOneof) Reset() {
	*x = FieldOneof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldOneof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldOneof) ProtoMessage() {}

func (x *FieldOneof) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldOneof.ProtoReflect.Descriptor instead.
func (*FieldOneof) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{16}
}

func (m *FieldOneof) GetCond() isFieldOneof_Cond {
	if m != nil {
		return m.Cond
	}
	return nil
}

func (x *FieldOneof) GetExpr() string {
	if x, ok := x.GetCond().(*FieldOneof_Expr); ok {
		return x.Expr
	}
	return ""
}

func (x *FieldOneof) GetDefault() bool {
	if x, ok := x.GetCond().(*FieldOneof_Default); ok {
		return x.Default
	}
	return false
}

func (x *FieldOneof) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *FieldOneof) GetBy() string {
	if x != nil {
		return x.By
	}
	return ""
}

type isFieldOneof_Cond interface {
	isFieldOneof_Cond()
}

type FieldOneof_Expr struct {
	// expr describes the condition to be assigned to field.
	// The return value must be of type bool.
	// Use CEL (https://github.com/google/cel-spec) to evaluate the expression.
	// Variables are already defined in MessageRule can be used.
	Expr string `protobuf:"bytes,1,opt,name=expr,proto3,oneof"`
}

type FieldOneof_Default struct {
	// default used to assign a value when none of the other fields match any of the specified expressions.
	// Only one value can be defined per oneof.
	Default bool `protobuf:"varint,2,opt,name=default,proto3,oneof"`
}

func (*FieldOneof_Expr) isFieldOneof_Cond() {}

func (*FieldOneof_Default) isFieldOneof_Cond() {}

// MessageValue represents message literal.
type MessageValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name specify the message name to be referred to by FQDN. format is `<package-name>.<message-name>`.
	// <package-name> can be omitted when referring to messages in the same package.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// fields represents message's fields.
	Fields []*MessageFieldValue `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *MessageValue) Reset() {
	*x = MessageValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageValue) ProtoMessage() {}

func (x *MessageValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageValue.ProtoReflect.Descriptor instead.
func (*MessageValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{17}
}

func (x *MessageValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageValue) GetFields() []*MessageFieldValue {
	if x != nil {
		return x.Fields
	}
	return nil
}

// MessageFieldValue represents message's field.
type MessageFieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// double literal value.
	Double *float64 `protobuf:"fixed64,3,opt,name=double,proto3,oneof" json:"double,omitempty"`
	// repeated double literal values.
	Doubles []float64 `protobuf:"fixed64,4,rep,packed,name=doubles,proto3" json:"doubles,omitempty"`
	// float literal value.
	Float *float32 `protobuf:"fixed32,5,opt,name=float,proto3,oneof" json:"float,omitempty"`
	// repeated float literal values.
	Floats []float32 `protobuf:"fixed32,6,rep,packed,name=floats,proto3" json:"floats,omitempty"`
	// int32 literal value.
	Int32 *int32 `protobuf:"varint,7,opt,name=int32,proto3,oneof" json:"int32,omitempty"`
	// repeated int32 literal values.
	Int32S []int32 `protobuf:"varint,8,rep,packed,name=int32s,proto3" json:"int32s,omitempty"`
	// int64 literal value.
	Int64 *int64 `protobuf:"varint,9,opt,name=int64,proto3,oneof" json:"int64,omitempty"`
	// repeated int64 literal values.
	Int64S []int64 `protobuf:"varint,10,rep,packed,name=int64s,proto3" json:"int64s,omitempty"`
	// uint32 literal value.
	Uint32 *uint32 `protobuf:"varint,11,opt,name=uint32,proto3,oneof" json:"uint32,omitempty"`
	// repeated uint32 literal values.
	Uint32S []uint32 `protobuf:"varint,12,rep,packed,name=uint32s,proto3" json:"uint32s,omitempty"`
	// uint64 literal value.
	Uint64 *uint64 `protobuf:"varint,13,opt,name=uint64,proto3,oneof" json:"uint64,omitempty"`
	// repeated uint64 literal values.
	Uint64S []uint64 `protobuf:"varint,14,rep,packed,name=uint64s,proto3" json:"uint64s,omitempty"`
	// sint32 literal value.
	Sint32 *int32 `protobuf:"zigzag32,15,opt,name=sint32,proto3,oneof" json:"sint32,omitempty"`
	// repeated sint32 literal values.
	Sint32S []int32 `protobuf:"zigzag32,16,rep,packed,name=sint32s,proto3" json:"sint32s,omitempty"`
	// sint64 literal value.
	Sint64 *int64 `protobuf:"zigzag64,17,opt,name=sint64,proto3,oneof" json:"sint64,omitempty"`
	// repeated sint64 literal values.
	Sint64S []int64 `protobuf:"zigzag64,18,rep,packed,name=sint64s,proto3" json:"sint64s,omitempty"`
	// fixed32 literal value.
	Fixed32 *uint32 `protobuf:"fixed32,19,opt,name=fixed32,proto3,oneof" json:"fixed32,omitempty"`
	// repeated fixed32 literal values.
	Fixed32S []uint32 `protobuf:"fixed32,20,rep,packed,name=fixed32s,proto3" json:"fixed32s,omitempty"`
	// fixed64 literal value.
	Fixed64 *uint64 `protobuf:"fixed64,21,opt,name=fixed64,proto3,oneof" json:"fixed64,omitempty"`
	// repeated fixed64 literal values.
	Fixed64S []uint64 `protobuf:"fixed64,22,rep,packed,name=fixed64s,proto3" json:"fixed64s,omitempty"`
	// sfixed32 literal value.
	Sfixed32 *int32 `protobuf:"fixed32,23,opt,name=sfixed32,proto3,oneof" json:"sfixed32,omitempty"`
	// repeated sfixed32 literal values.
	Sfixed32S []int32 `protobuf:"fixed32,24,rep,packed,name=sfixed32s,proto3" json:"sfixed32s,omitempty"`
	// sfixed64 literal value.
	Sfixed64 *int64 `protobuf:"fixed64,25,opt,name=sfixed64,proto3,oneof" json:"sfixed64,omitempty"`
	// repeated sfixed64 literal values.
	Sfixed64S []int64 `protobuf:"fixed64,26,rep,packed,name=sfixed64s,proto3" json:"sfixed64s,omitempty"`
	// bool literal value.
	Bool *bool `protobuf:"varint,27,opt,name=bool,proto3,oneof" json:"bool,omitempty"`
	// repeated bool literal values.
	Bools []bool `protobuf:"varint,28,rep,packed,name=bools,proto3" json:"bools,omitempty"`
	// string literal value.
	String_ *string `protobuf:"bytes,29,opt,name=string,proto3,oneof" json:"string,omitempty"`
	// repeated string literal values.
	Strings []string `protobuf:"bytes,30,rep,name=strings,proto3" json:"strings,omitempty"`
	// bytes literal value.
	ByteString []byte `protobuf:"bytes,31,opt,name=byte_string,json=byteString,proto3,oneof" json:"byte_string,omitempty"`
	// repeated bytes literal values.
	ByteStrings [][]byte `protobuf:"bytes,32,rep,name=byte_strings,json=byteStrings,proto3" json:"byte_strings,omitempty"`
	// message literal value.
	Message *MessageValue `protobuf:"bytes,33,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// repeated message literal values.
	Messages []*MessageValue `protobuf:"bytes,34,rep,name=messages,proto3" json:"messages,omitempty"`
	// enum literal value.
	Enum *string `protobuf:"bytes,35,opt,name=enum,proto3,oneof" json:"enum,omitempty"`
	// repeated enum literal values.
	Enums []string `protobuf:"bytes,36,rep,name=enums,proto3" json:"enums,omitempty"`
	// env literal value.
	Env *string `protobuf:"bytes,37,opt,name=env,proto3,oneof" json:"env,omitempty"`
	// repeated env literal values.
	Envs []string `protobuf:"bytes,38,rep,name=envs,proto3" json:"envs,omitempty"`
}

func (x *MessageFieldValue) Reset() {
	*x = MessageFieldValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageFieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageFieldValue) ProtoMessage() {}

func (x *MessageFieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageFieldValue.ProtoReflect.Descriptor instead.
func (*MessageFieldValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{18}
}

func (x *MessageFieldValue) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *MessageFieldValue) GetDouble() float64 {
	if x != nil && x.Double != nil {
		return *x.Double
	}
	return 0
}

func (x *MessageFieldValue) GetDoubles() []float64 {
	if x != nil {
		return x.Doubles
	}
	return nil
}

func (x *MessageFieldValue) GetFloat() float32 {
	if x != nil && x.Float != nil {
		return *x.Float
	}
	return 0
}

func (x *MessageFieldValue) GetFloats() []float32 {
	if x != nil {
		return x.Floats
	}
	return nil
}

func (x *MessageFieldValue) GetInt32() int32 {
	if x != nil && x.Int32 != nil {
		return *x.Int32
	}
	return 0
}

func (x *MessageFieldValue) GetInt32S() []int32 {
	if x != nil {
		return x.Int32S
	}
	return nil
}

func (x *MessageFieldValue) GetInt64() int64 {
	if x != nil && x.Int64 != nil {
		return *x.Int64
	}
	return 0
}

func (x *MessageFieldValue) GetInt64S() []int64 {
	if x != nil {
		return x.Int64S
	}
	return nil
}

func (x *MessageFieldValue) GetUint32() uint32 {
	if x != nil && x.Uint32 != nil {
		return *x.Uint32
	}
	return 0
}

func (x *MessageFieldValue) GetUint32S() []uint32 {
	if x != nil {
		return x.Uint32S
	}
	return nil
}

func (x *MessageFieldValue) GetUint64() uint64 {
	if x != nil && x.Uint64 != nil {
		return *x.Uint64
	}
	return 0
}

func (x *MessageFieldValue) GetUint64S() []uint64 {
	if x != nil {
		return x.Uint64S
	}
	return nil
}

func (x *MessageFieldValue) GetSint32() int32 {
	if x != nil && x.Sint32 != nil {
		return *x.Sint32
	}
	return 0
}

func (x *MessageFieldValue) GetSint32S() []int32 {
	if x != nil {
		return x.Sint32S
	}
	return nil
}

func (x *MessageFieldValue) GetSint64() int64 {
	if x != nil && x.Sint64 != nil {
		return *x.Sint64
	}
	return 0
}

func (x *MessageFieldValue) GetSint64S() []int64 {
	if x != nil {
		return x.Sint64S
	}
	return nil
}

func (x *MessageFieldValue) GetFixed32() uint32 {
	if x != nil && x.Fixed32 != nil {
		return *x.Fixed32
	}
	return 0
}

func (x *MessageFieldValue) GetFixed32S() []uint32 {
	if x != nil {
		return x.Fixed32S
	}
	return nil
}

func (x *MessageFieldValue) GetFixed64() uint64 {
	if x != nil && x.Fixed64 != nil {
		return *x.Fixed64
	}
	return 0
}

func (x *MessageFieldValue) GetFixed64S() []uint64 {
	if x != nil {
		return x.Fixed64S
	}
	return nil
}

func (x *MessageFieldValue) GetSfixed32() int32 {
	if x != nil && x.Sfixed32 != nil {
		return *x.Sfixed32
	}
	return 0
}

func (x *MessageFieldValue) GetSfixed32S() []int32 {
	if x != nil {
		return x.Sfixed32S
	}
	return nil
}

func (x *MessageFieldValue) GetSfixed64() int64 {
	if x != nil && x.Sfixed64 != nil {
		return *x.Sfixed64
	}
	return 0
}

func (x *MessageFieldValue) GetSfixed64S() []int64 {
	if x != nil {
		return x.Sfixed64S
	}
	return nil
}

func (x *MessageFieldValue) GetBool() bool {
	if x != nil && x.Bool != nil {
		return *x.Bool
	}
	return false
}

func (x *MessageFieldValue) GetBools() []bool {
	if x != nil {
		return x.Bools
	}
	return nil
}

func (x *MessageFieldValue) GetString_() string {
	if x != nil && x.String_ != nil {
		return *x.String_
	}
	return ""
}

func (x *MessageFieldValue) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *MessageFieldValue) GetByteString() []byte {
	if x != nil {
		return x.ByteString
	}
	return nil
}

func (x *MessageFieldValue) GetByteStrings() [][]byte {
	if x != nil {
		return x.ByteStrings
	}
	return nil
}

func (x *MessageFieldValue) GetMessage() *MessageValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MessageFieldValue) GetMessages() []*MessageValue {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *MessageFieldValue) GetEnum() string {
	if x != nil && x.Enum != nil {
		return *x.Enum
	}
	return ""
}

func (x *MessageFieldValue) GetEnums() []string {
	if x != nil {
		return x.Enums
	}
	return nil
}

func (x *MessageFieldValue) GetEnv() string {
	if x != nil && x.Env != nil {
		return *x.Env
	}
	return ""
}

func (x *MessageFieldValue) GetEnvs() []string {
	if x != nil {
		return x.Envs
	}
	return nil
}

// Validation represents a validation rule against variables defined within the current scope.
type Validation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is a unique name for the validation.
	// If set, the validation error type will be <message-name><name>Error.
	// If omitted, the validation error type will be ValidationError.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// error defines the actual validation rules and an error to returned if the validation fails.
	Error *ValidationError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Validation) Reset() {
	*x = Validation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validation) ProtoMessage() {}

func (x *Validation) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validation.ProtoReflect.Descriptor instead.
func (*Validation) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{19}
}

func (x *Validation) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Validation) GetError() *ValidationError {
	if x != nil {
		return x.Error
	}
	return nil
}

// ValidationError represents a validation rule and validation error to be returned.
type ValidationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// code is a gRPC status code for validation error.
	Code code.Code `protobuf:"varint,1,opt,name=code,proto3,enum=google.rpc.Code" json:"code,omitempty"`
	// message is a gRPC status message for validation error.
	// If omitted, the message will be auto-generated from the configurations.
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
	// rule specifies validation rule in CEL.
	// The return value must always be of type boolean.
	// Either rule or details must be specified.
	Rule *string `protobuf:"bytes,3,opt,name=rule,proto3,oneof" json:"rule,omitempty"`
	// details is a list of validation rules and error details.
	// If the validation fails, the corresponding error details are set.
	// Either rule or details must be specified.
	Details []*ValidationErrorDetail `protobuf:"bytes,4,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *ValidationError) Reset() {
	*x = ValidationError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationError) ProtoMessage() {}

func (x *ValidationError) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationError.ProtoReflect.Descriptor instead.
func (*ValidationError) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{20}
}

func (x *ValidationError) GetCode() code.Code {
	if x != nil {
		return x.Code
	}
	return code.Code(0)
}

func (x *ValidationError) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ValidationError) GetRule() string {
	if x != nil && x.Rule != nil {
		return *x.Rule
	}
	return ""
}

func (x *ValidationError) GetDetails() []*ValidationErrorDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

// ValidationErrorDetail represents a pair of validation rule and error details to be set.
type ValidationErrorDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// rule specifies validation rule in CEL.
	Rule string `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	// error_info describes the cause of the error with structured details.
	ErrorInfo []*errdetails.ErrorInfo `protobuf:"bytes,3,rep,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
	// retry_info describes when the clients can retry a failed request.
	RetryInfo []*errdetails.RetryInfo `protobuf:"bytes,4,rep,name=retry_info,json=retryInfo,proto3" json:"retry_info,omitempty"`
	// debug_info describes additional debugging info.
	DebugInfo []*errdetails.DebugInfo `protobuf:"bytes,5,rep,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty"`
	// quota_failure describes how a quota check failed.
	QuotaFailure []*errdetails.QuotaFailure `protobuf:"bytes,6,rep,name=quota_failure,json=quotaFailure,proto3" json:"quota_failure,omitempty"`
	// precondition_failure describes what preconditions have failed.
	PreconditionFailure []*errdetails.PreconditionFailure `protobuf:"bytes,7,rep,name=precondition_failure,json=preconditionFailure,proto3" json:"precondition_failure,omitempty"`
	// bad_request describes violations in a client request.
	BadRequest []*errdetails.BadRequest `protobuf:"bytes,8,rep,name=bad_request,json=badRequest,proto3" json:"bad_request,omitempty"`
	// request_info contains metadata about the request that clients can attach.
	RequestInfo []*errdetails.RequestInfo `protobuf:"bytes,9,rep,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	// resource_info describes the resource that is being accessed.
	ResourceInfo []*errdetails.ResourceInfo `protobuf:"bytes,10,rep,name=resource_info,json=resourceInfo,proto3" json:"resource_info,omitempty"`
	// help provides links to documentation or for performing an out of band action.
	Help []*errdetails.Help `protobuf:"bytes,11,rep,name=help,proto3" json:"help,omitempty"`
	// localized_message provides a localized error message that is safe to return to the user.
	LocalizedMessage []*errdetails.LocalizedMessage `protobuf:"bytes,12,rep,name=localized_message,json=localizedMessage,proto3" json:"localized_message,omitempty"`
}

func (x *ValidationErrorDetail) Reset() {
	*x = ValidationErrorDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_federation_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationErrorDetail) ProtoMessage() {}

func (x *ValidationErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_federation_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationErrorDetail.ProtoReflect.Descriptor instead.
func (*ValidationErrorDetail) Descriptor() ([]byte, []int) {
	return file_grpc_federation_federation_proto_rawDescGZIP(), []int{21}
}

func (x *ValidationErrorDetail) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *ValidationErrorDetail) GetErrorInfo() []*errdetails.ErrorInfo {
	if x != nil {
		return x.ErrorInfo
	}
	return nil
}

func (x *ValidationErrorDetail) GetRetryInfo() []*errdetails.RetryInfo {
	if x != nil {
		return x.RetryInfo
	}
	return nil
}

func (x *ValidationErrorDetail) GetDebugInfo() []*errdetails.DebugInfo {
	if x != nil {
		return x.DebugInfo
	}
	return nil
}

func (x *ValidationErrorDetail) GetQuotaFailure() []*errdetails.QuotaFailure {
	if x != nil {
		return x.QuotaFailure
	}
	return nil
}

func (x *ValidationErrorDetail) GetPreconditionFailure() []*errdetails.PreconditionFailure {
	if x != nil {
		return x.PreconditionFailure
	}
	return nil
}

func (x *ValidationErrorDetail) GetBadRequest() []*errdetails.BadRequest {
	if x != nil {
		return x.BadRequest
	}
	return nil
}

func (x *ValidationErrorDetail) GetRequestInfo() []*errdetails.RequestInfo {
	if x != nil {
		return x.RequestInfo
	}
	return nil
}

func (x *ValidationErrorDetail) GetResourceInfo() []*errdetails.ResourceInfo {
	if x != nil {
		return x.ResourceInfo
	}
	return nil
}

func (x *ValidationErrorDetail) GetHelp() []*errdetails.Help {
	if x != nil {
		return x.Help
	}
	return nil
}

func (x *ValidationErrorDetail) GetLocalizedMessage() []*errdetails.LocalizedMessage {
	if x != nil {
		return x.LocalizedMessage
	}
	return nil
}

var file_grpc_federation_federation_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*ServiceRule)(nil),
		Field:         70000,
		Name:          "grpc.federation.service",
		Tag:           "bytes,70000,opt,name=service",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*MethodRule)(nil),
		Field:         70000,
		Name:          "grpc.federation.method",
		Tag:           "bytes,70000,opt,name=method",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*MessageRule)(nil),
		Field:         70000,
		Name:          "grpc.federation.message",
		Tag:           "bytes,70000,opt,name=message",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*FieldRule)(nil),
		Field:         70000,
		Name:          "grpc.federation.field",
		Tag:           "bytes,70000,opt,name=field",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumOptions)(nil),
		ExtensionType: (*EnumRule)(nil),
		Field:         70000,
		Name:          "grpc.federation.enum",
		Tag:           "bytes,70000,opt,name=enum",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.EnumValueOptions)(nil),
		ExtensionType: (*EnumValueRule)(nil),
		Field:         70000,
		Name:          "grpc.federation.enum_value",
		Tag:           "bytes,70000,opt,name=enum_value",
		Filename:      "grpc/federation/federation.proto",
	},
	{
		ExtendedType:  (*descriptorpb.OneofOptions)(nil),
		ExtensionType: (*OneofRule)(nil),
		Field:         70000,
		Name:          "grpc.federation.oneof",
		Tag:           "bytes,70000,opt,name=oneof",
		Filename:      "grpc/federation/federation.proto",
	},
}

// Extension fields to descriptorpb.ServiceOptions.
var (
	// optional grpc.federation.ServiceRule service = 70000;
	E_Service = &file_grpc_federation_federation_proto_extTypes[0]
)

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional grpc.federation.MethodRule method = 70000;
	E_Method = &file_grpc_federation_federation_proto_extTypes[1]
)

// Extension fields to descriptorpb.MessageOptions.
var (
	// optional grpc.federation.MessageRule message = 70000;
	E_Message = &file_grpc_federation_federation_proto_extTypes[2]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional grpc.federation.FieldRule field = 70000;
	E_Field = &file_grpc_federation_federation_proto_extTypes[3]
)

// Extension fields to descriptorpb.EnumOptions.
var (
	// optional grpc.federation.EnumRule enum = 70000;
	E_Enum = &file_grpc_federation_federation_proto_extTypes[4]
)

// Extension fields to descriptorpb.EnumValueOptions.
var (
	// optional grpc.federation.EnumValueRule enum_value = 70000;
	E_EnumValue = &file_grpc_federation_federation_proto_extTypes[5]
)

// Extension fields to descriptorpb.OneofOptions.
var (
	// optional grpc.federation.OneofRule oneof = 70000;
	E_Oneof = &file_grpc_federation_federation_proto_extTypes[6]
)

var File_grpc_federation_federation_proto protoreflect.FileDescriptor

var file_grpc_federation_federation_proto_rawDesc = []byte{
	0x0a, 0x20, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70,
	0x63, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x08,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x50, 0x0a,
	0x0d, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22,
	0x0b, 0x0a, 0x09, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x55, 0x0a, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x22, 0x4f, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xb2, 0x02,
	0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x22, 0x87, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x01, 0x52, 0x05, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x22, 0xa8, 0x01, 0x0a,
	0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x42, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x12, 0x4b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x08, 0x0a,
	0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x79, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x22, 0xd1, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2e, 0x0a,
	0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x14, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x13, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0a, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xab, 0x0a, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x13,
	0x0a, 0x02, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x62, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x07, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a,
	0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x05,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73,
	0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x04, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x06, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x73, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x11, 0x48, 0x07, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x11, 0x52,
	0x07, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x11, 0x20, 0x01, 0x28, 0x12, 0x48, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x12, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x12,
	0x1d, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x13, 0x20, 0x01, 0x28, 0x07,
	0x48, 0x09, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x07,
	0x52, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x15, 0x20, 0x01, 0x28, 0x06, 0x48, 0x0a, 0x52, 0x07, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x06, 0x52, 0x08, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x0b, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x09, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x10, 0x48, 0x0c, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x10, 0x52, 0x09, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0d, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x08, 0x52, 0x05, 0x62, 0x6f, 0x6f,
	0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0e, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x79, 0x74,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0f,
	0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x20, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x10, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x04, 0x65, 0x6e, 0x75,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x24, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x6e,
	0x76, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x88, 0x01,
	0x01, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x6e, 0x76, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x62, 0x79, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x65, 0x6e, 0x76, 0x22, 0x85, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61,
	0x75, 0x74, 0x6f, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52,
	0x08, 0x61, 0x75, 0x74, 0x6f, 0x62, 0x69, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x62, 0x69, 0x6e, 0x64, 0x22, 0xa2, 0x01, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x75,
	0x74, 0x6f, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x6f, 0x62, 0x69, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x62, 0x69, 0x6e,
	0x64, 0x22, 0xcc, 0x0a, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x62, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x01, 0x52, 0x07, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x05, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x12, 0x19,
	0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x73, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x48, 0x07, 0x52, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x11,
	0x52, 0x07, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x12, 0x20, 0x01, 0x28, 0x12, 0x48, 0x09, 0x52, 0x06, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x12, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73,
	0x12, 0x1d, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x07, 0x48, 0x0a, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x07, 0x52, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x16, 0x20, 0x01, 0x28, 0x06, 0x48, 0x0b, 0x52, 0x07,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x06, 0x52, 0x08, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x0c, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x09, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x10, 0x48, 0x0d, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x10, 0x52, 0x09, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0e, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x08, 0x52, 0x05, 0x62, 0x6f,
	0x6f, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x79,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x10, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x21, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x11, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x23, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04,
	0x65, 0x6e, 0x75, 0x6d, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x04, 0x65, 0x6e,
	0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x25,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x65,
	0x6e, 0x76, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x62, 0x79, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x6e, 0x76,
	0x22, 0xab, 0x0b, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2c,
	0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02,
	0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02, 0x62, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x06,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x01, 0x52, 0x07, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x04, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x12, 0x1b, 0x0a, 0x06,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x06,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x08, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x11, 0x48, 0x09, 0x52, 0x06, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x11, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x73, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x12, 0x48, 0x0a, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x12, 0x52,
	0x07, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x18, 0x14, 0x20, 0x01, 0x28, 0x07, 0x48, 0x0b, 0x52, 0x07, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x07, 0x52, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x06, 0x48, 0x0c, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x06, 0x52, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x12, 0x1f,
	0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0f,
	0x48, 0x0d, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x73, 0x18, 0x19, 0x20, 0x03,
	0x28, 0x0f, 0x52, 0x09, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x73, 0x12, 0x1f, 0x0a,
	0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x10, 0x48,
	0x0e, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x10, 0x52, 0x09, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x12, 0x17, 0x0a, 0x04,
	0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52, 0x04, 0x62, 0x6f,
	0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x1d,
	0x20, 0x03, 0x28, 0x08, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x11, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b,
	0x62, 0x79, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x12, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x13, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x14, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x6e,
	0x76, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x31,
	0x0a, 0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x52, 0x05, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x62, 0x79, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x6e, 0x76, 0x22, 0x8c,
	0x01, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x14, 0x0a,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x34, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x62, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x5e, 0x0a,
	0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x93, 0x0a,
	0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x01, 0x52, 0x07, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x19, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x01, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x02, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01,
	0x01, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x06, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73,
	0x12, 0x1b, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x05, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x11, 0x48, 0x06, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x11, 0x52, 0x07, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x12, 0x1b,
	0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x11, 0x20, 0x01, 0x28, 0x12, 0x48, 0x07,
	0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x12, 0x52, 0x07, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x07, 0x48, 0x08, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x07, 0x52, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x73,
	0x12, 0x1d, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x06, 0x48, 0x09, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x06, 0x52, 0x08, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x0a, 0x52,
	0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0f, 0x52,
	0x09, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x19, 0x20, 0x01, 0x28, 0x10, 0x48, 0x0b, 0x52, 0x08,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x10, 0x52, 0x09,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x62, 0x6f, 0x6f,
	0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28,
	0x08, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x24, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x0e, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x79, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x0f, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x17, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x10, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x12, 0x15, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52,
	0x03, 0x65, 0x6e, 0x76, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x18,
	0x26, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x65, 0x6e, 0x76, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x65, 0x6e, 0x76, 0x22, 0x66, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x0f,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x24, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x22, 0x85, 0x05, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34,
	0x0a, 0x0a, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x12, 0x52, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x52, 0x13, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x62, 0x61, 0x64, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x62, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x04, 0x68,
	0x65, 0x6c, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x52, 0x04, 0x68, 0x65, 0x6c,
	0x70, 0x12, 0x49, 0x0a, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x59, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf0, 0xa2, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x55, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xf0, 0xa2, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x3a, 0x59,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf0, 0xa2, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x51, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xf0, 0xa2, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x3a, 0x4d, 0x0a, 0x04,
	0x65, 0x6e, 0x75, 0x6d, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xf0, 0xa2, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x3a, 0x62, 0x0a, 0x0a, 0x65,
	0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf0, 0xa2, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x51, 0x0a, 0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x6e, 0x65, 0x6f, 0x66,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf0, 0xa2, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x42, 0xc2, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x61, 0x72,
	0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3b, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xa2, 0x02, 0x03, 0x47,
	0x46, 0x58, 0xaa, 0x02, 0x0f, 0x47, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0xca, 0x02, 0x0f, 0x47, 0x72, 0x70, 0x63, 0x5c, 0x46, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xe2, 0x02, 0x1b, 0x47, 0x72, 0x70, 0x63, 0x5c, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x47, 0x72, 0x70, 0x63, 0x3a, 0x3a, 0x46, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_federation_federation_proto_rawDescOnce sync.Once
	file_grpc_federation_federation_proto_rawDescData = file_grpc_federation_federation_proto_rawDesc
)

func file_grpc_federation_federation_proto_rawDescGZIP() []byte {
	file_grpc_federation_federation_proto_rawDescOnce.Do(func() {
		file_grpc_federation_federation_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_federation_federation_proto_rawDescData)
	})
	return file_grpc_federation_federation_proto_rawDescData
}

var file_grpc_federation_federation_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_grpc_federation_federation_proto_goTypes = []interface{}{
	(*EnumRule)(nil),                       // 0: grpc.federation.EnumRule
	(*EnumValueRule)(nil),                  // 1: grpc.federation.EnumValueRule
	(*OneofRule)(nil),                      // 2: grpc.federation.OneofRule
	(*ServiceRule)(nil),                    // 3: grpc.federation.ServiceRule
	(*ServiceDependency)(nil),              // 4: grpc.federation.ServiceDependency
	(*MethodRule)(nil),                     // 5: grpc.federation.MethodRule
	(*MessageRule)(nil),                    // 6: grpc.federation.MessageRule
	(*Resolver)(nil),                       // 7: grpc.federation.Resolver
	(*RetryPolicy)(nil),                    // 8: grpc.federation.RetryPolicy
	(*RetryPolicyConstant)(nil),            // 9: grpc.federation.RetryPolicyConstant
	(*RetryPolicyExponential)(nil),         // 10: grpc.federation.RetryPolicyExponential
	(*MethodRequest)(nil),                  // 11: grpc.federation.MethodRequest
	(*MethodResponse)(nil),                 // 12: grpc.federation.MethodResponse
	(*Message)(nil),                        // 13: grpc.federation.Message
	(*Argument)(nil),                       // 14: grpc.federation.Argument
	(*FieldRule)(nil),                      // 15: grpc.federation.FieldRule
	(*FieldOneof)(nil),                     // 16: grpc.federation.FieldOneof
	(*MessageValue)(nil),                   // 17: grpc.federation.MessageValue
	(*MessageFieldValue)(nil),              // 18: grpc.federation.MessageFieldValue
	(*Validation)(nil),                     // 19: grpc.federation.Validation
	(*ValidationError)(nil),                // 20: grpc.federation.ValidationError
	(*ValidationErrorDetail)(nil),          // 21: grpc.federation.ValidationErrorDetail
	(code.Code)(0),                         // 22: google.rpc.Code
	(*errdetails.ErrorInfo)(nil),           // 23: google.rpc.ErrorInfo
	(*errdetails.RetryInfo)(nil),           // 24: google.rpc.RetryInfo
	(*errdetails.DebugInfo)(nil),           // 25: google.rpc.DebugInfo
	(*errdetails.QuotaFailure)(nil),        // 26: google.rpc.QuotaFailure
	(*errdetails.PreconditionFailure)(nil), // 27: google.rpc.PreconditionFailure
	(*errdetails.BadRequest)(nil),          // 28: google.rpc.BadRequest
	(*errdetails.RequestInfo)(nil),         // 29: google.rpc.RequestInfo
	(*errdetails.ResourceInfo)(nil),        // 30: google.rpc.ResourceInfo
	(*errdetails.Help)(nil),                // 31: google.rpc.Help
	(*errdetails.LocalizedMessage)(nil),    // 32: google.rpc.LocalizedMessage
	(*descriptorpb.ServiceOptions)(nil),    // 33: google.protobuf.ServiceOptions
	(*descriptorpb.MethodOptions)(nil),     // 34: google.protobuf.MethodOptions
	(*descriptorpb.MessageOptions)(nil),    // 35: google.protobuf.MessageOptions
	(*descriptorpb.FieldOptions)(nil),      // 36: google.protobuf.FieldOptions
	(*descriptorpb.EnumOptions)(nil),       // 37: google.protobuf.EnumOptions
	(*descriptorpb.EnumValueOptions)(nil),  // 38: google.protobuf.EnumValueOptions
	(*descriptorpb.OneofOptions)(nil),      // 39: google.protobuf.OneofOptions
}
var file_grpc_federation_federation_proto_depIdxs = []int32{
	4,  // 0: grpc.federation.ServiceRule.dependencies:type_name -> grpc.federation.ServiceDependency
	7,  // 1: grpc.federation.MessageRule.resolver:type_name -> grpc.federation.Resolver
	13, // 2: grpc.federation.MessageRule.messages:type_name -> grpc.federation.Message
	19, // 3: grpc.federation.MessageRule.validations:type_name -> grpc.federation.Validation
	11, // 4: grpc.federation.Resolver.request:type_name -> grpc.federation.MethodRequest
	12, // 5: grpc.federation.Resolver.response:type_name -> grpc.federation.MethodResponse
	8,  // 6: grpc.federation.Resolver.retry:type_name -> grpc.federation.RetryPolicy
	9,  // 7: grpc.federation.RetryPolicy.constant:type_name -> grpc.federation.RetryPolicyConstant
	10, // 8: grpc.federation.RetryPolicy.exponential:type_name -> grpc.federation.RetryPolicyExponential
	17, // 9: grpc.federation.MethodRequest.message:type_name -> grpc.federation.MessageValue
	17, // 10: grpc.federation.MethodRequest.messages:type_name -> grpc.federation.MessageValue
	14, // 11: grpc.federation.Message.args:type_name -> grpc.federation.Argument
	17, // 12: grpc.federation.Argument.message:type_name -> grpc.federation.MessageValue
	17, // 13: grpc.federation.Argument.messages:type_name -> grpc.federation.MessageValue
	17, // 14: grpc.federation.FieldRule.message:type_name -> grpc.federation.MessageValue
	17, // 15: grpc.federation.FieldRule.messages:type_name -> grpc.federation.MessageValue
	16, // 16: grpc.federation.FieldRule.oneof:type_name -> grpc.federation.FieldOneof
	13, // 17: grpc.federation.FieldOneof.messages:type_name -> grpc.federation.Message
	18, // 18: grpc.federation.MessageValue.fields:type_name -> grpc.federation.MessageFieldValue
	17, // 19: grpc.federation.MessageFieldValue.message:type_name -> grpc.federation.MessageValue
	17, // 20: grpc.federation.MessageFieldValue.messages:type_name -> grpc.federation.MessageValue
	20, // 21: grpc.federation.Validation.error:type_name -> grpc.federation.ValidationError
	22, // 22: grpc.federation.ValidationError.code:type_name -> google.rpc.Code
	21, // 23: grpc.federation.ValidationError.details:type_name -> grpc.federation.ValidationErrorDetail
	23, // 24: grpc.federation.ValidationErrorDetail.error_info:type_name -> google.rpc.ErrorInfo
	24, // 25: grpc.federation.ValidationErrorDetail.retry_info:type_name -> google.rpc.RetryInfo
	25, // 26: grpc.federation.ValidationErrorDetail.debug_info:type_name -> google.rpc.DebugInfo
	26, // 27: grpc.federation.ValidationErrorDetail.quota_failure:type_name -> google.rpc.QuotaFailure
	27, // 28: grpc.federation.ValidationErrorDetail.precondition_failure:type_name -> google.rpc.PreconditionFailure
	28, // 29: grpc.federation.ValidationErrorDetail.bad_request:type_name -> google.rpc.BadRequest
	29, // 30: grpc.federation.ValidationErrorDetail.request_info:type_name -> google.rpc.RequestInfo
	30, // 31: grpc.federation.ValidationErrorDetail.resource_info:type_name -> google.rpc.ResourceInfo
	31, // 32: grpc.federation.ValidationErrorDetail.help:type_name -> google.rpc.Help
	32, // 33: grpc.federation.ValidationErrorDetail.localized_message:type_name -> google.rpc.LocalizedMessage
	33, // 34: grpc.federation.service:extendee -> google.protobuf.ServiceOptions
	34, // 35: grpc.federation.method:extendee -> google.protobuf.MethodOptions
	35, // 36: grpc.federation.message:extendee -> google.protobuf.MessageOptions
	36, // 37: grpc.federation.field:extendee -> google.protobuf.FieldOptions
	37, // 38: grpc.federation.enum:extendee -> google.protobuf.EnumOptions
	38, // 39: grpc.federation.enum_value:extendee -> google.protobuf.EnumValueOptions
	39, // 40: grpc.federation.oneof:extendee -> google.protobuf.OneofOptions
	3,  // 41: grpc.federation.service:type_name -> grpc.federation.ServiceRule
	5,  // 42: grpc.federation.method:type_name -> grpc.federation.MethodRule
	6,  // 43: grpc.federation.message:type_name -> grpc.federation.MessageRule
	15, // 44: grpc.federation.field:type_name -> grpc.federation.FieldRule
	0,  // 45: grpc.federation.enum:type_name -> grpc.federation.EnumRule
	1,  // 46: grpc.federation.enum_value:type_name -> grpc.federation.EnumValueRule
	2,  // 47: grpc.federation.oneof:type_name -> grpc.federation.OneofRule
	48, // [48:48] is the sub-list for method output_type
	48, // [48:48] is the sub-list for method input_type
	41, // [41:48] is the sub-list for extension type_name
	34, // [34:41] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_grpc_federation_federation_proto_init() }
func file_grpc_federation_federation_proto_init() {
	if File_grpc_federation_federation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_federation_federation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumValueRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneofRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceDependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resolver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicyConstant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicyExponential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Argument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldOneof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageFieldValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_federation_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationErrorDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_grpc_federation_federation_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*RetryPolicy_Constant)(nil),
		(*RetryPolicy_Exponential)(nil),
	}
	file_grpc_federation_federation_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*FieldOneof_Expr)(nil),
		(*FieldOneof_Default)(nil),
	}
	file_grpc_federation_federation_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_grpc_federation_federation_proto_msgTypes[20].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_federation_federation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 7,
			NumServices:   0,
		},
		GoTypes:           file_grpc_federation_federation_proto_goTypes,
		DependencyIndexes: file_grpc_federation_federation_proto_depIdxs,
		MessageInfos:      file_grpc_federation_federation_proto_msgTypes,
		ExtensionInfos:    file_grpc_federation_federation_proto_extTypes,
	}.Build()
	File_grpc_federation_federation_proto = out.File
	file_grpc_federation_federation_proto_rawDesc = nil
	file_grpc_federation_federation_proto_goTypes = nil
	file_grpc_federation_federation_proto_depIdxs = nil
}
