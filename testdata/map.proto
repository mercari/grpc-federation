syntax = "proto3";

package org.federation;

import "google/protobuf/any.proto";
import "grpc/federation/federation.proto";

option go_package = "example/federation;federation";

option (grpc.federation.file)= {
  import: ["post.proto", "user.proto"]
};

service FederationService {
  option (grpc.federation.service) = {};
  rpc GetPosts(GetPostsRequest) returns (GetPostsResponse) {};
}

message GetPostsRequest {
  repeated string ids = 1;
}
    
message GetPostsResponse {
  option (grpc.federation.message) = {
    def {
      name: "posts"
      message {
        name: "Posts"
        args { name: "post_ids", by: "$.ids" }
      }
    }
  };
  Posts posts = 1 [(grpc.federation.field).by = "posts"];
}

message Posts {
  option (grpc.federation.message) = {
    def [
      {
         name: "res"
         call {
          method: "org.post.PostService/GetPosts"
          request { field: "ids" by: "$.post_ids" }
         }
      },
      { name: "posts", by: "res.posts" },
      {
        name: "ids"
        map {
          iterator {
            name: "post"
            src: "posts"
          }
          by: "post.id"
        }
      },
      {
        name: "users"
        map {
          iterator {
            name: "iter"
            src: "posts"
          }
          message {
            name: "User"
            args { name: "user_id", by: "iter.user_id" }
          }
        }
      },
      {
        name: "items"
        map {
          iterator {
            name: "iter"
            src: "posts"
          }
          message {
            name: "Posts.PostItem"
            args { name: "id" by: "iter.id" }
          }
        }
      },
      {
        name: "source_user_types"
        by: "[org.user.UserType.value('USER_TYPE_1'), org.user.UserType.value('USER_TYPE_2')]"
      },
      {
        name: "user_types"
        map {
          iterator {
            name: "typ"
            src: "source_user_types"
          }
          enum {
            name: "UserType"
            by: "typ"
          }
        }
      }
    ]
  };

  message PostItem {
    string name = 1 [(grpc.federation.field).by = "'item_' + $.id"];
  };

  repeated string ids = 1 [(grpc.federation.field).by = "ids"];
  repeated string titles = 2 [(grpc.federation.field).by = "posts.map(post, post.title)"];
  repeated string contents = 3 [(grpc.federation.field).by = "posts.map(post, post.content)"];
  repeated User users = 4 [(grpc.federation.field).by = "users"];
  repeated PostItem items = 5 [(grpc.federation.field).by = "items"];
  repeated UserType user_types = 6 [(grpc.federation.field).by = "user_types"];
}

message User {
  option (grpc.federation.message) = {
    def {
      name: "res"
      call {
        method: "org.user.UserService/GetUser"
        request { field: "id" by: "$.user_id" }
      }
    }
    def { name: "user" by: "res.user" autobind: true }
    custom_resolver: true
  };
  string id = 1;
  string name = 2;
}

enum UserType {
  option (grpc.federation.enum).alias = "org.user.UserType";

  USER_TYPE_1 = 0;
  USER_TYPE_2 = 1;
}
