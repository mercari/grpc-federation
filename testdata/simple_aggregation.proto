syntax = "proto3";

package org.federation;

import "google/protobuf/any.proto";
import "grpc/federation/federation.proto";
import "post.proto";
import "user.proto";

option go_package = "example/federation;federation";

service FederationService {
  option (grpc.federation.service) = {};
  rpc GetPost(GetPostRequest) returns (GetPostResponse) {
    option (grpc.federation.method).timeout = "1m";
  };
}

message GetPostRequest {
  string id = 1;
}

message GetPostResponse {
  option (grpc.federation.message) = {
    def {
      name: "post"
      message {
        name: "Post"
        args { name: "id", by: "$.id" }
      }
    }
    def { name: "uuid" by: "grpc.federation.uuid.newRandom()" }
    def { name: "map_value" by: "{1:'a', 2:'b', 3:'c'}" }
  };
  org.federation.Post post = 1 [(grpc.federation.field).by = "post"];
  string const = 2 [(grpc.federation.field).by = "'foo'"];
  string uuid = 3 [(grpc.federation.field).by = "uuid.string()"];
  string enum_name = 4 [(grpc.federation.field).by = "org.federation.Item.ItemType.name(org.federation.Item.ItemType.ITEM_TYPE_1)"];
  int32 enum_value = 5 [(grpc.federation.field).by = "org.federation.Item.ItemType.value('ITEM_TYPE_1')"];
  map<int32, string> map_value = 6 [(grpc.federation.field).by = "map_value"];
}

message Post {
  option (grpc.federation.message) = {
    def [
      {
         name: "res"
         call {
          method: "org.post.PostService/GetPost"
          request { field: "id" by: "$.id" }
          timeout: "10s"
          retry {
            constant {
              interval: "2s"
              max_retries: 3
            }
          }
         }
      },
      { name: "post" by: "res.post" autobind: true },
      { name: "user" message { name: "User" args { inline: "post" } } },
      { name: "z" message { name: "Z" } },
      {
        name: "m"
        message {
          name: "M"
          args [
            { name: "x" by: "10" },
            { name: "y" by: "1" }
          ]
        }
        autobind: true
      }
    ]
  };
  string id = 1;
  string title = 2;
  string content = 3;
  User user = 4 [(grpc.federation.field).by = "user"];
  string foo = 5;
  int64 bar = 6;
}

enum UserType {
  option (grpc.federation.enum).alias = "org.user.UserType";

  USER_TYPE_1 = 0;
  USER_TYPE_2 = 1;
}

message User {
  option (grpc.federation.message) = {
    def {
      name: "res"
      call {
        method: "org.user.UserService/GetUser"
        request { field: "id" by: "$.user_id" }
        timeout: "20s"
        retry {
          if: "error.code != google.rpc.Code.UNIMPLEMENTED"
          exponential {
            initial_interval: "1s"
            randomization_factor: 0.7
            multiplier: 1.7
            max_interval: "30s"
            max_retries: 3
          }
        }
      }
    }
    def { name: "user" by: "res.user" autobind: true }
    def {
      message {
        name: "M"
        args [
          { name: "x" by: "uint(2)" },
          { name: "y" by: "org.user.Item.ItemType.value('ITEM_TYPE_2')" }
        ]
      }
    }
  };
  string id = 1;
  UserType type = 2;
  string name = 3;
  uint64 age = 4 [(grpc.federation.field).custom_resolver = true];
  repeated string desc = 5;
  Item main_item = 6;
  repeated Item items = 7;
  map<string,google.protobuf.Any> profile = 8;
  oneof attr {
    AttrA attr_a = 9;
    AttrB b = 10;
  }
  message AttrA {
    option (grpc.federation.message).alias = "org.user.User.AttrA";
    string foo = 1;
  }
  message AttrB {
    option (grpc.federation.message).alias = "org.user.User.AttrB";
    bool bar = 2;
  }
}

message Item {
  option (grpc.federation.message).alias = "org.user.Item";

  enum ItemType {
    option (grpc.federation.enum).alias = "org.user.Item.ItemType";

    ITEM_TYPE_1 = 0;
    ITEM_TYPE_2 = 1;
    ITEM_TYPE_3 = 2;
  };

  string name = 1;
  ItemType type = 2;
  uint32 value = 3;
}

message Z {
  option (grpc.federation.message).custom_resolver = true;

  string foo = 1;
}

message M {
  string foo = 1 [(grpc.federation.field).by = "'foo'"];
  int64 bar = 2 [(grpc.federation.field).by = "1"];
}

message N {
  option (grpc.federation.message) = {
    def { by: "$.foo" }
  };
}