// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: grpc/federation/generator.proto

package plugin

import (
	code "google.golang.org/genproto/googleapis/rpc/code"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActionType int32

const (
	ActionType_GENERATE_ACTION ActionType = 0
	ActionType_KEEP_ACTION     ActionType = 1
	ActionType_CREATE_ACTION   ActionType = 2
	ActionType_DELETE_ACTION   ActionType = 3
	ActionType_UPDATE_ACTION   ActionType = 4
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "GENERATE_ACTION",
		1: "KEEP_ACTION",
		2: "CREATE_ACTION",
		3: "DELETE_ACTION",
		4: "UPDATE_ACTION",
	}
	ActionType_value = map[string]int32{
		"GENERATE_ACTION": 0,
		"KEEP_ACTION":     1,
		"CREATE_ACTION":   2,
		"DELETE_ACTION":   3,
		"UPDATE_ACTION":   4,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_federation_generator_proto_enumTypes[0].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_grpc_federation_generator_proto_enumTypes[0]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{0}
}

type TypeKind int32

const (
	TypeKind_UNKNOWN_TYPE  TypeKind = 0
	TypeKind_DOUBLE_TYPE   TypeKind = 1
	TypeKind_FLOAT_TYPE    TypeKind = 2
	TypeKind_INT64_TYPE    TypeKind = 3
	TypeKind_UINT64_TYPE   TypeKind = 4
	TypeKind_INT32_TYPE    TypeKind = 5
	TypeKind_FIXED64_TYPE  TypeKind = 6
	TypeKind_FIXED32_TYPE  TypeKind = 7
	TypeKind_BOOL_TYPE     TypeKind = 8
	TypeKind_STRING_TYPE   TypeKind = 9
	TypeKind_GROUP_TYPE    TypeKind = 10
	TypeKind_MESSAGE_TYPE  TypeKind = 11
	TypeKind_BYTES_TYPE    TypeKind = 12
	TypeKind_UINT32_TYPE   TypeKind = 13
	TypeKind_ENUM_TYPE     TypeKind = 14
	TypeKind_SFIXED32_TYPE TypeKind = 15
	TypeKind_SFIXED64_TYPE TypeKind = 16
	TypeKind_SINT32_TYPE   TypeKind = 17
	TypeKind_SINT64_TYPE   TypeKind = 18
)

// Enum value maps for TypeKind.
var (
	TypeKind_name = map[int32]string{
		0:  "UNKNOWN_TYPE",
		1:  "DOUBLE_TYPE",
		2:  "FLOAT_TYPE",
		3:  "INT64_TYPE",
		4:  "UINT64_TYPE",
		5:  "INT32_TYPE",
		6:  "FIXED64_TYPE",
		7:  "FIXED32_TYPE",
		8:  "BOOL_TYPE",
		9:  "STRING_TYPE",
		10: "GROUP_TYPE",
		11: "MESSAGE_TYPE",
		12: "BYTES_TYPE",
		13: "UINT32_TYPE",
		14: "ENUM_TYPE",
		15: "SFIXED32_TYPE",
		16: "SFIXED64_TYPE",
		17: "SINT32_TYPE",
		18: "SINT64_TYPE",
	}
	TypeKind_value = map[string]int32{
		"UNKNOWN_TYPE":  0,
		"DOUBLE_TYPE":   1,
		"FLOAT_TYPE":    2,
		"INT64_TYPE":    3,
		"UINT64_TYPE":   4,
		"INT32_TYPE":    5,
		"FIXED64_TYPE":  6,
		"FIXED32_TYPE":  7,
		"BOOL_TYPE":     8,
		"STRING_TYPE":   9,
		"GROUP_TYPE":    10,
		"MESSAGE_TYPE":  11,
		"BYTES_TYPE":    12,
		"UINT32_TYPE":   13,
		"ENUM_TYPE":     14,
		"SFIXED32_TYPE": 15,
		"SFIXED64_TYPE": 16,
		"SINT32_TYPE":   17,
		"SINT64_TYPE":   18,
	}
)

func (x TypeKind) Enum() *TypeKind {
	p := new(TypeKind)
	*p = x
	return p
}

func (x TypeKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeKind) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_federation_generator_proto_enumTypes[1].Descriptor()
}

func (TypeKind) Type() protoreflect.EnumType {
	return &file_grpc_federation_generator_proto_enumTypes[1]
}

func (x TypeKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeKind.Descriptor instead.
func (TypeKind) EnumDescriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{1}
}

type ProtoCodeGeneratorResponse_Feature int32

const (
	ProtoCodeGeneratorResponse_FEATURE_NONE              ProtoCodeGeneratorResponse_Feature = 0
	ProtoCodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL   ProtoCodeGeneratorResponse_Feature = 1
	ProtoCodeGeneratorResponse_FEATURE_SUPPORTS_EDITIONS ProtoCodeGeneratorResponse_Feature = 2
)

// Enum value maps for ProtoCodeGeneratorResponse_Feature.
var (
	ProtoCodeGeneratorResponse_Feature_name = map[int32]string{
		0: "FEATURE_NONE",
		1: "FEATURE_PROTO3_OPTIONAL",
		2: "FEATURE_SUPPORTS_EDITIONS",
	}
	ProtoCodeGeneratorResponse_Feature_value = map[string]int32{
		"FEATURE_NONE":              0,
		"FEATURE_PROTO3_OPTIONAL":   1,
		"FEATURE_SUPPORTS_EDITIONS": 2,
	}
)

func (x ProtoCodeGeneratorResponse_Feature) Enum() *ProtoCodeGeneratorResponse_Feature {
	p := new(ProtoCodeGeneratorResponse_Feature)
	*p = x
	return p
}

func (x ProtoCodeGeneratorResponse_Feature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoCodeGeneratorResponse_Feature) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_federation_generator_proto_enumTypes[2].Descriptor()
}

func (ProtoCodeGeneratorResponse_Feature) Type() protoreflect.EnumType {
	return &file_grpc_federation_generator_proto_enumTypes[2]
}

func (x ProtoCodeGeneratorResponse_Feature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoCodeGeneratorResponse_Feature.Descriptor instead.
func (ProtoCodeGeneratorResponse_Feature) EnumDescriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{0, 0}
}

type ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic int32

const (
	ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_NONE  ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic = 0
	ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_SET   ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic = 1
	ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_ALIAS ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic = 2
)

// Enum value maps for ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic.
var (
	ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic_name = map[int32]string{
		0: "NONE",
		1: "SET",
		2: "ALIAS",
	}
	ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic_value = map[string]int32{
		"NONE":  0,
		"SET":   1,
		"ALIAS": 2,
	}
)

func (x ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic) Enum() *ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic {
	p := new(ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic)
	*p = x
	return p
}

func (x ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_federation_generator_proto_enumTypes[3].Descriptor()
}

func (ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic) Type() protoreflect.EnumType {
	return &file_grpc_federation_generator_proto_enumTypes[3]
}

func (x ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic.Descriptor instead.
func (ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic) EnumDescriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

type ProtoCodeGeneratorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error             *string                            `protobuf:"bytes,1,opt,name=error,proto3,oneof" json:"error,omitempty"`
	SupportedFeatures *uint64                            `protobuf:"varint,2,opt,name=supported_features,json=supportedFeatures,proto3,oneof" json:"supported_features,omitempty"`
	MinimumEdition    *int32                             `protobuf:"varint,3,opt,name=minimum_edition,json=minimumEdition,proto3,oneof" json:"minimum_edition,omitempty"`
	MaximumEdition    *int32                             `protobuf:"varint,4,opt,name=maximum_edition,json=maximumEdition,proto3,oneof" json:"maximum_edition,omitempty"`
	File              []*ProtoCodeGeneratorResponse_File `protobuf:"bytes,15,rep,name=file,proto3" json:"file,omitempty"`
}

func (x *ProtoCodeGeneratorResponse) Reset() {
	*x = ProtoCodeGeneratorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoCodeGeneratorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCodeGeneratorResponse) ProtoMessage() {}

func (x *ProtoCodeGeneratorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCodeGeneratorResponse.ProtoReflect.Descriptor instead.
func (*ProtoCodeGeneratorResponse) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{0}
}

func (x *ProtoCodeGeneratorResponse) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *ProtoCodeGeneratorResponse) GetSupportedFeatures() uint64 {
	if x != nil && x.SupportedFeatures != nil {
		return *x.SupportedFeatures
	}
	return 0
}

func (x *ProtoCodeGeneratorResponse) GetMinimumEdition() int32 {
	if x != nil && x.MinimumEdition != nil {
		return *x.MinimumEdition
	}
	return 0
}

func (x *ProtoCodeGeneratorResponse) GetMaximumEdition() int32 {
	if x != nil && x.MaximumEdition != nil {
		return *x.MaximumEdition
	}
	return 0
}

func (x *ProtoCodeGeneratorResponse) GetFile() []*ProtoCodeGeneratorResponse_File {
	if x != nil {
		return x.File
	}
	return nil
}

// CodeGeneratorRequest.
type CodeGeneratorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                  ActionType                         `protobuf:"varint,1,opt,name=type,proto3,enum=grpc.federation.generator.plugin.ActionType" json:"type,omitempty"`
	ProtoPath             string                             `protobuf:"bytes,2,opt,name=proto_path,json=protoPath,proto3" json:"proto_path,omitempty"`
	OutDir                string                             `protobuf:"bytes,3,opt,name=out_dir,json=outDir,proto3" json:"out_dir,omitempty"`
	Files                 []*ProtoCodeGeneratorResponse_File `protobuf:"bytes,4,rep,name=files,proto3" json:"files,omitempty"`
	GrpcFederationFileIds []string                           `protobuf:"bytes,5,rep,name=grpc_federation_file_ids,json=grpcFederationFileIds,proto3" json:"grpc_federation_file_ids,omitempty"`
	Reference             *Reference                         `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *CodeGeneratorRequest) Reset() {
	*x = CodeGeneratorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeGeneratorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeGeneratorRequest) ProtoMessage() {}

func (x *CodeGeneratorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeGeneratorRequest.ProtoReflect.Descriptor instead.
func (*CodeGeneratorRequest) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{1}
}

func (x *CodeGeneratorRequest) GetType() ActionType {
	if x != nil {
		return x.Type
	}
	return ActionType_GENERATE_ACTION
}

func (x *CodeGeneratorRequest) GetProtoPath() string {
	if x != nil {
		return x.ProtoPath
	}
	return ""
}

func (x *CodeGeneratorRequest) GetOutDir() string {
	if x != nil {
		return x.OutDir
	}
	return ""
}

func (x *CodeGeneratorRequest) GetFiles() []*ProtoCodeGeneratorResponse_File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *CodeGeneratorRequest) GetGrpcFederationFileIds() []string {
	if x != nil {
		return x.GrpcFederationFileIds
	}
	return nil
}

func (x *CodeGeneratorRequest) GetReference() *Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileMap                    map[string]*File                    `protobuf:"bytes,1,rep,name=file_map,json=fileMap,proto3" json:"file_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ServiceMap                 map[string]*Service                 `protobuf:"bytes,2,rep,name=service_map,json=serviceMap,proto3" json:"service_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MethodMap                  map[string]*Method                  `protobuf:"bytes,3,rep,name=method_map,json=methodMap,proto3" json:"method_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MessageMap                 map[string]*Message                 `protobuf:"bytes,4,rep,name=message_map,json=messageMap,proto3" json:"message_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FieldMap                   map[string]*Field                   `protobuf:"bytes,5,rep,name=field_map,json=fieldMap,proto3" json:"field_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnumMap                    map[string]*Enum                    `protobuf:"bytes,6,rep,name=enum_map,json=enumMap,proto3" json:"enum_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnumValueMap               map[string]*EnumValue               `protobuf:"bytes,7,rep,name=enum_value_map,json=enumValueMap,proto3" json:"enum_value_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OneofMap                   map[string]*Oneof                   `protobuf:"bytes,8,rep,name=oneof_map,json=oneofMap,proto3" json:"oneof_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CelPluginMap               map[string]*CELPlugin               `protobuf:"bytes,9,rep,name=cel_plugin_map,json=celPluginMap,proto3" json:"cel_plugin_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GraphMap                   map[string]*MessageDependencyGraph  `protobuf:"bytes,10,rep,name=graph_map,json=graphMap,proto3" json:"graph_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VariableDefinitionMap      map[string]*VariableDefinition      `protobuf:"bytes,11,rep,name=variable_definition_map,json=variableDefinitionMap,proto3" json:"variable_definition_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VariableDefinitionGroupMap map[string]*VariableDefinitionGroup `protobuf:"bytes,12,rep,name=variable_definition_group_map,json=variableDefinitionGroupMap,proto3" json:"variable_definition_group_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{2}
}

func (x *Reference) GetFileMap() map[string]*File {
	if x != nil {
		return x.FileMap
	}
	return nil
}

func (x *Reference) GetServiceMap() map[string]*Service {
	if x != nil {
		return x.ServiceMap
	}
	return nil
}

func (x *Reference) GetMethodMap() map[string]*Method {
	if x != nil {
		return x.MethodMap
	}
	return nil
}

func (x *Reference) GetMessageMap() map[string]*Message {
	if x != nil {
		return x.MessageMap
	}
	return nil
}

func (x *Reference) GetFieldMap() map[string]*Field {
	if x != nil {
		return x.FieldMap
	}
	return nil
}

func (x *Reference) GetEnumMap() map[string]*Enum {
	if x != nil {
		return x.EnumMap
	}
	return nil
}

func (x *Reference) GetEnumValueMap() map[string]*EnumValue {
	if x != nil {
		return x.EnumValueMap
	}
	return nil
}

func (x *Reference) GetOneofMap() map[string]*Oneof {
	if x != nil {
		return x.OneofMap
	}
	return nil
}

func (x *Reference) GetCelPluginMap() map[string]*CELPlugin {
	if x != nil {
		return x.CelPluginMap
	}
	return nil
}

func (x *Reference) GetGraphMap() map[string]*MessageDependencyGraph {
	if x != nil {
		return x.GraphMap
	}
	return nil
}

func (x *Reference) GetVariableDefinitionMap() map[string]*VariableDefinition {
	if x != nil {
		return x.VariableDefinitionMap
	}
	return nil
}

func (x *Reference) GetVariableDefinitionGroupMap() map[string]*VariableDefinitionGroup {
	if x != nil {
		return x.VariableDefinitionGroupMap
	}
	return nil
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Package       *Package   `protobuf:"bytes,2,opt,name=package,proto3" json:"package,omitempty"`
	GoPackage     *GoPackage `protobuf:"bytes,3,opt,name=go_package,json=goPackage,proto3" json:"go_package,omitempty"`
	Name          string     `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ServiceIds    []string   `protobuf:"bytes,5,rep,name=service_ids,json=serviceIds,proto3" json:"service_ids,omitempty"`
	MessageIds    []string   `protobuf:"bytes,6,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
	EnumIds       []string   `protobuf:"bytes,7,rep,name=enum_ids,json=enumIds,proto3" json:"enum_ids,omitempty"`
	CelPluginIds  []string   `protobuf:"bytes,8,rep,name=cel_plugin_ids,json=celPluginIds,proto3" json:"cel_plugin_ids,omitempty"`
	ImportFileIds []string   `protobuf:"bytes,9,rep,name=import_file_ids,json=importFileIds,proto3" json:"import_file_ids,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{3}
}

func (x *File) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *File) GetPackage() *Package {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *File) GetGoPackage() *GoPackage {
	if x != nil {
		return x.GoPackage
	}
	return nil
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *File) GetServiceIds() []string {
	if x != nil {
		return x.ServiceIds
	}
	return nil
}

func (x *File) GetMessageIds() []string {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

func (x *File) GetEnumIds() []string {
	if x != nil {
		return x.EnumIds
	}
	return nil
}

func (x *File) GetCelPluginIds() []string {
	if x != nil {
		return x.CelPluginIds
	}
	return nil
}

func (x *File) GetImportFileIds() []string {
	if x != nil {
		return x.ImportFileIds
	}
	return nil
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FileIds []string `protobuf:"bytes,2,rep,name=file_ids,json=fileIds,proto3" json:"file_ids,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{4}
}

func (x *Package) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Package) GetFileIds() []string {
	if x != nil {
		return x.FileIds
	}
	return nil
}

type GoPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ImportPath string `protobuf:"bytes,2,opt,name=import_path,json=importPath,proto3" json:"import_path,omitempty"`
	AliasName  string `protobuf:"bytes,3,opt,name=alias_name,json=aliasName,proto3" json:"alias_name,omitempty"`
}

func (x *GoPackage) Reset() {
	*x = GoPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoPackage) ProtoMessage() {}

func (x *GoPackage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoPackage.ProtoReflect.Descriptor instead.
func (*GoPackage) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{5}
}

func (x *GoPackage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoPackage) GetImportPath() string {
	if x != nil {
		return x.ImportPath
	}
	return ""
}

func (x *GoPackage) GetAliasName() string {
	if x != nil {
		return x.AliasName
	}
	return ""
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MethodIds     []string     `protobuf:"bytes,3,rep,name=method_ids,json=methodIds,proto3" json:"method_ids,omitempty"`
	FileId        string       `protobuf:"bytes,4,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	MessageIds    []string     `protobuf:"bytes,5,rep,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
	MessageArgIds []string     `protobuf:"bytes,6,rep,name=message_arg_ids,json=messageArgIds,proto3" json:"message_arg_ids,omitempty"`
	CelPluginIds  []string     `protobuf:"bytes,7,rep,name=cel_plugin_ids,json=celPluginIds,proto3" json:"cel_plugin_ids,omitempty"`
	Rule          *ServiceRule `protobuf:"bytes,8,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{6}
}

func (x *Service) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetMethodIds() []string {
	if x != nil {
		return x.MethodIds
	}
	return nil
}

func (x *Service) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *Service) GetMessageIds() []string {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

func (x *Service) GetMessageArgIds() []string {
	if x != nil {
		return x.MessageArgIds
	}
	return nil
}

func (x *Service) GetCelPluginIds() []string {
	if x != nil {
		return x.CelPluginIds
	}
	return nil
}

func (x *Service) GetRule() *ServiceRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type ServiceRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServiceRule) Reset() {
	*x = ServiceRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRule) ProtoMessage() {}

func (x *ServiceRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRule.ProtoReflect.Descriptor instead.
func (*ServiceRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{7}
}

type Method struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	RequestId  string      `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResponseId string      `protobuf:"bytes,4,opt,name=response_id,json=responseId,proto3" json:"response_id,omitempty"`
	ServiceId  string      `protobuf:"bytes,5,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	Rule       *MethodRule `protobuf:"bytes,6,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *Method) Reset() {
	*x = Method{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Method) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Method) ProtoMessage() {}

func (x *Method) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Method.ProtoReflect.Descriptor instead.
func (*Method) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{8}
}

func (x *Method) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Method) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Method) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Method) GetResponseId() string {
	if x != nil {
		return x.ResponseId
	}
	return ""
}

func (x *Method) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *Method) GetRule() *MethodRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type MethodRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout    *durationpb.Duration `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	ResponseId string               `protobuf:"bytes,2,opt,name=response_id,json=responseId,proto3" json:"response_id,omitempty"`
}

func (x *MethodRule) Reset() {
	*x = MethodRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodRule) ProtoMessage() {}

func (x *MethodRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodRule.ProtoReflect.Descriptor instead.
func (*MethodRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{9}
}

func (x *MethodRule) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *MethodRule) GetResponseId() string {
	if x != nil {
		return x.ResponseId
	}
	return ""
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsMapEntry       bool         `protobuf:"varint,3,opt,name=is_map_entry,json=isMapEntry,proto3" json:"is_map_entry,omitempty"`
	FileId           string       `protobuf:"bytes,4,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	ParentMessageId  string       `protobuf:"bytes,5,opt,name=parent_message_id,json=parentMessageId,proto3" json:"parent_message_id,omitempty"`
	NestedMessageIds []string     `protobuf:"bytes,6,rep,name=nested_message_ids,json=nestedMessageIds,proto3" json:"nested_message_ids,omitempty"`
	EnumIds          []string     `protobuf:"bytes,7,rep,name=enum_ids,json=enumIds,proto3" json:"enum_ids,omitempty"`
	FieldIds         []string     `protobuf:"bytes,8,rep,name=field_ids,json=fieldIds,proto3" json:"field_ids,omitempty"`
	OneofIds         []string     `protobuf:"bytes,9,rep,name=oneof_ids,json=oneofIds,proto3" json:"oneof_ids,omitempty"`
	Rule             *MessageRule `protobuf:"bytes,10,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{10}
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Message) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Message) GetIsMapEntry() bool {
	if x != nil {
		return x.IsMapEntry
	}
	return false
}

func (x *Message) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *Message) GetParentMessageId() string {
	if x != nil {
		return x.ParentMessageId
	}
	return ""
}

func (x *Message) GetNestedMessageIds() []string {
	if x != nil {
		return x.NestedMessageIds
	}
	return nil
}

func (x *Message) GetEnumIds() []string {
	if x != nil {
		return x.EnumIds
	}
	return nil
}

func (x *Message) GetFieldIds() []string {
	if x != nil {
		return x.FieldIds
	}
	return nil
}

func (x *Message) GetOneofIds() []string {
	if x != nil {
		return x.OneofIds
	}
	return nil
}

func (x *Message) GetRule() *MessageRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type MessageRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageArgumentId string                 `protobuf:"bytes,1,opt,name=message_argument_id,json=messageArgumentId,proto3" json:"message_argument_id,omitempty"`
	CustomResolver    bool                   `protobuf:"varint,2,opt,name=custom_resolver,json=customResolver,proto3" json:"custom_resolver,omitempty"`
	AliasIds          []string               `protobuf:"bytes,3,rep,name=alias_ids,json=aliasIds,proto3" json:"alias_ids,omitempty"`
	DefSet            *VariableDefinitionSet `protobuf:"bytes,4,opt,name=def_set,json=defSet,proto3" json:"def_set,omitempty"`
}

func (x *MessageRule) Reset() {
	*x = MessageRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRule) ProtoMessage() {}

func (x *MessageRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRule.ProtoReflect.Descriptor instead.
func (*MessageRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{11}
}

func (x *MessageRule) GetMessageArgumentId() string {
	if x != nil {
		return x.MessageArgumentId
	}
	return ""
}

func (x *MessageRule) GetCustomResolver() bool {
	if x != nil {
		return x.CustomResolver
	}
	return false
}

func (x *MessageRule) GetAliasIds() []string {
	if x != nil {
		return x.AliasIds
	}
	return nil
}

func (x *MessageRule) GetDefSet() *VariableDefinitionSet {
	if x != nil {
		return x.DefSet
	}
	return nil
}

type VariableDefinitionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VariableDefinitionIds      []string `protobuf:"bytes,1,rep,name=variable_definition_ids,json=variableDefinitionIds,proto3" json:"variable_definition_ids,omitempty"`
	VariableDefinitionGroupIds []string `protobuf:"bytes,2,rep,name=variable_definition_group_ids,json=variableDefinitionGroupIds,proto3" json:"variable_definition_group_ids,omitempty"`
	DependencyGraphId          string   `protobuf:"bytes,3,opt,name=dependency_graph_id,json=dependencyGraphId,proto3" json:"dependency_graph_id,omitempty"`
}

func (x *VariableDefinitionSet) Reset() {
	*x = VariableDefinitionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableDefinitionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableDefinitionSet) ProtoMessage() {}

func (x *VariableDefinitionSet) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableDefinitionSet.ProtoReflect.Descriptor instead.
func (*VariableDefinitionSet) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{12}
}

func (x *VariableDefinitionSet) GetVariableDefinitionIds() []string {
	if x != nil {
		return x.VariableDefinitionIds
	}
	return nil
}

func (x *VariableDefinitionSet) GetVariableDefinitionGroupIds() []string {
	if x != nil {
		return x.VariableDefinitionGroupIds
	}
	return nil
}

func (x *VariableDefinitionSet) GetDependencyGraphId() string {
	if x != nil {
		return x.DependencyGraphId
	}
	return ""
}

type VariableDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Index    int64         `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Name     string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	If       *CELValue     `protobuf:"bytes,4,opt,name=if,proto3" json:"if,omitempty"`
	AutoBind bool          `protobuf:"varint,5,opt,name=auto_bind,json=autoBind,proto3" json:"auto_bind,omitempty"`
	Used     bool          `protobuf:"varint,6,opt,name=used,proto3" json:"used,omitempty"`
	Expr     *VariableExpr `protobuf:"bytes,7,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *VariableDefinition) Reset() {
	*x = VariableDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableDefinition) ProtoMessage() {}

func (x *VariableDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableDefinition.ProtoReflect.Descriptor instead.
func (*VariableDefinition) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{13}
}

func (x *VariableDefinition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VariableDefinition) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *VariableDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VariableDefinition) GetIf() *CELValue {
	if x != nil {
		return x.If
	}
	return nil
}

func (x *VariableDefinition) GetAutoBind() bool {
	if x != nil {
		return x.AutoBind
	}
	return false
}

func (x *VariableDefinition) GetUsed() bool {
	if x != nil {
		return x.Used
	}
	return false
}

func (x *VariableDefinition) GetExpr() *VariableExpr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type      *Type      `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	OneofId   string     `protobuf:"bytes,4,opt,name=oneof_id,json=oneofId,proto3" json:"oneof_id,omitempty"`
	Rule      *FieldRule `protobuf:"bytes,5,opt,name=rule,proto3" json:"rule,omitempty"`
	MessageId string     `protobuf:"bytes,6,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{14}
}

func (x *Field) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Field) GetOneofId() string {
	if x != nil {
		return x.OneofId
	}
	return ""
}

func (x *Field) GetRule() *FieldRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *Field) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type FieldRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value                 *Value          `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	CustomResolver        bool            `protobuf:"varint,2,opt,name=custom_resolver,json=customResolver,proto3" json:"custom_resolver,omitempty"`
	MessageCustomResolver bool            `protobuf:"varint,3,opt,name=message_custom_resolver,json=messageCustomResolver,proto3" json:"message_custom_resolver,omitempty"`
	AliasIds              []string        `protobuf:"bytes,4,rep,name=alias_ids,json=aliasIds,proto3" json:"alias_ids,omitempty"`
	AutoBindField         *AutoBindField  `protobuf:"bytes,5,opt,name=auto_bind_field,json=autoBindField,proto3" json:"auto_bind_field,omitempty"`
	OneofRule             *FieldOneofRule `protobuf:"bytes,6,opt,name=oneof_rule,json=oneofRule,proto3" json:"oneof_rule,omitempty"`
}

func (x *FieldRule) Reset() {
	*x = FieldRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldRule) ProtoMessage() {}

func (x *FieldRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldRule.ProtoReflect.Descriptor instead.
func (*FieldRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{15}
}

func (x *FieldRule) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *FieldRule) GetCustomResolver() bool {
	if x != nil {
		return x.CustomResolver
	}
	return false
}

func (x *FieldRule) GetMessageCustomResolver() bool {
	if x != nil {
		return x.MessageCustomResolver
	}
	return false
}

func (x *FieldRule) GetAliasIds() []string {
	if x != nil {
		return x.AliasIds
	}
	return nil
}

func (x *FieldRule) GetAutoBindField() *AutoBindField {
	if x != nil {
		return x.AutoBindField
	}
	return nil
}

func (x *FieldRule) GetOneofRule() *FieldOneofRule {
	if x != nil {
		return x.OneofRule
	}
	return nil
}

type AutoBindField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VariableDefinitionId string `protobuf:"bytes,1,opt,name=variable_definition_id,json=variableDefinitionId,proto3" json:"variable_definition_id,omitempty"`
	FieldId              string `protobuf:"bytes,2,opt,name=field_id,json=fieldId,proto3" json:"field_id,omitempty"`
}

func (x *AutoBindField) Reset() {
	*x = AutoBindField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoBindField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoBindField) ProtoMessage() {}

func (x *AutoBindField) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoBindField.ProtoReflect.Descriptor instead.
func (*AutoBindField) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{16}
}

func (x *AutoBindField) GetVariableDefinitionId() string {
	if x != nil {
		return x.VariableDefinitionId
	}
	return ""
}

func (x *AutoBindField) GetFieldId() string {
	if x != nil {
		return x.FieldId
	}
	return ""
}

type FieldOneofRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	If      *CELValue              `protobuf:"bytes,1,opt,name=if,proto3" json:"if,omitempty"`
	Default bool                   `protobuf:"varint,2,opt,name=default,proto3" json:"default,omitempty"`
	By      *CELValue              `protobuf:"bytes,3,opt,name=by,proto3" json:"by,omitempty"`
	DefSet  *VariableDefinitionSet `protobuf:"bytes,4,opt,name=def_set,json=defSet,proto3" json:"def_set,omitempty"`
}

func (x *FieldOneofRule) Reset() {
	*x = FieldOneofRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldOneofRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldOneofRule) ProtoMessage() {}

func (x *FieldOneofRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldOneofRule.ProtoReflect.Descriptor instead.
func (*FieldOneofRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{17}
}

func (x *FieldOneofRule) GetIf() *CELValue {
	if x != nil {
		return x.If
	}
	return nil
}

func (x *FieldOneofRule) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *FieldOneofRule) GetBy() *CELValue {
	if x != nil {
		return x.By
	}
	return nil
}

func (x *FieldOneofRule) GetDefSet() *VariableDefinitionSet {
	if x != nil {
		return x.DefSet
	}
	return nil
}

type VariableDefinitionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Group:
	//
	//	*VariableDefinitionGroup_Sequential
	//	*VariableDefinitionGroup_Concurrent
	Group isVariableDefinitionGroup_Group `protobuf_oneof:"group"`
}

func (x *VariableDefinitionGroup) Reset() {
	*x = VariableDefinitionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableDefinitionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableDefinitionGroup) ProtoMessage() {}

func (x *VariableDefinitionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableDefinitionGroup.ProtoReflect.Descriptor instead.
func (*VariableDefinitionGroup) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{18}
}

func (x *VariableDefinitionGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *VariableDefinitionGroup) GetGroup() isVariableDefinitionGroup_Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (x *VariableDefinitionGroup) GetSequential() *SequentialVariableDefinitionGroup {
	if x, ok := x.GetGroup().(*VariableDefinitionGroup_Sequential); ok {
		return x.Sequential
	}
	return nil
}

func (x *VariableDefinitionGroup) GetConcurrent() *ConcurrentVariableDefinitionGroup {
	if x, ok := x.GetGroup().(*VariableDefinitionGroup_Concurrent); ok {
		return x.Concurrent
	}
	return nil
}

type isVariableDefinitionGroup_Group interface {
	isVariableDefinitionGroup_Group()
}

type VariableDefinitionGroup_Sequential struct {
	Sequential *SequentialVariableDefinitionGroup `protobuf:"bytes,2,opt,name=sequential,proto3,oneof"`
}

type VariableDefinitionGroup_Concurrent struct {
	Concurrent *ConcurrentVariableDefinitionGroup `protobuf:"bytes,3,opt,name=concurrent,proto3,oneof"`
}

func (*VariableDefinitionGroup_Sequential) isVariableDefinitionGroup_Group() {}

func (*VariableDefinitionGroup_Concurrent) isVariableDefinitionGroup_Group() {}

type SequentialVariableDefinitionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *SequentialVariableDefinitionGroup) Reset() {
	*x = SequentialVariableDefinitionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequentialVariableDefinitionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequentialVariableDefinitionGroup) ProtoMessage() {}

func (x *SequentialVariableDefinitionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequentialVariableDefinitionGroup.ProtoReflect.Descriptor instead.
func (*SequentialVariableDefinitionGroup) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{19}
}

func (x *SequentialVariableDefinitionGroup) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *SequentialVariableDefinitionGroup) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type ConcurrentVariableDefinitionGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Starts []string `protobuf:"bytes,1,rep,name=starts,proto3" json:"starts,omitempty"`
	End    string   `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ConcurrentVariableDefinitionGroup) Reset() {
	*x = ConcurrentVariableDefinitionGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrentVariableDefinitionGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrentVariableDefinitionGroup) ProtoMessage() {}

func (x *ConcurrentVariableDefinitionGroup) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrentVariableDefinitionGroup.ProtoReflect.Descriptor instead.
func (*ConcurrentVariableDefinitionGroup) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{20}
}

func (x *ConcurrentVariableDefinitionGroup) GetStarts() []string {
	if x != nil {
		return x.Starts
	}
	return nil
}

func (x *ConcurrentVariableDefinitionGroup) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type MessageDependencyGraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Roots []*MessageDependencyGraphNode `protobuf:"bytes,2,rep,name=roots,proto3" json:"roots,omitempty"`
}

func (x *MessageDependencyGraph) Reset() {
	*x = MessageDependencyGraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDependencyGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDependencyGraph) ProtoMessage() {}

func (x *MessageDependencyGraph) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDependencyGraph.ProtoReflect.Descriptor instead.
func (*MessageDependencyGraph) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{21}
}

func (x *MessageDependencyGraph) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MessageDependencyGraph) GetRoots() []*MessageDependencyGraphNode {
	if x != nil {
		return x.Roots
	}
	return nil
}

type MessageDependencyGraphNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children             []*MessageDependencyGraphNode `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
	BaseMessageId        string                        `protobuf:"bytes,2,opt,name=base_message_id,json=baseMessageId,proto3" json:"base_message_id,omitempty"`
	VariableDefinitionId string                        `protobuf:"bytes,3,opt,name=variable_definition_id,json=variableDefinitionId,proto3" json:"variable_definition_id,omitempty"`
}

func (x *MessageDependencyGraphNode) Reset() {
	*x = MessageDependencyGraphNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDependencyGraphNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDependencyGraphNode) ProtoMessage() {}

func (x *MessageDependencyGraphNode) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDependencyGraphNode.ProtoReflect.Descriptor instead.
func (*MessageDependencyGraphNode) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{22}
}

func (x *MessageDependencyGraphNode) GetChildren() []*MessageDependencyGraphNode {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *MessageDependencyGraphNode) GetBaseMessageId() string {
	if x != nil {
		return x.BaseMessageId
	}
	return ""
}

func (x *MessageDependencyGraphNode) GetVariableDefinitionId() string {
	if x != nil {
		return x.VariableDefinitionId
	}
	return ""
}

type VariableExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are assignable to Expr:
	//
	//	*VariableExpr_By
	//	*VariableExpr_Map
	//	*VariableExpr_Call
	//	*VariableExpr_Message
	//	*VariableExpr_Validation
	Expr isVariableExpr_Expr `protobuf_oneof:"expr"`
}

func (x *VariableExpr) Reset() {
	*x = VariableExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableExpr) ProtoMessage() {}

func (x *VariableExpr) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableExpr.ProtoReflect.Descriptor instead.
func (*VariableExpr) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{23}
}

func (x *VariableExpr) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (m *VariableExpr) GetExpr() isVariableExpr_Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (x *VariableExpr) GetBy() *CELValue {
	if x, ok := x.GetExpr().(*VariableExpr_By); ok {
		return x.By
	}
	return nil
}

func (x *VariableExpr) GetMap() *MapExpr {
	if x, ok := x.GetExpr().(*VariableExpr_Map); ok {
		return x.Map
	}
	return nil
}

func (x *VariableExpr) GetCall() *CallExpr {
	if x, ok := x.GetExpr().(*VariableExpr_Call); ok {
		return x.Call
	}
	return nil
}

func (x *VariableExpr) GetMessage() *MessageExpr {
	if x, ok := x.GetExpr().(*VariableExpr_Message); ok {
		return x.Message
	}
	return nil
}

func (x *VariableExpr) GetValidation() *ValidationExpr {
	if x, ok := x.GetExpr().(*VariableExpr_Validation); ok {
		return x.Validation
	}
	return nil
}

type isVariableExpr_Expr interface {
	isVariableExpr_Expr()
}

type VariableExpr_By struct {
	By *CELValue `protobuf:"bytes,2,opt,name=by,proto3,oneof"`
}

type VariableExpr_Map struct {
	Map *MapExpr `protobuf:"bytes,3,opt,name=map,proto3,oneof"`
}

type VariableExpr_Call struct {
	Call *CallExpr `protobuf:"bytes,4,opt,name=call,proto3,oneof"`
}

type VariableExpr_Message struct {
	Message *MessageExpr `protobuf:"bytes,5,opt,name=message,proto3,oneof"`
}

type VariableExpr_Validation struct {
	Validation *ValidationExpr `protobuf:"bytes,6,opt,name=validation,proto3,oneof"`
}

func (*VariableExpr_By) isVariableExpr_Expr() {}

func (*VariableExpr_Map) isVariableExpr_Expr() {}

func (*VariableExpr_Call) isVariableExpr_Expr() {}

func (*VariableExpr_Message) isVariableExpr_Expr() {}

func (*VariableExpr_Validation) isVariableExpr_Expr() {}

type Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     TypeKind `protobuf:"varint,1,opt,name=kind,proto3,enum=grpc.federation.generator.plugin.TypeKind" json:"kind,omitempty"`
	Repeated bool     `protobuf:"varint,2,opt,name=repeated,proto3" json:"repeated,omitempty"`
	IsNull   bool     `protobuf:"varint,3,opt,name=is_null,json=isNull,proto3" json:"is_null,omitempty"`
	// Types that are assignable to Ref:
	//
	//	*Type_MessageId
	//	*Type_EnumId
	//	*Type_OneofFieldId
	Ref isType_Ref `protobuf_oneof:"ref"`
}

func (x *Type) Reset() {
	*x = Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type) ProtoMessage() {}

func (x *Type) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type.ProtoReflect.Descriptor instead.
func (*Type) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{24}
}

func (x *Type) GetKind() TypeKind {
	if x != nil {
		return x.Kind
	}
	return TypeKind_UNKNOWN_TYPE
}

func (x *Type) GetRepeated() bool {
	if x != nil {
		return x.Repeated
	}
	return false
}

func (x *Type) GetIsNull() bool {
	if x != nil {
		return x.IsNull
	}
	return false
}

func (m *Type) GetRef() isType_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (x *Type) GetMessageId() string {
	if x, ok := x.GetRef().(*Type_MessageId); ok {
		return x.MessageId
	}
	return ""
}

func (x *Type) GetEnumId() string {
	if x, ok := x.GetRef().(*Type_EnumId); ok {
		return x.EnumId
	}
	return ""
}

func (x *Type) GetOneofFieldId() string {
	if x, ok := x.GetRef().(*Type_OneofFieldId); ok {
		return x.OneofFieldId
	}
	return ""
}

type isType_Ref interface {
	isType_Ref()
}

type Type_MessageId struct {
	MessageId string `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3,oneof"`
}

type Type_EnumId struct {
	EnumId string `protobuf:"bytes,5,opt,name=enum_id,json=enumId,proto3,oneof"`
}

type Type_OneofFieldId struct {
	OneofFieldId string `protobuf:"bytes,6,opt,name=oneof_field_id,json=oneofFieldId,proto3,oneof"`
}

func (*Type_MessageId) isType_Ref() {}

func (*Type_EnumId) isType_Ref() {}

func (*Type_OneofFieldId) isType_Ref() {}

type CELValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr string `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	Out  *Type  `protobuf:"bytes,2,opt,name=out,proto3" json:"out,omitempty"`
}

func (x *CELValue) Reset() {
	*x = CELValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CELValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CELValue) ProtoMessage() {}

func (x *CELValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CELValue.ProtoReflect.Descriptor instead.
func (*CELValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{25}
}

func (x *CELValue) GetExpr() string {
	if x != nil {
		return x.Expr
	}
	return ""
}

func (x *CELValue) GetOut() *Type {
	if x != nil {
		return x.Out
	}
	return nil
}

type MapExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iterator *Iterator        `protobuf:"bytes,1,opt,name=iterator,proto3" json:"iterator,omitempty"`
	Expr     *MapIteratorExpr `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *MapExpr) Reset() {
	*x = MapExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapExpr) ProtoMessage() {}

func (x *MapExpr) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapExpr.ProtoReflect.Descriptor instead.
func (*MapExpr) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{26}
}

func (x *MapExpr) GetIterator() *Iterator {
	if x != nil {
		return x.Iterator
	}
	return nil
}

func (x *MapExpr) GetExpr() *MapIteratorExpr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Iterator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SourceId string `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
}

func (x *Iterator) Reset() {
	*x = Iterator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Iterator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Iterator) ProtoMessage() {}

func (x *Iterator) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Iterator.ProtoReflect.Descriptor instead.
func (*Iterator) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{27}
}

func (x *Iterator) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Iterator) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

type MapIteratorExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are assignable to Expr:
	//
	//	*MapIteratorExpr_By
	//	*MapIteratorExpr_Message
	Expr isMapIteratorExpr_Expr `protobuf_oneof:"expr"`
}

func (x *MapIteratorExpr) Reset() {
	*x = MapIteratorExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapIteratorExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapIteratorExpr) ProtoMessage() {}

func (x *MapIteratorExpr) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapIteratorExpr.ProtoReflect.Descriptor instead.
func (*MapIteratorExpr) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{28}
}

func (x *MapIteratorExpr) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (m *MapIteratorExpr) GetExpr() isMapIteratorExpr_Expr {
	if m != nil {
		return m.Expr
	}
	return nil
}

func (x *MapIteratorExpr) GetBy() *CELValue {
	if x, ok := x.GetExpr().(*MapIteratorExpr_By); ok {
		return x.By
	}
	return nil
}

func (x *MapIteratorExpr) GetMessage() *MessageExpr {
	if x, ok := x.GetExpr().(*MapIteratorExpr_Message); ok {
		return x.Message
	}
	return nil
}

type isMapIteratorExpr_Expr interface {
	isMapIteratorExpr_Expr()
}

type MapIteratorExpr_By struct {
	By *CELValue `protobuf:"bytes,2,opt,name=by,proto3,oneof"`
}

type MapIteratorExpr_Message struct {
	Message *MessageExpr `protobuf:"bytes,3,opt,name=message,proto3,oneof"`
}

func (*MapIteratorExpr_By) isMapIteratorExpr_Expr() {}

func (*MapIteratorExpr_Message) isMapIteratorExpr_Expr() {}

type CallExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MethodId string               `protobuf:"bytes,1,opt,name=method_id,json=methodId,proto3" json:"method_id,omitempty"`
	Request  *Request             `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Timeout  *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Retry    *RetryPolicy         `protobuf:"bytes,4,opt,name=retry,proto3" json:"retry,omitempty"`
	Errors   []*GRPCError         `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *CallExpr) Reset() {
	*x = CallExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallExpr) ProtoMessage() {}

func (x *CallExpr) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallExpr.ProtoReflect.Descriptor instead.
func (*CallExpr) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{29}
}

func (x *CallExpr) GetMethodId() string {
	if x != nil {
		return x.MethodId
	}
	return ""
}

func (x *CallExpr) GetRequest() *Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CallExpr) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *CallExpr) GetRetry() *RetryPolicy {
	if x != nil {
		return x.Retry
	}
	return nil
}

func (x *CallExpr) GetErrors() []*GRPCError {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RetryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Policy:
	//
	//	*RetryPolicy_Constant
	//	*RetryPolicy_Exponential
	Policy isRetryPolicy_Policy `protobuf_oneof:"policy"`
	If     *CELValue            `protobuf:"bytes,3,opt,name=if,proto3" json:"if,omitempty"`
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{30}
}

func (m *RetryPolicy) GetPolicy() isRetryPolicy_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *RetryPolicy) GetConstant() *RetryPolicyConstant {
	if x, ok := x.GetPolicy().(*RetryPolicy_Constant); ok {
		return x.Constant
	}
	return nil
}

func (x *RetryPolicy) GetExponential() *RetryPolicyExponential {
	if x, ok := x.GetPolicy().(*RetryPolicy_Exponential); ok {
		return x.Exponential
	}
	return nil
}

func (x *RetryPolicy) GetIf() *CELValue {
	if x != nil {
		return x.If
	}
	return nil
}

type isRetryPolicy_Policy interface {
	isRetryPolicy_Policy()
}

type RetryPolicy_Constant struct {
	Constant *RetryPolicyConstant `protobuf:"bytes,1,opt,name=constant,proto3,oneof"`
}

type RetryPolicy_Exponential struct {
	Exponential *RetryPolicyExponential `protobuf:"bytes,2,opt,name=exponential,proto3,oneof"`
}

func (*RetryPolicy_Constant) isRetryPolicy_Policy() {}

func (*RetryPolicy_Exponential) isRetryPolicy_Policy() {}

type RetryPolicyConstant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval   *durationpb.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
	MaxRetries uint64               `protobuf:"varint,2,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
}

func (x *RetryPolicyConstant) Reset() {
	*x = RetryPolicyConstant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicyConstant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicyConstant) ProtoMessage() {}

func (x *RetryPolicyConstant) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicyConstant.ProtoReflect.Descriptor instead.
func (*RetryPolicyConstant) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{31}
}

func (x *RetryPolicyConstant) GetInterval() *durationpb.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *RetryPolicyConstant) GetMaxRetries() uint64 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

type RetryPolicyExponential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitialInterval     *durationpb.Duration `protobuf:"bytes,1,opt,name=initial_interval,json=initialInterval,proto3" json:"initial_interval,omitempty"`
	RandomizationFactor float64              `protobuf:"fixed64,2,opt,name=randomization_factor,json=randomizationFactor,proto3" json:"randomization_factor,omitempty"`
	Multiplier          float64              `protobuf:"fixed64,3,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	MaxInterval         *durationpb.Duration `protobuf:"bytes,4,opt,name=max_interval,json=maxInterval,proto3" json:"max_interval,omitempty"`
	MaxRetries          uint64               `protobuf:"varint,5,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	MaxElapsedTime      *durationpb.Duration `protobuf:"bytes,6,opt,name=max_elapsed_time,json=maxElapsedTime,proto3" json:"max_elapsed_time,omitempty"`
}

func (x *RetryPolicyExponential) Reset() {
	*x = RetryPolicyExponential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryPolicyExponential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicyExponential) ProtoMessage() {}

func (x *RetryPolicyExponential) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicyExponential.ProtoReflect.Descriptor instead.
func (*RetryPolicyExponential) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{32}
}

func (x *RetryPolicyExponential) GetInitialInterval() *durationpb.Duration {
	if x != nil {
		return x.InitialInterval
	}
	return nil
}

func (x *RetryPolicyExponential) GetRandomizationFactor() float64 {
	if x != nil {
		return x.RandomizationFactor
	}
	return 0
}

func (x *RetryPolicyExponential) GetMultiplier() float64 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *RetryPolicyExponential) GetMaxInterval() *durationpb.Duration {
	if x != nil {
		return x.MaxInterval
	}
	return nil
}

func (x *RetryPolicyExponential) GetMaxRetries() uint64 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *RetryPolicyExponential) GetMaxElapsedTime() *durationpb.Duration {
	if x != nil {
		return x.MaxElapsedTime
	}
	return nil
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args   []*Argument `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	TypeId string      `protobuf:"bytes,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{33}
}

func (x *Request) GetArgs() []*Argument {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Request) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

type MessageExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId string      `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Args      []*Argument `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *MessageExpr) Reset() {
	*x = MessageExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageExpr) ProtoMessage() {}

func (x *MessageExpr) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageExpr.ProtoReflect.Descriptor instead.
func (*MessageExpr) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{34}
}

func (x *MessageExpr) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MessageExpr) GetArgs() []*Argument {
	if x != nil {
		return x.Args
	}
	return nil
}

type Argument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type  *Type     `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Value *Value    `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	If    *CELValue `protobuf:"bytes,4,opt,name=if,proto3" json:"if,omitempty"`
}

func (x *Argument) Reset() {
	*x = Argument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Argument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Argument) ProtoMessage() {}

func (x *Argument) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Argument.ProtoReflect.Descriptor instead.
func (*Argument) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{35}
}

func (x *Argument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Argument) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Argument) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Argument) GetIf() *CELValue {
	if x != nil {
		return x.If
	}
	return nil
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inline bool      `protobuf:"varint,1,opt,name=inline,proto3" json:"inline,omitempty"`
	Cel    *CELValue `protobuf:"bytes,2,opt,name=cel,proto3" json:"cel,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{36}
}

func (x *Value) GetInline() bool {
	if x != nil {
		return x.Inline
	}
	return false
}

func (x *Value) GetCel() *CELValue {
	if x != nil {
		return x.Cel
	}
	return nil
}

type ValidationExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Error *GRPCError `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ValidationExpr) Reset() {
	*x = ValidationExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationExpr) ProtoMessage() {}

func (x *ValidationExpr) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationExpr.ProtoReflect.Descriptor instead.
func (*ValidationExpr) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{37}
}

func (x *ValidationExpr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidationExpr) GetError() *GRPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

type GRPCError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefSet            *VariableDefinitionSet `protobuf:"bytes,1,opt,name=def_set,json=defSet,proto3" json:"def_set,omitempty"`
	If                *CELValue              `protobuf:"bytes,2,opt,name=if,proto3" json:"if,omitempty"`
	Code              code.Code              `protobuf:"varint,3,opt,name=code,proto3,enum=google.rpc.Code" json:"code,omitempty"`
	Message           *CELValue              `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Details           []*GRPCErrorDetail     `protobuf:"bytes,5,rep,name=details,proto3" json:"details,omitempty"`
	Ignore            bool                   `protobuf:"varint,6,opt,name=ignore,proto3" json:"ignore,omitempty"`
	IgnoreAndResponse *CELValue              `protobuf:"bytes,7,opt,name=ignore_and_response,json=ignoreAndResponse,proto3" json:"ignore_and_response,omitempty"`
}

func (x *GRPCError) Reset() {
	*x = GRPCError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GRPCError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GRPCError) ProtoMessage() {}

func (x *GRPCError) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GRPCError.ProtoReflect.Descriptor instead.
func (*GRPCError) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{38}
}

func (x *GRPCError) GetDefSet() *VariableDefinitionSet {
	if x != nil {
		return x.DefSet
	}
	return nil
}

func (x *GRPCError) GetIf() *CELValue {
	if x != nil {
		return x.If
	}
	return nil
}

func (x *GRPCError) GetCode() code.Code {
	if x != nil {
		return x.Code
	}
	return code.Code(0)
}

func (x *GRPCError) GetMessage() *CELValue {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GRPCError) GetDetails() []*GRPCErrorDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *GRPCError) GetIgnore() bool {
	if x != nil {
		return x.Ignore
	}
	return false
}

func (x *GRPCError) GetIgnoreAndResponse() *CELValue {
	if x != nil {
		return x.IgnoreAndResponse
	}
	return nil
}

type GRPCErrorDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefSet               *VariableDefinitionSet `protobuf:"bytes,1,opt,name=def_set,json=defSet,proto3" json:"def_set,omitempty"`
	If                   *CELValue              `protobuf:"bytes,2,opt,name=if,proto3" json:"if,omitempty"`
	Messages             *VariableDefinitionSet `protobuf:"bytes,3,opt,name=messages,proto3" json:"messages,omitempty"`
	PreconditionFailures []*PreconditionFailure `protobuf:"bytes,4,rep,name=precondition_failures,json=preconditionFailures,proto3" json:"precondition_failures,omitempty"`
	BadRequests          []*BadRequest          `protobuf:"bytes,5,rep,name=bad_requests,json=badRequests,proto3" json:"bad_requests,omitempty"`
	LocalizedMessages    []*LocalizedMessage    `protobuf:"bytes,6,rep,name=localized_messages,json=localizedMessages,proto3" json:"localized_messages,omitempty"`
	By                   []*CELValue            `protobuf:"bytes,7,rep,name=by,proto3" json:"by,omitempty"`
}

func (x *GRPCErrorDetail) Reset() {
	*x = GRPCErrorDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GRPCErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GRPCErrorDetail) ProtoMessage() {}

func (x *GRPCErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GRPCErrorDetail.ProtoReflect.Descriptor instead.
func (*GRPCErrorDetail) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{39}
}

func (x *GRPCErrorDetail) GetDefSet() *VariableDefinitionSet {
	if x != nil {
		return x.DefSet
	}
	return nil
}

func (x *GRPCErrorDetail) GetIf() *CELValue {
	if x != nil {
		return x.If
	}
	return nil
}

func (x *GRPCErrorDetail) GetMessages() *VariableDefinitionSet {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *GRPCErrorDetail) GetPreconditionFailures() []*PreconditionFailure {
	if x != nil {
		return x.PreconditionFailures
	}
	return nil
}

func (x *GRPCErrorDetail) GetBadRequests() []*BadRequest {
	if x != nil {
		return x.BadRequests
	}
	return nil
}

func (x *GRPCErrorDetail) GetLocalizedMessages() []*LocalizedMessage {
	if x != nil {
		return x.LocalizedMessages
	}
	return nil
}

func (x *GRPCErrorDetail) GetBy() []*CELValue {
	if x != nil {
		return x.By
	}
	return nil
}

type PreconditionFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Violations []*PreconditionFailureViolation `protobuf:"bytes,1,rep,name=violations,proto3" json:"violations,omitempty"`
}

func (x *PreconditionFailure) Reset() {
	*x = PreconditionFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreconditionFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreconditionFailure) ProtoMessage() {}

func (x *PreconditionFailure) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreconditionFailure.ProtoReflect.Descriptor instead.
func (*PreconditionFailure) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{40}
}

func (x *PreconditionFailure) GetViolations() []*PreconditionFailureViolation {
	if x != nil {
		return x.Violations
	}
	return nil
}

type PreconditionFailureViolation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        *CELValue `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Subject     *CELValue `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Description *CELValue `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *PreconditionFailureViolation) Reset() {
	*x = PreconditionFailureViolation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreconditionFailureViolation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreconditionFailureViolation) ProtoMessage() {}

func (x *PreconditionFailureViolation) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreconditionFailureViolation.ProtoReflect.Descriptor instead.
func (*PreconditionFailureViolation) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{41}
}

func (x *PreconditionFailureViolation) GetType() *CELValue {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *PreconditionFailureViolation) GetSubject() *CELValue {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *PreconditionFailureViolation) GetDescription() *CELValue {
	if x != nil {
		return x.Description
	}
	return nil
}

type BadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldViolations []*BadRequestFieldViolation `protobuf:"bytes,1,rep,name=field_violations,json=fieldViolations,proto3" json:"field_violations,omitempty"`
}

func (x *BadRequest) Reset() {
	*x = BadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadRequest) ProtoMessage() {}

func (x *BadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadRequest.ProtoReflect.Descriptor instead.
func (*BadRequest) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{42}
}

func (x *BadRequest) GetFieldViolations() []*BadRequestFieldViolation {
	if x != nil {
		return x.FieldViolations
	}
	return nil
}

type BadRequestFieldViolation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field       *CELValue `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Description *CELValue `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *BadRequestFieldViolation) Reset() {
	*x = BadRequestFieldViolation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BadRequestFieldViolation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadRequestFieldViolation) ProtoMessage() {}

func (x *BadRequestFieldViolation) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadRequestFieldViolation.ProtoReflect.Descriptor instead.
func (*BadRequestFieldViolation) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{43}
}

func (x *BadRequestFieldViolation) GetField() *CELValue {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *BadRequestFieldViolation) GetDescription() *CELValue {
	if x != nil {
		return x.Description
	}
	return nil
}

type LocalizedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locale  string    `protobuf:"bytes,1,opt,name=locale,proto3" json:"locale,omitempty"`
	Message *CELValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LocalizedMessage) Reset() {
	*x = LocalizedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalizedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalizedMessage) ProtoMessage() {}

func (x *LocalizedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalizedMessage.ProtoReflect.Descriptor instead.
func (*LocalizedMessage) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{44}
}

func (x *LocalizedMessage) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *LocalizedMessage) GetMessage() *CELValue {
	if x != nil {
		return x.Message
	}
	return nil
}

type Oneof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MessageId string   `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	FieldIds  []string `protobuf:"bytes,4,rep,name=field_ids,json=fieldIds,proto3" json:"field_ids,omitempty"`
}

func (x *Oneof) Reset() {
	*x = Oneof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oneof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oneof) ProtoMessage() {}

func (x *Oneof) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oneof.ProtoReflect.Descriptor instead.
func (*Oneof) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{45}
}

func (x *Oneof) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Oneof) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Oneof) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Oneof) GetFieldIds() []string {
	if x != nil {
		return x.FieldIds
	}
	return nil
}

type Enum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ValueIds  []string  `protobuf:"bytes,3,rep,name=value_ids,json=valueIds,proto3" json:"value_ids,omitempty"`
	MessageId string    `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	FileId    string    `protobuf:"bytes,5,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	Rule      *EnumRule `protobuf:"bytes,6,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *Enum) Reset() {
	*x = Enum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enum) ProtoMessage() {}

func (x *Enum) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enum.ProtoReflect.Descriptor instead.
func (*Enum) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{46}
}

func (x *Enum) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Enum) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Enum) GetValueIds() []string {
	if x != nil {
		return x.ValueIds
	}
	return nil
}

func (x *Enum) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *Enum) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *Enum) GetRule() *EnumRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type EnumValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value  string         `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	EnumId string         `protobuf:"bytes,3,opt,name=enum_id,json=enumId,proto3" json:"enum_id,omitempty"`
	Rule   *EnumValueRule `protobuf:"bytes,4,opt,name=rule,proto3" json:"rule,omitempty"`
}

func (x *EnumValue) Reset() {
	*x = EnumValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumValue) ProtoMessage() {}

func (x *EnumValue) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumValue.ProtoReflect.Descriptor instead.
func (*EnumValue) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{47}
}

func (x *EnumValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnumValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *EnumValue) GetEnumId() string {
	if x != nil {
		return x.EnumId
	}
	return ""
}

func (x *EnumValue) GetRule() *EnumValueRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type EnumRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AliasIds []string `protobuf:"bytes,1,rep,name=alias_ids,json=aliasIds,proto3" json:"alias_ids,omitempty"`
}

func (x *EnumRule) Reset() {
	*x = EnumRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumRule) ProtoMessage() {}

func (x *EnumRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumRule.ProtoReflect.Descriptor instead.
func (*EnumRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{48}
}

func (x *EnumRule) GetAliasIds() []string {
	if x != nil {
		return x.AliasIds
	}
	return nil
}

type EnumValueRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Default bool              `protobuf:"varint,1,opt,name=default,proto3" json:"default,omitempty"`
	Aliases []*EnumValueAlias `protobuf:"bytes,2,rep,name=aliases,proto3" json:"aliases,omitempty"`
}

func (x *EnumValueRule) Reset() {
	*x = EnumValueRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumValueRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumValueRule) ProtoMessage() {}

func (x *EnumValueRule) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumValueRule.ProtoReflect.Descriptor instead.
func (*EnumValueRule) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{49}
}

func (x *EnumValueRule) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *EnumValueRule) GetAliases() []*EnumValueAlias {
	if x != nil {
		return x.Aliases
	}
	return nil
}

type EnumValueAlias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnumAliasId string   `protobuf:"bytes,1,opt,name=enum_alias_id,json=enumAliasId,proto3" json:"enum_alias_id,omitempty"`
	AliasIds    []string `protobuf:"bytes,2,rep,name=alias_ids,json=aliasIds,proto3" json:"alias_ids,omitempty"`
}

func (x *EnumValueAlias) Reset() {
	*x = EnumValueAlias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumValueAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumValueAlias) ProtoMessage() {}

func (x *EnumValueAlias) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumValueAlias.ProtoReflect.Descriptor instead.
func (*EnumValueAlias) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{50}
}

func (x *EnumValueAlias) GetEnumAliasId() string {
	if x != nil {
		return x.EnumAliasId
	}
	return ""
}

func (x *EnumValueAlias) GetAliasIds() []string {
	if x != nil {
		return x.AliasIds
	}
	return nil
}

type CELPlugin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Functions   []*CELFunction `protobuf:"bytes,4,rep,name=functions,proto3" json:"functions,omitempty"`
}

func (x *CELPlugin) Reset() {
	*x = CELPlugin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CELPlugin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CELPlugin) ProtoMessage() {}

func (x *CELPlugin) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CELPlugin.ProtoReflect.Descriptor instead.
func (*CELPlugin) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{51}
}

func (x *CELPlugin) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CELPlugin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CELPlugin) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CELPlugin) GetFunctions() []*CELFunction {
	if x != nil {
		return x.Functions
	}
	return nil
}

type CELFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id         string  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Args       []*Type `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	Return     *Type   `protobuf:"bytes,4,opt,name=return,proto3" json:"return,omitempty"`
	ReceiverId string  `protobuf:"bytes,5,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
}

func (x *CELFunction) Reset() {
	*x = CELFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CELFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CELFunction) ProtoMessage() {}

func (x *CELFunction) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CELFunction.ProtoReflect.Descriptor instead.
func (*CELFunction) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{52}
}

func (x *CELFunction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CELFunction) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CELFunction) GetArgs() []*Type {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CELFunction) GetReturn() *Type {
	if x != nil {
		return x.Return
	}
	return nil
}

func (x *CELFunction) GetReceiverId() string {
	if x != nil {
		return x.ReceiverId
	}
	return ""
}

type ProtoCodeGeneratorResponse_GeneratedCodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Annotation []*ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation `protobuf:"bytes,1,rep,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *ProtoCodeGeneratorResponse_GeneratedCodeInfo) Reset() {
	*x = ProtoCodeGeneratorResponse_GeneratedCodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoCodeGeneratorResponse_GeneratedCodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCodeGeneratorResponse_GeneratedCodeInfo) ProtoMessage() {}

func (x *ProtoCodeGeneratorResponse_GeneratedCodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCodeGeneratorResponse_GeneratedCodeInfo.ProtoReflect.Descriptor instead.
func (*ProtoCodeGeneratorResponse_GeneratedCodeInfo) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ProtoCodeGeneratorResponse_GeneratedCodeInfo) GetAnnotation() []*ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation {
	if x != nil {
		return x.Annotation
	}
	return nil
}

type ProtoCodeGeneratorResponse_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              *string                                       `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	InsertionPoint    *string                                       `protobuf:"bytes,2,opt,name=insertion_point,json=insertionPoint,proto3,oneof" json:"insertion_point,omitempty"`
	Content           *string                                       `protobuf:"bytes,15,opt,name=content,proto3,oneof" json:"content,omitempty"`
	GeneratedCodeInfo *ProtoCodeGeneratorResponse_GeneratedCodeInfo `protobuf:"bytes,16,opt,name=generated_code_info,json=generatedCodeInfo,proto3,oneof" json:"generated_code_info,omitempty"`
}

func (x *ProtoCodeGeneratorResponse_File) Reset() {
	*x = ProtoCodeGeneratorResponse_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoCodeGeneratorResponse_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCodeGeneratorResponse_File) ProtoMessage() {}

func (x *ProtoCodeGeneratorResponse_File) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCodeGeneratorResponse_File.ProtoReflect.Descriptor instead.
func (*ProtoCodeGeneratorResponse_File) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ProtoCodeGeneratorResponse_File) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProtoCodeGeneratorResponse_File) GetInsertionPoint() string {
	if x != nil && x.InsertionPoint != nil {
		return *x.InsertionPoint
	}
	return ""
}

func (x *ProtoCodeGeneratorResponse_File) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *ProtoCodeGeneratorResponse_File) GetGeneratedCodeInfo() *ProtoCodeGeneratorResponse_GeneratedCodeInfo {
	if x != nil {
		return x.GeneratedCodeInfo
	}
	return nil
}

type ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       []int32                                                           `protobuf:"varint,1,rep,packed,name=path,proto3" json:"path,omitempty"`
	SourceFile *string                                                           `protobuf:"bytes,2,opt,name=source_file,json=sourceFile,proto3,oneof" json:"source_file,omitempty"`
	Begin      *int32                                                            `protobuf:"varint,3,opt,name=begin,proto3,oneof" json:"begin,omitempty"`
	End        *int32                                                            `protobuf:"varint,4,opt,name=end,proto3,oneof" json:"end,omitempty"`
	Semantic   *ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic `protobuf:"varint,5,opt,name=semantic,proto3,enum=grpc.federation.generator.plugin.ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic,oneof" json:"semantic,omitempty"`
}

func (x *ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation) Reset() {
	*x = ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_federation_generator_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation) ProtoMessage() {}

func (x *ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_federation_generator_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation.ProtoReflect.Descriptor instead.
func (*ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation) Descriptor() ([]byte, []int) {
	return file_grpc_federation_generator_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation) GetPath() []int32 {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation) GetSourceFile() string {
	if x != nil && x.SourceFile != nil {
		return *x.SourceFile
	}
	return ""
}

func (x *ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation) GetBegin() int32 {
	if x != nil && x.Begin != nil {
		return *x.Begin
	}
	return 0
}

func (x *ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation) GetEnd() int32 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

func (x *ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation) GetSemantic() ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic {
	if x != nil && x.Semantic != nil {
		return *x.Semantic
	}
	return ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_NONE
}

var File_grpc_federation_generator_proto protoreflect.FileDescriptor

var file_grpc_federation_generator_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x20, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x09, 0x0a, 0x1a, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x01, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x45, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0xec, 0x03, 0x0a, 0x11,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x79, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xdb, 0x02, 0x0a,
	0x0a, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x08,
	0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x62,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74,
	0x69, 0x63, 0x48, 0x03, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x88, 0x01,
	0x01, 0x22, 0x28, 0x0a, 0x08, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x54, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x02, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x6e, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x1a, 0xb3, 0x02, 0x0a, 0x04, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f,
	0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x13, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x43, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x03, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0x57, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a,
	0x17, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x33, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x45,
	0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xed, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07,
	0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x44, 0x69, 0x72, 0x12, 0x57, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x37,
	0x0a, 0x18, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x15, 0x67, 0x72, 0x70, 0x63, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0xdd, 0x13, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x53, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x5c, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x61, 0x70, 0x12, 0x59, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x5c,
	0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x56, 0x0a, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x70, 0x12, 0x53, 0x0a, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x65, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x63, 0x0a, 0x0e, 0x65, 0x6e, 0x75,
	0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x56,
	0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x63, 0x0a, 0x0e, 0x63, 0x65, 0x6c, 0x5f, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x65, 0x6c, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63,
	0x65, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x56, 0x0a, 0x09, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x4d, 0x61, 0x70, 0x12, 0x7e, 0x0a, 0x17, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x70, 0x12, 0x8e, 0x01, 0x0a, 0x1d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4d, 0x61, 0x70, 0x1a, 0x62, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x68, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x66, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x68, 0x0a, 0x0f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x0c, 0x45, 0x6e,
	0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6c,
	0x0a, 0x11, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x0d,
	0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x6c, 0x0a, 0x11, 0x43, 0x65, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x75, 0x0a, 0x0d, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7e, 0x0a, 0x1a, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x88, 0x01, 0x0a, 0x1f, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xe6, 0x02, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x07, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x4a, 0x0a, 0x0a, 0x67, 0x6f, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x47, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x09, 0x67, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x75, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x63, 0x65, 0x6c, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x65, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x49, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x38, 0x0a, 0x07, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x73, 0x22, 0x5f, 0x0a, 0x09, 0x47, 0x6f, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x72, 0x67, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x65, 0x6c, 0x5f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x65, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x41, 0x0a,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x22, 0x0d, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x22,
	0xcd, 0x01, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22,
	0x62, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x33, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x64, 0x22, 0xda, 0x02, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x75, 0x6d,
	0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x49, 0x64, 0x73, 0x12, 0x41, 0x0a,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x22, 0xd5, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x49, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x52, 0x06, 0x64, 0x65, 0x66, 0x53, 0x65, 0x74, 0x22, 0xc2, 0x01, 0x0a, 0x15, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x15, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x1a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x64, 0x22, 0xff, 0x01,
	0x0a, 0x12, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a,
	0x0a, 0x02, 0x69, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x45,
	0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x66, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x6f, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75, 0x73, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22,
	0xe2, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x22, 0xf2, 0x02, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x64, 0x73, 0x12,
	0x57, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x42, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x42,
	0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x4f, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x60, 0x0a, 0x0d, 0x41, 0x75, 0x74,
	0x6f, 0x42, 0x69, 0x6e, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x0e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3a,
	0x0a, 0x02, 0x69, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x45,
	0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x62, 0x79,
	0x12, 0x50, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x06, 0x64, 0x65, 0x66, 0x53,
	0x65, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x17, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x65,
	0x0a, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x65, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x4b, 0x0a, 0x21, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x22, 0x4d, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e,
	0x64, 0x22, 0x7c, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x52, 0x0a, 0x05, 0x72,
	0x6f, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x22,
	0xd4, 0x01, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x58,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb0, 0x03, 0x0a, 0x0c, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x02, 0x62,
	0x79, 0x12, 0x3d, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70,
	0x12, 0x40, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x04, 0x63, 0x61,
	0x6c, 0x6c, 0x12, 0x49, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x52, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x06, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0xe6, 0x01, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x1f, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x65, 0x6e, 0x75,
	0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x72,
	0x65, 0x66, 0x22, 0x58, 0x0a, 0x08, 0x43, 0x45, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x12, 0x38, 0x0a, 0x03, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x6f, 0x75, 0x74, 0x22, 0x98, 0x01, 0x0a,
	0x07, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x70, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x49, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x45, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x3b, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x49, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x02,
	0x62, 0x79, 0x12, 0x49, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0xab, 0x02, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x12,
	0x43, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x43,
	0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x47, 0x52, 0x50, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0x86, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x53, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x78, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x69, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x6d, 0x0a, 0x13,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xd5, 0x02, 0x0a, 0x16,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x14,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x43,
	0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x08, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3a, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x43, 0x45, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x66, 0x22, 0x5d, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3c,
	0x0a, 0x03, 0x63, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43,
	0x45, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x63, 0x65, 0x6c, 0x22, 0x67, 0x0a, 0x0e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x47, 0x52, 0x50, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xc6, 0x03, 0x0a, 0x09, 0x47, 0x52, 0x50, 0x43, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x06, 0x64,
	0x65, 0x66, 0x53, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69,
	0x66, 0x12, 0x24, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x47, 0x52, 0x50, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd0,
	0x04, 0x0a, 0x0f, 0x47, 0x52, 0x50, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x50, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x06, 0x64, 0x65,
	0x66, 0x53, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x66,
	0x12, 0x53, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x14, 0x70, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x42, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x62, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x61, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x02, 0x62, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x62,
	0x79, 0x22, 0x75, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x5e, 0x0a, 0x0a, 0x76, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf2, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x45,
	0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x4c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a,
	0x0a, 0x42, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x10, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x42, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x18, 0x42, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x4c, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x70, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x43, 0x45, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x67, 0x0a, 0x05, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x04, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x04,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x8f, 0x01, 0x0a,
	0x09, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x6e, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x04, 0x72, 0x75, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x27,
	0x0a, 0x08, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x49, 0x64, 0x73, 0x22, 0x75, 0x0a, 0x0d, 0x45, 0x6e, 0x75, 0x6d, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x22, 0x51,
	0x0a, 0x0e, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x75, 0x6d, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x64,
	0x73, 0x22, 0x9e, 0x01, 0x0a, 0x09, 0x43, 0x45, 0x4c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x45, 0x4c, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x0b, 0x43, 0x45, 0x4c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x49, 0x64, 0x2a, 0x6b, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x45, 0x45, 0x50, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x2a, 0xcc, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x10, 0x0a,
	0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x05, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x58, 0x45, 0x44, 0x36, 0x34, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x58, 0x45, 0x44, 0x33, 0x32, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x59, 0x54, 0x45, 0x53,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x49, 0x4e, 0x54, 0x33,
	0x32, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4e, 0x55, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x46, 0x49, 0x58, 0x45,
	0x44, 0x33, 0x32, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0f, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x46,
	0x49, 0x58, 0x45, 0x44, 0x36, 0x34, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x10, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x11, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x12, 0x42,
	0x4c, 0x5a, 0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65,
	0x72, 0x63, 0x61, 0x72, 0x69, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x3b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_federation_generator_proto_rawDescOnce sync.Once
	file_grpc_federation_generator_proto_rawDescData = file_grpc_federation_generator_proto_rawDesc
)

func file_grpc_federation_generator_proto_rawDescGZIP() []byte {
	file_grpc_federation_generator_proto_rawDescOnce.Do(func() {
		file_grpc_federation_generator_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_federation_generator_proto_rawDescData)
	})
	return file_grpc_federation_generator_proto_rawDescData
}

var file_grpc_federation_generator_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_grpc_federation_generator_proto_msgTypes = make([]protoimpl.MessageInfo, 68)
var file_grpc_federation_generator_proto_goTypes = []interface{}{
	(ActionType)(0),                         // 0: grpc.federation.generator.plugin.ActionType
	(TypeKind)(0),                           // 1: grpc.federation.generator.plugin.TypeKind
	(ProtoCodeGeneratorResponse_Feature)(0), // 2: grpc.federation.generator.plugin.ProtoCodeGeneratorResponse.Feature
	(ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation_Semantic)(0), // 3: grpc.federation.generator.plugin.ProtoCodeGeneratorResponse.GeneratedCodeInfo.Annotation.Semantic
	(*ProtoCodeGeneratorResponse)(nil),                                    // 4: grpc.federation.generator.plugin.ProtoCodeGeneratorResponse
	(*CodeGeneratorRequest)(nil),                                          // 5: grpc.federation.generator.plugin.CodeGeneratorRequest
	(*Reference)(nil),                                                     // 6: grpc.federation.generator.plugin.Reference
	(*File)(nil),                                                          // 7: grpc.federation.generator.plugin.File
	(*Package)(nil),                                                       // 8: grpc.federation.generator.plugin.Package
	(*GoPackage)(nil),                                                     // 9: grpc.federation.generator.plugin.GoPackage
	(*Service)(nil),                                                       // 10: grpc.federation.generator.plugin.Service
	(*ServiceRule)(nil),                                                   // 11: grpc.federation.generator.plugin.ServiceRule
	(*Method)(nil),                                                        // 12: grpc.federation.generator.plugin.Method
	(*MethodRule)(nil),                                                    // 13: grpc.federation.generator.plugin.MethodRule
	(*Message)(nil),                                                       // 14: grpc.federation.generator.plugin.Message
	(*MessageRule)(nil),                                                   // 15: grpc.federation.generator.plugin.MessageRule
	(*VariableDefinitionSet)(nil),                                         // 16: grpc.federation.generator.plugin.VariableDefinitionSet
	(*VariableDefinition)(nil),                                            // 17: grpc.federation.generator.plugin.VariableDefinition
	(*Field)(nil),                                                         // 18: grpc.federation.generator.plugin.Field
	(*FieldRule)(nil),                                                     // 19: grpc.federation.generator.plugin.FieldRule
	(*AutoBindField)(nil),                                                 // 20: grpc.federation.generator.plugin.AutoBindField
	(*FieldOneofRule)(nil),                                                // 21: grpc.federation.generator.plugin.FieldOneofRule
	(*VariableDefinitionGroup)(nil),                                       // 22: grpc.federation.generator.plugin.VariableDefinitionGroup
	(*SequentialVariableDefinitionGroup)(nil),                             // 23: grpc.federation.generator.plugin.SequentialVariableDefinitionGroup
	(*ConcurrentVariableDefinitionGroup)(nil),                             // 24: grpc.federation.generator.plugin.ConcurrentVariableDefinitionGroup
	(*MessageDependencyGraph)(nil),                                        // 25: grpc.federation.generator.plugin.MessageDependencyGraph
	(*MessageDependencyGraphNode)(nil),                                    // 26: grpc.federation.generator.plugin.MessageDependencyGraphNode
	(*VariableExpr)(nil),                                                  // 27: grpc.federation.generator.plugin.VariableExpr
	(*Type)(nil),                                                          // 28: grpc.federation.generator.plugin.Type
	(*CELValue)(nil),                                                      // 29: grpc.federation.generator.plugin.CELValue
	(*MapExpr)(nil),                                                       // 30: grpc.federation.generator.plugin.MapExpr
	(*Iterator)(nil),                                                      // 31: grpc.federation.generator.plugin.Iterator
	(*MapIteratorExpr)(nil),                                               // 32: grpc.federation.generator.plugin.MapIteratorExpr
	(*CallExpr)(nil),                                                      // 33: grpc.federation.generator.plugin.CallExpr
	(*RetryPolicy)(nil),                                                   // 34: grpc.federation.generator.plugin.RetryPolicy
	(*RetryPolicyConstant)(nil),                                           // 35: grpc.federation.generator.plugin.RetryPolicyConstant
	(*RetryPolicyExponential)(nil),                                        // 36: grpc.federation.generator.plugin.RetryPolicyExponential
	(*Request)(nil),                                                       // 37: grpc.federation.generator.plugin.Request
	(*MessageExpr)(nil),                                                   // 38: grpc.federation.generator.plugin.MessageExpr
	(*Argument)(nil),                                                      // 39: grpc.federation.generator.plugin.Argument
	(*Value)(nil),                                                         // 40: grpc.federation.generator.plugin.Value
	(*ValidationExpr)(nil),                                                // 41: grpc.federation.generator.plugin.ValidationExpr
	(*GRPCError)(nil),                                                     // 42: grpc.federation.generator.plugin.GRPCError
	(*GRPCErrorDetail)(nil),                                               // 43: grpc.federation.generator.plugin.GRPCErrorDetail
	(*PreconditionFailure)(nil),                                           // 44: grpc.federation.generator.plugin.PreconditionFailure
	(*PreconditionFailureViolation)(nil),                                  // 45: grpc.federation.generator.plugin.PreconditionFailureViolation
	(*BadRequest)(nil),                                                    // 46: grpc.federation.generator.plugin.BadRequest
	(*BadRequestFieldViolation)(nil),                                      // 47: grpc.federation.generator.plugin.BadRequestFieldViolation
	(*LocalizedMessage)(nil),                                              // 48: grpc.federation.generator.plugin.LocalizedMessage
	(*Oneof)(nil),                                                         // 49: grpc.federation.generator.plugin.Oneof
	(*Enum)(nil),                                                          // 50: grpc.federation.generator.plugin.Enum
	(*EnumValue)(nil),                                                     // 51: grpc.federation.generator.plugin.EnumValue
	(*EnumRule)(nil),                                                      // 52: grpc.federation.generator.plugin.EnumRule
	(*EnumValueRule)(nil),                                                 // 53: grpc.federation.generator.plugin.EnumValueRule
	(*EnumValueAlias)(nil),                                                // 54: grpc.federation.generator.plugin.EnumValueAlias
	(*CELPlugin)(nil),                                                     // 55: grpc.federation.generator.plugin.CELPlugin
	(*CELFunction)(nil),                                                   // 56: grpc.federation.generator.plugin.CELFunction
	(*ProtoCodeGeneratorResponse_GeneratedCodeInfo)(nil),            // 57: grpc.federation.generator.plugin.ProtoCodeGeneratorResponse.GeneratedCodeInfo
	(*ProtoCodeGeneratorResponse_File)(nil),                         // 58: grpc.federation.generator.plugin.ProtoCodeGeneratorResponse.File
	(*ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation)(nil), // 59: grpc.federation.generator.plugin.ProtoCodeGeneratorResponse.GeneratedCodeInfo.Annotation
	nil,                         // 60: grpc.federation.generator.plugin.Reference.FileMapEntry
	nil,                         // 61: grpc.federation.generator.plugin.Reference.ServiceMapEntry
	nil,                         // 62: grpc.federation.generator.plugin.Reference.MethodMapEntry
	nil,                         // 63: grpc.federation.generator.plugin.Reference.MessageMapEntry
	nil,                         // 64: grpc.federation.generator.plugin.Reference.FieldMapEntry
	nil,                         // 65: grpc.federation.generator.plugin.Reference.EnumMapEntry
	nil,                         // 66: grpc.federation.generator.plugin.Reference.EnumValueMapEntry
	nil,                         // 67: grpc.federation.generator.plugin.Reference.OneofMapEntry
	nil,                         // 68: grpc.federation.generator.plugin.Reference.CelPluginMapEntry
	nil,                         // 69: grpc.federation.generator.plugin.Reference.GraphMapEntry
	nil,                         // 70: grpc.federation.generator.plugin.Reference.VariableDefinitionMapEntry
	nil,                         // 71: grpc.federation.generator.plugin.Reference.VariableDefinitionGroupMapEntry
	(*durationpb.Duration)(nil), // 72: google.protobuf.Duration
	(code.Code)(0),              // 73: google.rpc.Code
}
var file_grpc_federation_generator_proto_depIdxs = []int32{
	58,  // 0: grpc.federation.generator.plugin.ProtoCodeGeneratorResponse.file:type_name -> grpc.federation.generator.plugin.ProtoCodeGeneratorResponse.File
	0,   // 1: grpc.federation.generator.plugin.CodeGeneratorRequest.type:type_name -> grpc.federation.generator.plugin.ActionType
	58,  // 2: grpc.federation.generator.plugin.CodeGeneratorRequest.files:type_name -> grpc.federation.generator.plugin.ProtoCodeGeneratorResponse.File
	6,   // 3: grpc.federation.generator.plugin.CodeGeneratorRequest.reference:type_name -> grpc.federation.generator.plugin.Reference
	60,  // 4: grpc.federation.generator.plugin.Reference.file_map:type_name -> grpc.federation.generator.plugin.Reference.FileMapEntry
	61,  // 5: grpc.federation.generator.plugin.Reference.service_map:type_name -> grpc.federation.generator.plugin.Reference.ServiceMapEntry
	62,  // 6: grpc.federation.generator.plugin.Reference.method_map:type_name -> grpc.federation.generator.plugin.Reference.MethodMapEntry
	63,  // 7: grpc.federation.generator.plugin.Reference.message_map:type_name -> grpc.federation.generator.plugin.Reference.MessageMapEntry
	64,  // 8: grpc.federation.generator.plugin.Reference.field_map:type_name -> grpc.federation.generator.plugin.Reference.FieldMapEntry
	65,  // 9: grpc.federation.generator.plugin.Reference.enum_map:type_name -> grpc.federation.generator.plugin.Reference.EnumMapEntry
	66,  // 10: grpc.federation.generator.plugin.Reference.enum_value_map:type_name -> grpc.federation.generator.plugin.Reference.EnumValueMapEntry
	67,  // 11: grpc.federation.generator.plugin.Reference.oneof_map:type_name -> grpc.federation.generator.plugin.Reference.OneofMapEntry
	68,  // 12: grpc.federation.generator.plugin.Reference.cel_plugin_map:type_name -> grpc.federation.generator.plugin.Reference.CelPluginMapEntry
	69,  // 13: grpc.federation.generator.plugin.Reference.graph_map:type_name -> grpc.federation.generator.plugin.Reference.GraphMapEntry
	70,  // 14: grpc.federation.generator.plugin.Reference.variable_definition_map:type_name -> grpc.federation.generator.plugin.Reference.VariableDefinitionMapEntry
	71,  // 15: grpc.federation.generator.plugin.Reference.variable_definition_group_map:type_name -> grpc.federation.generator.plugin.Reference.VariableDefinitionGroupMapEntry
	8,   // 16: grpc.federation.generator.plugin.File.package:type_name -> grpc.federation.generator.plugin.Package
	9,   // 17: grpc.federation.generator.plugin.File.go_package:type_name -> grpc.federation.generator.plugin.GoPackage
	11,  // 18: grpc.federation.generator.plugin.Service.rule:type_name -> grpc.federation.generator.plugin.ServiceRule
	13,  // 19: grpc.federation.generator.plugin.Method.rule:type_name -> grpc.federation.generator.plugin.MethodRule
	72,  // 20: grpc.federation.generator.plugin.MethodRule.timeout:type_name -> google.protobuf.Duration
	15,  // 21: grpc.federation.generator.plugin.Message.rule:type_name -> grpc.federation.generator.plugin.MessageRule
	16,  // 22: grpc.federation.generator.plugin.MessageRule.def_set:type_name -> grpc.federation.generator.plugin.VariableDefinitionSet
	29,  // 23: grpc.federation.generator.plugin.VariableDefinition.if:type_name -> grpc.federation.generator.plugin.CELValue
	27,  // 24: grpc.federation.generator.plugin.VariableDefinition.expr:type_name -> grpc.federation.generator.plugin.VariableExpr
	28,  // 25: grpc.federation.generator.plugin.Field.type:type_name -> grpc.federation.generator.plugin.Type
	19,  // 26: grpc.federation.generator.plugin.Field.rule:type_name -> grpc.federation.generator.plugin.FieldRule
	40,  // 27: grpc.federation.generator.plugin.FieldRule.value:type_name -> grpc.federation.generator.plugin.Value
	20,  // 28: grpc.federation.generator.plugin.FieldRule.auto_bind_field:type_name -> grpc.federation.generator.plugin.AutoBindField
	21,  // 29: grpc.federation.generator.plugin.FieldRule.oneof_rule:type_name -> grpc.federation.generator.plugin.FieldOneofRule
	29,  // 30: grpc.federation.generator.plugin.FieldOneofRule.if:type_name -> grpc.federation.generator.plugin.CELValue
	29,  // 31: grpc.federation.generator.plugin.FieldOneofRule.by:type_name -> grpc.federation.generator.plugin.CELValue
	16,  // 32: grpc.federation.generator.plugin.FieldOneofRule.def_set:type_name -> grpc.federation.generator.plugin.VariableDefinitionSet
	23,  // 33: grpc.federation.generator.plugin.VariableDefinitionGroup.sequential:type_name -> grpc.federation.generator.plugin.SequentialVariableDefinitionGroup
	24,  // 34: grpc.federation.generator.plugin.VariableDefinitionGroup.concurrent:type_name -> grpc.federation.generator.plugin.ConcurrentVariableDefinitionGroup
	26,  // 35: grpc.federation.generator.plugin.MessageDependencyGraph.roots:type_name -> grpc.federation.generator.plugin.MessageDependencyGraphNode
	26,  // 36: grpc.federation.generator.plugin.MessageDependencyGraphNode.children:type_name -> grpc.federation.generator.plugin.MessageDependencyGraphNode
	28,  // 37: grpc.federation.generator.plugin.VariableExpr.type:type_name -> grpc.federation.generator.plugin.Type
	29,  // 38: grpc.federation.generator.plugin.VariableExpr.by:type_name -> grpc.federation.generator.plugin.CELValue
	30,  // 39: grpc.federation.generator.plugin.VariableExpr.map:type_name -> grpc.federation.generator.plugin.MapExpr
	33,  // 40: grpc.federation.generator.plugin.VariableExpr.call:type_name -> grpc.federation.generator.plugin.CallExpr
	38,  // 41: grpc.federation.generator.plugin.VariableExpr.message:type_name -> grpc.federation.generator.plugin.MessageExpr
	41,  // 42: grpc.federation.generator.plugin.VariableExpr.validation:type_name -> grpc.federation.generator.plugin.ValidationExpr
	1,   // 43: grpc.federation.generator.plugin.Type.kind:type_name -> grpc.federation.generator.plugin.TypeKind
	28,  // 44: grpc.federation.generator.plugin.CELValue.out:type_name -> grpc.federation.generator.plugin.Type
	31,  // 45: grpc.federation.generator.plugin.MapExpr.iterator:type_name -> grpc.federation.generator.plugin.Iterator
	32,  // 46: grpc.federation.generator.plugin.MapExpr.expr:type_name -> grpc.federation.generator.plugin.MapIteratorExpr
	28,  // 47: grpc.federation.generator.plugin.MapIteratorExpr.type:type_name -> grpc.federation.generator.plugin.Type
	29,  // 48: grpc.federation.generator.plugin.MapIteratorExpr.by:type_name -> grpc.federation.generator.plugin.CELValue
	38,  // 49: grpc.federation.generator.plugin.MapIteratorExpr.message:type_name -> grpc.federation.generator.plugin.MessageExpr
	37,  // 50: grpc.federation.generator.plugin.CallExpr.request:type_name -> grpc.federation.generator.plugin.Request
	72,  // 51: grpc.federation.generator.plugin.CallExpr.timeout:type_name -> google.protobuf.Duration
	34,  // 52: grpc.federation.generator.plugin.CallExpr.retry:type_name -> grpc.federation.generator.plugin.RetryPolicy
	42,  // 53: grpc.federation.generator.plugin.CallExpr.errors:type_name -> grpc.federation.generator.plugin.GRPCError
	35,  // 54: grpc.federation.generator.plugin.RetryPolicy.constant:type_name -> grpc.federation.generator.plugin.RetryPolicyConstant
	36,  // 55: grpc.federation.generator.plugin.RetryPolicy.exponential:type_name -> grpc.federation.generator.plugin.RetryPolicyExponential
	29,  // 56: grpc.federation.generator.plugin.RetryPolicy.if:type_name -> grpc.federation.generator.plugin.CELValue
	72,  // 57: grpc.federation.generator.plugin.RetryPolicyConstant.interval:type_name -> google.protobuf.Duration
	72,  // 58: grpc.federation.generator.plugin.RetryPolicyExponential.initial_interval:type_name -> google.protobuf.Duration
	72,  // 59: grpc.federation.generator.plugin.RetryPolicyExponential.max_interval:type_name -> google.protobuf.Duration
	72,  // 60: grpc.federation.generator.plugin.RetryPolicyExponential.max_elapsed_time:type_name -> google.protobuf.Duration
	39,  // 61: grpc.federation.generator.plugin.Request.args:type_name -> grpc.federation.generator.plugin.Argument
	39,  // 62: grpc.federation.generator.plugin.MessageExpr.args:type_name -> grpc.federation.generator.plugin.Argument
	28,  // 63: grpc.federation.generator.plugin.Argument.type:type_name -> grpc.federation.generator.plugin.Type
	40,  // 64: grpc.federation.generator.plugin.Argument.value:type_name -> grpc.federation.generator.plugin.Value
	29,  // 65: grpc.federation.generator.plugin.Argument.if:type_name -> grpc.federation.generator.plugin.CELValue
	29,  // 66: grpc.federation.generator.plugin.Value.cel:type_name -> grpc.federation.generator.plugin.CELValue
	42,  // 67: grpc.federation.generator.plugin.ValidationExpr.error:type_name -> grpc.federation.generator.plugin.GRPCError
	16,  // 68: grpc.federation.generator.plugin.GRPCError.def_set:type_name -> grpc.federation.generator.plugin.VariableDefinitionSet
	29,  // 69: grpc.federation.generator.plugin.GRPCError.if:type_name -> grpc.federation.generator.plugin.CELValue
	73,  // 70: grpc.federation.generator.plugin.GRPCError.code:type_name -> google.rpc.Code
	29,  // 71: grpc.federation.generator.plugin.GRPCError.message:type_name -> grpc.federation.generator.plugin.CELValue
	43,  // 72: grpc.federation.generator.plugin.GRPCError.details:type_name -> grpc.federation.generator.plugin.GRPCErrorDetail
	29,  // 73: grpc.federation.generator.plugin.GRPCError.ignore_and_response:type_name -> grpc.federation.generator.plugin.CELValue
	16,  // 74: grpc.federation.generator.plugin.GRPCErrorDetail.def_set:type_name -> grpc.federation.generator.plugin.VariableDefinitionSet
	29,  // 75: grpc.federation.generator.plugin.GRPCErrorDetail.if:type_name -> grpc.federation.generator.plugin.CELValue
	16,  // 76: grpc.federation.generator.plugin.GRPCErrorDetail.messages:type_name -> grpc.federation.generator.plugin.VariableDefinitionSet
	44,  // 77: grpc.federation.generator.plugin.GRPCErrorDetail.precondition_failures:type_name -> grpc.federation.generator.plugin.PreconditionFailure
	46,  // 78: grpc.federation.generator.plugin.GRPCErrorDetail.bad_requests:type_name -> grpc.federation.generator.plugin.BadRequest
	48,  // 79: grpc.federation.generator.plugin.GRPCErrorDetail.localized_messages:type_name -> grpc.federation.generator.plugin.LocalizedMessage
	29,  // 80: grpc.federation.generator.plugin.GRPCErrorDetail.by:type_name -> grpc.federation.generator.plugin.CELValue
	45,  // 81: grpc.federation.generator.plugin.PreconditionFailure.violations:type_name -> grpc.federation.generator.plugin.PreconditionFailureViolation
	29,  // 82: grpc.federation.generator.plugin.PreconditionFailureViolation.type:type_name -> grpc.federation.generator.plugin.CELValue
	29,  // 83: grpc.federation.generator.plugin.PreconditionFailureViolation.subject:type_name -> grpc.federation.generator.plugin.CELValue
	29,  // 84: grpc.federation.generator.plugin.PreconditionFailureViolation.description:type_name -> grpc.federation.generator.plugin.CELValue
	47,  // 85: grpc.federation.generator.plugin.BadRequest.field_violations:type_name -> grpc.federation.generator.plugin.BadRequestFieldViolation
	29,  // 86: grpc.federation.generator.plugin.BadRequestFieldViolation.field:type_name -> grpc.federation.generator.plugin.CELValue
	29,  // 87: grpc.federation.generator.plugin.BadRequestFieldViolation.description:type_name -> grpc.federation.generator.plugin.CELValue
	29,  // 88: grpc.federation.generator.plugin.LocalizedMessage.message:type_name -> grpc.federation.generator.plugin.CELValue
	52,  // 89: grpc.federation.generator.plugin.Enum.rule:type_name -> grpc.federation.generator.plugin.EnumRule
	53,  // 90: grpc.federation.generator.plugin.EnumValue.rule:type_name -> grpc.federation.generator.plugin.EnumValueRule
	54,  // 91: grpc.federation.generator.plugin.EnumValueRule.aliases:type_name -> grpc.federation.generator.plugin.EnumValueAlias
	56,  // 92: grpc.federation.generator.plugin.CELPlugin.functions:type_name -> grpc.federation.generator.plugin.CELFunction
	28,  // 93: grpc.federation.generator.plugin.CELFunction.args:type_name -> grpc.federation.generator.plugin.Type
	28,  // 94: grpc.federation.generator.plugin.CELFunction.return:type_name -> grpc.federation.generator.plugin.Type
	59,  // 95: grpc.federation.generator.plugin.ProtoCodeGeneratorResponse.GeneratedCodeInfo.annotation:type_name -> grpc.federation.generator.plugin.ProtoCodeGeneratorResponse.GeneratedCodeInfo.Annotation
	57,  // 96: grpc.federation.generator.plugin.ProtoCodeGeneratorResponse.File.generated_code_info:type_name -> grpc.federation.generator.plugin.ProtoCodeGeneratorResponse.GeneratedCodeInfo
	3,   // 97: grpc.federation.generator.plugin.ProtoCodeGeneratorResponse.GeneratedCodeInfo.Annotation.semantic:type_name -> grpc.federation.generator.plugin.ProtoCodeGeneratorResponse.GeneratedCodeInfo.Annotation.Semantic
	7,   // 98: grpc.federation.generator.plugin.Reference.FileMapEntry.value:type_name -> grpc.federation.generator.plugin.File
	10,  // 99: grpc.federation.generator.plugin.Reference.ServiceMapEntry.value:type_name -> grpc.federation.generator.plugin.Service
	12,  // 100: grpc.federation.generator.plugin.Reference.MethodMapEntry.value:type_name -> grpc.federation.generator.plugin.Method
	14,  // 101: grpc.federation.generator.plugin.Reference.MessageMapEntry.value:type_name -> grpc.federation.generator.plugin.Message
	18,  // 102: grpc.federation.generator.plugin.Reference.FieldMapEntry.value:type_name -> grpc.federation.generator.plugin.Field
	50,  // 103: grpc.federation.generator.plugin.Reference.EnumMapEntry.value:type_name -> grpc.federation.generator.plugin.Enum
	51,  // 104: grpc.federation.generator.plugin.Reference.EnumValueMapEntry.value:type_name -> grpc.federation.generator.plugin.EnumValue
	49,  // 105: grpc.federation.generator.plugin.Reference.OneofMapEntry.value:type_name -> grpc.federation.generator.plugin.Oneof
	55,  // 106: grpc.federation.generator.plugin.Reference.CelPluginMapEntry.value:type_name -> grpc.federation.generator.plugin.CELPlugin
	25,  // 107: grpc.federation.generator.plugin.Reference.GraphMapEntry.value:type_name -> grpc.federation.generator.plugin.MessageDependencyGraph
	17,  // 108: grpc.federation.generator.plugin.Reference.VariableDefinitionMapEntry.value:type_name -> grpc.federation.generator.plugin.VariableDefinition
	22,  // 109: grpc.federation.generator.plugin.Reference.VariableDefinitionGroupMapEntry.value:type_name -> grpc.federation.generator.plugin.VariableDefinitionGroup
	110, // [110:110] is the sub-list for method output_type
	110, // [110:110] is the sub-list for method input_type
	110, // [110:110] is the sub-list for extension type_name
	110, // [110:110] is the sub-list for extension extendee
	0,   // [0:110] is the sub-list for field type_name
}

func init() { file_grpc_federation_generator_proto_init() }
func file_grpc_federation_generator_proto_init() {
	if File_grpc_federation_generator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_federation_generator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoCodeGeneratorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeGeneratorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Method); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableDefinitionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoBindField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldOneofRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableDefinitionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequentialVariableDefinitionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrentVariableDefinitionGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageDependencyGraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageDependencyGraphNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CELValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Iterator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapIteratorExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicyConstant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetryPolicyExponential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Argument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GRPCError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GRPCErrorDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreconditionFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreconditionFailureViolation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BadRequestFieldViolation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalizedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oneof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumValueRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumValueAlias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CELPlugin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CELFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoCodeGeneratorResponse_GeneratedCodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoCodeGeneratorResponse_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_grpc_federation_generator_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoCodeGeneratorResponse_GeneratedCodeInfo_Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_grpc_federation_generator_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_grpc_federation_generator_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*VariableDefinitionGroup_Sequential)(nil),
		(*VariableDefinitionGroup_Concurrent)(nil),
	}
	file_grpc_federation_generator_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*VariableExpr_By)(nil),
		(*VariableExpr_Map)(nil),
		(*VariableExpr_Call)(nil),
		(*VariableExpr_Message)(nil),
		(*VariableExpr_Validation)(nil),
	}
	file_grpc_federation_generator_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*Type_MessageId)(nil),
		(*Type_EnumId)(nil),
		(*Type_OneofFieldId)(nil),
	}
	file_grpc_federation_generator_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*MapIteratorExpr_By)(nil),
		(*MapIteratorExpr_Message)(nil),
	}
	file_grpc_federation_generator_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*RetryPolicy_Constant)(nil),
		(*RetryPolicy_Exponential)(nil),
	}
	file_grpc_federation_generator_proto_msgTypes[54].OneofWrappers = []interface{}{}
	file_grpc_federation_generator_proto_msgTypes[55].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_federation_generator_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   68,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_grpc_federation_generator_proto_goTypes,
		DependencyIndexes: file_grpc_federation_generator_proto_depIdxs,
		EnumInfos:         file_grpc_federation_generator_proto_enumTypes,
		MessageInfos:      file_grpc_federation_generator_proto_msgTypes,
	}.Build()
	File_grpc_federation_generator_proto = out.File
	file_grpc_federation_generator_proto_rawDesc = nil
	file_grpc_federation_generator_proto_goTypes = nil
	file_grpc_federation_generator_proto_depIdxs = nil
}
